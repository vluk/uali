(() => {
    const e = (...篝) => document.getElementById(...篝),
        t = (...篝) => document.querySelector(...篝),
        s = (...篝) => document.querySelectorAll(...篝);

    function a(e) {
        const t = Math.round(e),
            s = t % 1e3,
            a = Math.floor(t / 1e3) % 60,
            n = Math.floor(t / 6e4);
        return {
            ms: s.toString().padStart(3, "0"),
            s: a.toString().padStart(2, "0"),
            m: n.toString()
        }
    }

    function n(e) {
        const t = Math.abs(Math.floor((new Date - e) / 1e3));
        let s = Math.floor(t / 31536e3);
        return s > 1 ? `${s} years` : (s = Math.floor(t / 2592e3)) > 1 ? `${s} months` : (s = Math.floor(t / 86400)) > 1 ? `${s} days` : (s = Math.floor(t / 3600)) > 1 ? `${s} hours` : (s = Math.floor(t / 60)) > 1 ? `${s} minutes` : `${Math.floor(t)} seconds`
    }

    function o(e) {
        let t = Math.floor(e / 3600);
        return t > 1 ? `${t}<span>H</span>` : (t = Math.floor(e / 60)) > 1 ? `${t}<span>M</span>` : `${Math.floor(e)}<span>S</span>`
    }

    function i(e) {
        const t = Math.abs(Math.floor((new Date - e) / 1e3));
        if (t < 10) return "now";
        let s = Math.floor(t / 86400);
        return s > 1 ? `${s}d` : (s = Math.floor(t / 3600)) > 1 ? `${s}h` : (s = Math.floor(t / 60)) > 1 ? `${s}m` : `${Math.floor(t)}s`
    }

    function r(e) {
        const t = document.createElement("div");
        return t.textContent = e, t.innerHTML
    }
    const l = {
        5e5: "ǰ",
        4e5: "ǯǰ",
        1e5: "ǯ",
        9e4: "ǭǯ",
        5e4: "Ǯ",
        4e4: "ǭǮ",
        1e4: "ǭ",
        9e3: "ǫǭ",
        5e3: "Ǭ",
        4e3: "ǫǬ",
        1e3: "ǫ",
        900: "ǩǫ",
        500: "Ǫ",
        400: "ǩǪ",
        100: "ǩ",
        90: "ǧǩ",
        50: "Ǩ",
        40: "ǧǨ",
        10: "ǧ",
        9: "ǥǧ",
        5: "Ǧ",
        4: "ǥǦ",
        1: "ǥ"
    };

    function c(e) {
        const t = Object.keys(l);
        let s = "";
        for (e = Math.max(0, Math.floor(e)); e >= 1;)
            for (let a = t.length - 1; a >= 0; a--)
                if (e / parseInt(t[a]) >= 1) {
                    e -= parseInt(t[a]), s += l[t[a]];
                    break
                } return s
    }
    const d = new Map;

    function u(e) {
        if (d.has(e)) return d.get(e);
        const t = `data:image/svg+xml;base64,${new Identicon(MD5(e), { background: [0, 0, 0, 200], margin: .15, size: 300, brightness: .48, saturation: .65, format: "svg" }).toString()}`;
        return d.set(e, t), t
    }

    function m(e = 1, t = 4, s = "ABCDEFGHJKLMNPQRSTUVWXYZ") {
        let a = "";
        const n = e + Math.floor((t - e + 1) * Math.random());
        for (let e = 0; e < n; e++) a += s[Math.floor(Math.random() * s.length)];
        return a
    }

    function g(e) {
        "loading" === document.readyState ? document.addEventListener("DOMContentLoaded", e, !1) : e()
    }
    let h;

    function f() {
        const t = TETRIO_ENV.countdown - Date.now();
        if (t <= 0) e("prelaunch_countdown").innerHTML = "00:00:00", clearInterval(h), e("prelaunch").classList.add("hiding"), setTimeout(() => {
            e("prelaunch").classList.add("hidden")
        }, 7500);
        else {
            var s = Math.floor(t / 36e5),
                a = Math.floor(t % 36e5 / 6e4),
                n = Math.floor(t % 6e4 / 1e3);
            s < 10 && (s = "0" + s), a < 10 && (a = "0" + a), n < 10 && (n = "0" + n), e("prelaunch_countdown").innerHTML = s + ":" + a + '<span class="sec">:' + n + "</span>"
        }
    }

    function _(e) {
        e()
    }

    function b(e) {}

    function y() {
        return !1
    }

    function v(e) {
        return void 0 === e ? e : JSON.parse(JSON.stringify(e))
    }
    g(() => {
        TETRIO_ENV.countdown && TETRIO_ENV.countdown > Date.now() && (e("prelaunch").classList.remove("hidden"), h = setInterval(() => {
            f()
        }, 100), f())
    });
    const k = {
            send: (e, t, s, a = !1, n = !1, o = !1, i = {}, r = !1) => new Promise((l, c) => {
                const d = new XMLHttpRequest;
                d.open(e, t, !0), r || d.setRequestHeader("Content-Type", "application/json"), Object.keys(i).forEach(e => {
                    d.setRequestHeader(e, i[e])
                }), a && z.loggedIn() && d.setRequestHeader("Authorization", `Bearer ${z.token()}`), d.onload = () => {
                    if (4 === d.readyState)
                        if (n) l(d.responseText);
                        else {
                            const e = JSON.parse(d.responseText);
                            e.success || o ? l(e) : c(e)
                        }
                }, d.onerror = () => {
                    c({
                        success: !1,
                        errors: [{
                            msg: "a connection error has occured"
                        }]
                    })
                }, d.send(r ? s : JSON.stringify(s))
            }),
            get: (e, t, s = !1, a = !1, n = !1, o = {}, i = !1) => {
                let r = !1;
                return Object.keys(t).forEach(s => {
                    e += `${r ? "&" : "?"}${encodeURIComponent(s)}=${encodeURIComponent(t[s])}`, r = !0
                }), k.send("GET", e, [], s, a, n, o, i)
            },
            post: (e, t, s = !1, a = !1, n = !1, o = {}, i = !1) => k.send("POST", e, t, s, a, n, o, i),
            postImage: (e, t, s = !1) => {
                const a = new FormData;
                return a.append("file", t), k.send("POST", e, a, s, !1, !1, {}, !0, !0)
            }
        },
        w = {};
    let L = 0,
        E = [];

    function x(t) {
        let s = t;
        if ("string" == typeof t && (s = {
                msg: t
            }), s.suppressable && (te.notifications.suppress && document.body.classList.contains("ingame_phys") || Qa())) return void E.push(s);
        const a = document.createElement("div");
        if (a.classList.add("notification"), a.classList.add("ns"), a.setAttribute("style", `--pri: ${s.color || "#FFFFFF"}; --sec: ${s.subcolor || "#000000"};`), a.style.borderColor = s.color || "#FFFFFF", a.style.backgroundColor = s.bgcolor || "#060606DD", a.style.color = s.fgcolor || "#FFFFFF", a.setAttribute("data-nid", ++L), e("notifications").appendChild(a), s.classes && s.classes.forEach(e => {
                a.classList.add(e)
            }), s.icon) {
            a.classList.add("has_image");
            const e = document.createElement("img");
            e.classList.add("notification_icon"), e.src = s.icon.includes("/") ? s.icon : `res/icon/${s.icon}.svg`, a.appendChild(e)
        }
        if (s.subicon) {
            const e = document.createElement("img");
            e.classList.add("notification_icon_sub"), e.src = s.subicon.includes("/") ? s.subicon : `res/icon/${s.subicon}.svg`, a.appendChild(e)
        }
        if (s.header) {
            const e = document.createElement("h1");
            e.innerHTML = s.header, a.appendChild(e)
        }
        const n = document.createElement("p");
        if (n.innerHTML = s.msg, a.appendChild(n), s.buttons = s.buttons || [], s.buttons.length) {
            const e = document.createElement("div");
            e.classList.add("notification_button_holder"), e.classList.add("flex-row"), e.classList.add("ns"), a.appendChild(e), s.buttons.forEach(t => {
                const s = document.createElement("div");
                s.classList.add("notification_button"), s.classList.add("flex-item"), s.innerHTML = `${t.icon ? `<img src="${t.icon}" />` : ""}${t.label}`, t.classes.forEach(e => {
                    s.classList.add(e)
                }), s.addEventListener("click", () => {
                    t.onclick(() => {
                        M(a)
                    })
                }), e.appendChild(s)
            })
        }
        return w[L] = setTimeout(() => {
            M(a)
        }, s.timeout || 5e3), a.addEventListener("click", s.onclick ? () => {
            s.onclick(() => {
                M(a)
            })
        } : () => {
            M(a)
        }), a
    }

    function T(e) {
        return x({
            msg: e,
            color: "#FF4200",
            icon: "error"
        })
    }

    function I(e) {
        return x({
            msg: e,
            color: "#6AFF3C",
            icon: "ok"
        })
    }

    function S(e) {
        let t = "";
        return e.errors.forEach(e => {
            t += `• ${e.msg}<br>`
        }), x({
            msg: t,
            color: "#FF4200",
            icon: "error"
        })
    }

    function M(e) {
        e.classList.add("despawning"), setTimeout(() => {
            e.parentNode && e.parentNode.removeChild(e)
        }, 500)
    }

    function C(t, s) {
        if (!t || !e("notifications").contains(t)) return x(s);
        let a = s;
        "string" == typeof s && (a = {
            msg: s
        });
        const n = t;
        if (n.innerHTML = "", n.style.borderColor = a.color || "#FFFFFF", a.icon) {
            n.classList.add("has_image");
            const e = document.createElement("img");
            e.classList.add("notification_icon"), e.src = `res/icon/${a.icon}.svg`, n.appendChild(e)
        }
        const o = document.createElement("p");
        return o.innerHTML = a.msg, n.appendChild(o), a.timeout && (clearTimeout(w[n.getAttribute("data-nid")]), w[L] = setTimeout(() => {
            M(n)
        }, a.timeout || 5e3)), n
    }

    function A() {
        E.forEach(e => {
            x(e)
        }), E = []
    }

    function H(t) {
        let s = t;
        "string" == typeof t && (s = {
            msg: t
        });
        const a = document.createElement("div");
        a.classList.add("waterfall_item"), a.classList.add("ns"), a.style.setProperty("--bgc", s.bgcolor || "#888888"), a.style.color = s.fgcolor || "#FFFFFF", e("waterfall").prepend(a);
        const n = document.createElement("p");
        n.classList.add("ns"), n.innerHTML = s.msg, a.appendChild(n), setTimeout(() => {
            R(a)
        }, s.timeout || 5e3);
        const o = n.getBoundingClientRect();
        return sn.play("waterfall", {
            x: o.left + o.width / 2,
            y: o.top + 1.3 * o.height,
            w: o.width,
            h: o.height,
            color: dn(s.bgcolor) || 8947848
        }), a
    }

    function R(e) {
        e.classList.add("despawning"), setTimeout(() => {
            e.parentNode.removeChild(e)
        }, 500)
    }

    function $(t) {
        const s = document.createElement("div");
        if (s.classList.add("killfeed_item"), s.classList.add("ns"), s.classList.toggle("killer", t.killer == z.username()), s.classList.toggle("victim", t.victim == z.username()), e("killfeed").prepend(s), null !== t.killer && void 0 !== t.killer) {
            const e = document.createElement("p");
            e.classList.add("ns"), e.innerHTML = t.killer.toUpperCase(), s.appendChild(e)
        }
        const a = document.createElement("img");
        if (a.src = `/res/icon/elim-${t.type || "sizzle"}.svg`, s.appendChild(a), null !== t.victim && void 0 !== t.victim) {
            const e = document.createElement("p");
            e.classList.add("ns"), e.innerHTML = t.victim.toUpperCase(), s.appendChild(e)
        }
        return setTimeout(() => {
            O(s)
        }, 1e4), s
    }

    function O(e) {
        e.classList.add("despawning"), setTimeout(() => {
            e.parentNode.removeChild(e)
        }, 500)
    }
    const P = {};

    function D(t) {
        const s = `dlg_${Date.now()}${Math.floor(1e6 * Math.random())}`,
            a = document.createElement("div");
        if (a.classList.add("oob_modal"), a.classList.add("hidden"), a.id = s, e("dialogs").appendChild(a), t.title) {
            const e = document.createElement("h1");
            e.innerHTML = t.title, a.appendChild(e)
        }
        if (t.msg) {
            const e = document.createElement("p");
            e.innerHTML = t.msg, a.appendChild(e)
        }
        t.classes && t.classes.forEach(e => {
            a.classList.add(e)
        });
        const n = document.createElement("div");
        return n.classList.add("oob_button_holder"), n.classList.add("flex-row"), n.classList.add("ns"), a.appendChild(n), t.buttons.forEach(e => {
            const t = document.createElement("div");
            t.classList.add("oob_button"), t.classList.add("flex-item"), t.innerHTML = e.label, e.classes.forEach(e => {
                t.classList.add(e)
            }), e.id && (t.id = e.id), t.addEventListener("click", () => {
                e.callback(() => {
                    N(a)
                }, a)
            }), n.appendChild(t)
        }), setTimeout(() => {
            a.classList.remove("hidden"), Ce.push(), Ce.bindGuide(Ae.dialog)
        }, 1), e("dialogs").classList.remove("hidden"), bt(), P[s] = {
            id: s,
            options: t,
            el: a
        }, a
    }

    function N(e, t = !1) {
        e.classList.contains("hidden") || (e.classList.add("hidden"), yt(), Ce.pop(), t && P[e.id] && P[e.id].onskip && P[e.id].onskip(), delete P[e.id], setTimeout(() => {
            1 === e.parentNode.childElementCount && e.parentNode.classList.add("hidden"), e.parentNode.removeChild(e)
        }, 500))
    }
    g(() => {
        e("dialogs").addEventListener("mousedown", t => {
            if (t.target !== e("dialogs")) return;
            if (!e("dialogs").children.length) return;
            const s = e("dialogs").children[e("dialogs").children.length - 1];
            s.classList.contains("noclickout") || s.classList.contains("hidden") || (N(s, !0), vs.play("menuclick"))
        })
    }), g(() => {
        document.addEventListener("keydown", (function(t) {
            if (t.repeat) return;
            let s = t.code;
            if ("NumpadEnter" === s && (s = "Enter"), "Enter" !== s && "Escape" !== s) return;
            if (!t.target.getAttribute(`data-${s.toLowerCase()}`)) return;
            const a = e(t.target.getAttribute(`data-${s.toLowerCase()}`));
            "input" === a.tagName.toLowerCase() || "textarea" === a.tagName.toLowerCase() ? a.focus() : a.click(), t.preventDefault()
        }))
    });
    let F = !1;
    const U = function() {
        const t = {
            sfx: {
                state: "loading SFX..."
            },
            fonts: {
                state: null
            },
            feecof: {
                state: null
            },
            homebanner: {
                state: "loading home banner data..."
            },
            environment: {
                state: "checking for game updates..."
            }
        };
        let s = 0;
        const a = [];
        let n = !1,
            o = !1,
            i = window.I;

        function r() {
            e("preload").classList.add("hidden"), a.forEach(e => {
                    e()
                }),
                function() {
                    const e = G.quickjoin;
                    if (!e) return;
                    switch (e.substring(0, 2)) {
                        case "R:":
                            ws.navigateToShortID(e.trim());
                            break;
                        case "r:":
                            ws.navigateToLongID(e.trim());
                            break;
                        case "P:":
                        case "D:":
                            break;
                        case "S:":
                            Ke(void 0, e.length > 2 ? e.substring(2).trim() : void 0);
                            break;
                        default:
                            ct("connecting to live servers…"), o = !0, Ws.require().then(t => {
                                dt(), et("playmulti"), t.maintenance && document.body.classList.add("maintenance"), ea.joinRoom(e.trim())
                            }).catch(() => {
                                dt(), T("could not connect to live servers")
                            })
                    }
                }(), o || document.body.classList.contains("banstatus_restrict") || Ws.connect()
        }

        function l() {
            let s = "";
            Object.keys(t).forEach(e => {
                t[e].state && (s += `<p>${t[e].state}</p>`)
            }), e("preload_msgs").innerHTML = s
        }
        return window.I = void 0, g(() => {
            "devel" === TETRIO_ENV.mode && document.body.classList.add("devel"), e("js_load_error").classList.add("handled"), PIXI.utils.isWebGLSupported() || e("no_webgl_error").classList.remove("hidden"), l()
        }), g(() => {
            console.log("%cTETR.IO", "color: #DFC0F3;\n\t\t\t\t\t display: block;\n\t\t\t\t\t font-size: 5em;\n\t\t\t\t\t font-weight: 900;\n\t\t\t\t\t text-shadow: 0px 0px 2px #9150BA;\n\t\t\t\t\t background-color: #45345088;\n\t\t\t\t\t padding: 0 0.25em;\n\t\t\t\t\t border-radius: 3px;"), console.log("%cPlease be careful when pasting anything in the console. Attackers may be out to steal your login information.", "color: #FFA69F;\n\t\t\t\t\t display: block;\n\t\t\t\t\t font-size: 1.2em;\n\t\t\t\t\t font-weight: 900;\n\t\t\t\t\t text-shadow: 0px 0px 2px #D53428;\n\t\t\t\t\t background-color: #993B2288;\n\t\t\t\t\t padding: 0 1em;\n\t\t\t\t\t border-radius: 3px;")
        }), {
            i: function() {
                return i
            },
            finishLoad: function(a) {
                t[a].state = null, l(), ++s === Object.keys(t).length && (e("preload").classList.add("ready"), n && r())
            },
            setState: function(e, s) {
                t[e].state = s, l()
            },
            finish: function() {
                s === Object.keys(t).length && r(), n = !0
            },
            ready: function(e) {
                a.push(e)
            },
            unready: function() {
                n && (e("preload").classList.remove("hidden"), n = !1, lt())
            },
            update: function(e = !1) {
                F = !0, e || x({
                    msg: "installing a required update... if this seems stuck, hit CTRL+F5 to force a reload",
                    color: "#0060FF",
                    icon: "update",
                    timeout: 15e3
                });
                try {
                    V(() => {
                        location.reload(!0)
                    })
                } catch (e) {
                    console.error(e)
                }
                setTimeout(() => {
                    location.reload(!0)
                }, 1e3)
            }
        }
    }();
    let B = 0;
    const X = (() => {
            const t = {
                    "tetr-io_300x250_1": {
                        name: "Quick Play Lobby",
                        enabled: !0,
                        refresh: !0,
                        refresh_time: 6e4
                    },
                    "tetr-io_970X250_1": {
                        name: "Homebanner Mega",
                        enabled: !0,
                        refresh: !0,
                        refresh_time: 6e4,
                        min_width: 1600
                    },
                    "tetr-io_970X250_2": {
                        name: "Custom Room Results Mega",
                        enabled: !0,
                        refresh: !0,
                        refresh_time: 6e4,
                        min_width: 1600
                    },
                    "tetr-io_728x90_1": {
                        name: "Homebanner",
                        enabled: !0,
                        refresh: !0,
                        refresh_time: 6e4,
                        max_width: 1600
                    },
                    "tetr-io_728x90_2": {
                        name: "Solo Menu",
                        enabled: !0,
                        refresh: !0,
                        refresh_time: 6e4
                    },
                    "tetr-io_728x90_3": {
                        name: "Multiplayer Menu",
                        enabled: !0,
                        refresh: !0,
                        refresh_time: 6e4
                    },
                    "tetr-io_728x90_4": {
                        name: "Custom Room Lobby",
                        enabled: !0,
                        refresh: !0,
                        refresh_time: 6e4
                    },
                    "tetr-io_728x90_5": {
                        name: "Custom Room Results",
                        enabled: !0,
                        refresh: !0,
                        refresh_time: 6e4,
                        max_width: 1600
                    },
                    "tetr-io_728x90_6": {
                        name: "Tetra League Home",
                        enabled: !0,
                        refresh: !0,
                        refresh_time: 6e4
                    },
                    "tetr-io_728x90_7": {
                        name: "Solo Results",
                        enabled: !0,
                        refresh: !0,
                        refresh_time: 6e4
                    },
                    "tetr-io_728x90_8": {
                        name: "Login Screen",
                        enabled: !0,
                        refresh: !1
                    },
                    "tetr-io_728x90_9": {
                        name: "Welcome Back Screen",
                        enabled: !0,
                        refresh: !1
                    }
                },
                s = {
                    login: ["tetr-io_728x90_8", "tetr-io_728x90_9"],
                    main: ["tetr-io_728x90_1", "tetr-io_728x90_2", "tetr-io_728x90_3", "tetr-io_728x90_4", "tetr-io_728x90_5", "tetr-io_728x90_6", "tetr-io_728x90_7", "tetr-io_300x250_1"]
                };

            function a(s) {
                aiptag && t[s] && (!t[s].enabled || window.innerWidth < (t[s].min_width || 0) || window.innerWidth >= (t[s].max_width || 9999) ? e(s).classList.add("hidden") : document.body.classList.contains("ceriad_exempt") || document.body.classList.contains("ceriad_blocked") || (e(s).classList.remove("hidden"), t[s].mounted || console.log(`${s} mounted, now ${++B} mounts`), t[s].mounted = !0, t[s].elapsed = 0, aiptag.cmd.display.push((function() {
                    aipDisplayTag.display(s)
                }))))
            }

            function n(s) {
                aiptag && t[s] && t[s].enabled && ("" !== e(s).innerHTML && (e(s).innerHTML = ""), t[s].mounted && console.log(`${s} unmounted, now ${--B} mounts`), t[s].mounted = !1, t[s].elapsed = 0)
            }
            let o = 0;

            function i(e = !1) {
                if (e || !o) return void(o = Date.now());
                const s = Date.now() - o;
                o = Date.now(), Object.keys(t).forEach(e => {
                    t[e].enabled && t[e].refresh && t[e].mounted && (t[e].elapsed = (t[e].elapsed || 0) + s, t[e].elapsed >= t[e].refresh_time && a(e))
                })
            }
            return g(() => {
                e("consentbutton").addEventListener("click", () => {
                    window.aipAPItag && (window.location = "?cmpscreen")
                }), setInterval(() => {
                    if ("visible" === document.visibilityState) return e("menus").classList.contains("hidden") && e("preload").classList.contains("hidden") ? (i(!0), void Object.keys(t).forEach(e => {
                        n(e)
                    })) : void i()
                }, 1e3)
            }), {
                mount: a,
                mountGroup: function(e) {
                    s[e] && s[e].forEach(e => {
                        a(e)
                    })
                },
                mountIfMounted: function(e) {
                    aiptag && t[e] && t[e].enabled && t[e].refresh && t[e].mounted && a(e)
                },
                unmount: n,
                unmountGroup: function(e) {
                    s[e] && s[e].forEach(e => {
                        n(e)
                    })
                }
            }
        })(),
        z = (() => {
            const t = {
                loggedIn: !1,
                token: "",
                id: "",
                username: ""
            };

            function s() {
                localStorage.setItem("userToken", t.token), localStorage.setItem("userID", t.id), localStorage.setItem("username", t.username)
            }
            async function a(e, t) {
                if (!crypto.subtle) return;
                e = await crypto.subtle.importKey("raw", e, "AES-CBC", !1, ["encrypt"]);
                const s = crypto.getRandomValues(new Uint8Array(16)),
                    a = await crypto.subtle.encrypt({
                        name: "AES-CBC",
                        iv: s
                    }, e, (new TextEncoder).encode(t));
                return btoa(JSON.stringify({
                    x: btoa(String.fromCharCode(...new Uint8Array(a))),
                    z: btoa(String.fromCharCode(...s))
                }))
            }
            return function() {
                const e = localStorage.getItem("userToken"),
                    s = localStorage.getItem("userID"),
                    a = localStorage.getItem("username");
                e ? (t.loggedIn = !0, t.token = e, t.id = s, t.username = a) : (t.loggedIn = !1, t.token = "", t.id = "", t.username = "")
            }(), {
                loggedIn: () => t.loggedIn,
                id: () => t.id,
                token: () => t.token,
                username: () => t.username,
                logout: (e = !1) => {
                    t.loggedIn = !1, t.token = "", t.id = "", t.username = "", Ft.resetZen(), s()
                },
                login: (e, a, n, o = !0) => {
                    t.loggedIn = !0, t.token = e, t.id = a, t.username = n, o && s()
                },
                anon: () => document.body.classList.contains("anon"),
                getUserInfoOrDie: function(e, t) {
                    return new Promise((s, n) => {
                        Le.getWhenReady(async o => {
                            k.get("/api/users/me", [], !0, !1, !1, {
                                "X-Session-ID": e,
                                "X-Connection-ID": await a(t, o)
                            }).then(e => {
                                s(e.user)
                            }, e => {
                                if (e.errors[0] && "A-LINED" === e.errors[0].msg) return window.location = e.redirect, void Y();
                                U.unready(), n()
                            })
                        })
                    })
                },
                requestPassword: function(t) {
                    if (document.body.classList.contains("uses2fa")) return D({
                        title: "PASSWORD REQUESTED",
                        msg: `to continue, please re-enter the password for <span class="inline_self">${localStorage.getItem("username").toUpperCase()}</span><br><input data-escape="request_password_cancel" data-enter="request_password_totp" id="request_password" type="password" placeholder="PASSWORD" autocomplete="current-password"><br><br>…as well as a six-digit code from your authenticator app, or one of your recovery codes<br><input data-escape="request_password_cancel" data-enter="request_password_submit" id="request_password_totp" placeholder="six digits" class="mono_input centered_input" autocomplete="off">`,
                        buttons: [{
                            label: "CANCEL",
                            classes: [],
                            id: "request_password_cancel",
                            callback: e => {
                                e()
                            }
                        }, {
                            label: "SUBMIT",
                            classes: ["pri"],
                            id: "request_password_submit",
                            callback: s => {
                                t(e("request_password").value, e("request_password_totp").value), s()
                            }
                        }]
                    }), void e("request_password").focus();
                    D({
                        title: "PASSWORD REQUESTED",
                        msg: `to continue, please re-enter the password for <span class="inline_self">${localStorage.getItem("username").toUpperCase()}</span><br><input data-escape="request_password_cancel" data-enter="request_password_submit" id="request_password" type="password" placeholder="PASSWORD" autocomplete="current-password">`,
                        buttons: [{
                            label: "CANCEL",
                            classes: [],
                            id: "request_password_cancel",
                            callback: e => {
                                e()
                            }
                        }, {
                            label: "SUBMIT",
                            classes: ["pri"],
                            id: "request_password_submit",
                            callback: s => {
                                t(e("request_password").value, ""), s()
                            }
                        }]
                    }), e("request_password").focus()
                },
                esc: a
            }
        })(),
        G = (() => {
            const t = `SESS-${Math.floor(Math.random() * Number.MAX_SAFE_INTEGER)}`;
            let a = null;
            const o = window.location.hash.substring(1);
            history.replaceState(null, null, " ");
            let i = !1,
                l = [],
                c = !1;

            function d(s) {
                return new Promise((o, i) => {
                    z.getUserInfoOrDie(t, a).then(t => {
                        s && (s.classList.remove("busy"), h(s), e("captcha_form").classList.remove("busy"), h(e("captcha_form")), e("totp_form").classList.remove("busy"), h(e("totp_form")), e("entry_form").classList.remove("busy"), h(e("entry_form"))), e("me_username").innerHTML = t.username, e("me_username").classList.toggle("lu", t.username.length > 13), e("tetra_me_username").innerHTML = t.username, As(Ss(t.xp), e("me_level")), Ps(t.xp, !0), Ft.loadZen(t.zen), "anon" === t.role ? (document.body.classList.add("anon"), localStorage.setItem("moonKagariUsername", "X-ANON")) : (document.body.classList.remove("anon"), t.email || x({
                            msg: "you have not yet set an email on your account. if you forget your password, you will have no way to recover your account!<br>you can set an email at CONFIG -> ACCOUNT.",
                            color: "#FFD800",
                            icon: "warning",
                            timeout: 15e3
                        }), Ft.setRecords(t.records || {}), localStorage.setItem("lastUsername", t.username), localStorage.setItem("moonKagariUsername", t.username)), document.body.classList.toggle("uses2fa", t.totp && t.totp.enabled), document.body.classList.toggle("dmfriendonly", "everyone" !== (t.privacy_dm || "everyone")), document.body.classList.toggle("bot", "bot" === t.role), document.body.classList.toggle("staff", ["mod", "admin"].includes(t.role)), document.body.setAttribute("data-country", t.country), document.body.setAttribute("data-country-hidden", !1 === t.privacy_showcounty ? "yes" : "no");
                        try {
                            _paq.push(["setCustomDimension", 1, t.role]), "anon" !== t.role && _paq.push(["setUserId", t.username])
                        } catch (e) {
                            console.error(e)
                        }
                        if (setTimeout(() => {
                                try {
                                    _paq.push(["setCustomDimension", 2, window.IS_ELECTRON ? `TETR.IO Desktop v${window.CLIENT_VERSION}${te.electron.adblock ? " (ads blocked)" : ""}` : `Browser${window.aiptag.settings ? "" : " (ads blocked)"}`])
                                } catch (e) {
                                    console.error(e)
                                }
                            }, 2500), document.body.classList.toggle("supporter", !!t.supporter), document.body.classList.toggle("supporter_at_launch", !!t.supporter), localStorage.setItem("wasLastSupporter", t.supporter || ["mod", "admin"].includes(t.role) ? "Yes, that's it!" : "No, that's wrong!"), l = t.warnings, c = !!t.thanked, "ok" === t.bannedstatus) _(), document.body.classList.remove("trapped"), localStorage.removeItem("trapped");
                        else {
                            document.body.classList.add("trapped"), localStorage.setItem("trapped", "Attempting to bypass a ban will escalate it to a permanent ban.");
                            let s = "silence" == t.bannedstatus ? "SILENCED users may not chat or create public rooms, but can still submit scores and play online." : "RESTRICTED users may not play online or submit scores.",
                                a = 1;
                            t.banlist.forEach(e => {
                                s += `</p><p>&nbsp;</p><p class="modal_also">#${a++}: ban id ${e._id}</p><p>your ${e.from} was ${"silence" == e.type ? "silenced" : "restricted"} at ${new Date(e.ts).toLocaleString()} for the following reason:</p><p class="banreason">${r(e.reason)}</p><p>this ban ${Date.parse(e.expires) - Date.parse(e.ts) >= 54e12 ? "will not expire" : `expires in ${n(Date.parse(e.expires))}`}.`
                            }), e("ban_header").innerHTML = `YOU HAVE BEEN ${"silence" == t.bannedstatus ? "SILENCED" : "RESTRICTED"}`, e("ban_reasons").outerHTML = `<p id="ban_reasons">${s}</p>`, e("banned_warning").classList.remove("hidden"), document.body.classList.add(`banstatus_${t.bannedstatus}`)
                        }
                        e("me_leaguerank").classList.toggle("hidden", "z" === t.league.rank), e("me_leaguerank").src = `/res/league-ranks/${t.league.rank}.png`, t.avatar_revision ? e("me_avatar").setAttribute("src", `/user-content/avatars/${t._id}.jpg?rv=${t.avatar_revision}`) : "anon" !== t.role && e("me_avatar").setAttribute("src", u(t._id)), (t.supporter || ["mod", "admin"].includes(t.role)) && (document.body.classList.add("ceriad_exempt"), document.cookie = "ceriad_exempt=1;max-age=31536000;domain=tetr.io"), X.unmountGroup("login"), o(t)
                    }).catch(t => {
                        console.log(t), U.unready(), s && (s.classList.remove("busy"), h(s), e("captcha_form").classList.remove("busy"), h(e("captcha_form")), e("totp_form").classList.remove("busy"), h(e("totp_form"))), T("you were logged out. please log in again!"), e("entry_username").value = z.username(), document.body.classList.contains("trapped") || "Attempting to bypass a ban will escalate it to a permanent ban." === localStorage.getItem("trapped") || z.logout(), e("entry_button").click()
                    })
                })
            }

            function p() {
                if (!PIXI.utils.isWebGLSupported()) return;
                "Attempting to bypass a ban will escalate it to a permanent ban." === localStorage.getItem("trapped") && document.body.classList.add("trapped");
                const t = function() {
                    if (!o) return;
                    let t = !1;
                    const a = o.substring(0, 2);
                    return "P:" !== a && "D:" !== a ? (s(".quickjoin").forEach(e => {
                        switch (a) {
                            case "R:":
                            case "r:":
                                e.innerHTML = "opening replay <span></span>", e.querySelector("span").textContent = o;
                                break;
                            case "S:":
                                e.innerHTML = "supporting <span></span>", e.querySelector("span").textContent = o.substring(2), t = !0;
                                break;
                            default:
                                e.innerHTML = "joining room <span></span>", e.querySelector("span").textContent = !1 !== te.video.hideroomids ? `#${o}` : "<hidden>"
                        }
                        e.classList.remove("hidden")
                    }), s(".electron_jump").forEach(t => {
                        t.classList.remove("hidden"), t.addEventListener("click", (function(t) {
                            h(e("entry_form")), h(e("return_form")), f(e("electron_form")), window.location = `tetrio://${o}`
                        }))
                    }), s(".electron_jump_also").forEach(e => {
                        e.classList.remove("hidden")
                    }), t) : void 0
                }();
                "P:" !== o.substring(0, 2) ? "D:" !== o.substring(0, 2) ? (window.IS_ELECTRON ? document.body.classList.add("no_login_ceriad") : (vt("Login Screen"), "Yes, that's it!" === localStorage.getItem("wasLastSupporter") && document.body.classList.add("no_login_ceriad")), z.loggedIn() ? (f(e("return_form")), e("return_is").innerHTML = z.username().toUpperCase(), (t || window.IS_ELECTRON && "never" !== te.electron.loginskip) && ("always" === (te.electron.loginskip || "always") || o) && (e("return_form").classList.add("busy"), d(e("return_form")))) : f(e("entry_form"))) : f(e("deletion_step1_form")) : f(e("reset_step2_form"))
            }

            function h(e) {
                e.classList.add("hidden"), setTimeout(() => {
                    e.classList.contains("hidden") && e.classList.add("noop")
                }, 300)
            }

            function f(e) {
                e.classList.remove("noop"), e.getBoundingClientRect(), e.classList.remove("hidden"), document.body.classList.contains("no_login_ceriad") || ("return_form" === e.id ? X.mount("tetr-io_728x90_9") : "entry_form" === e.id && X.mount("tetr-io_728x90_8"))
            }

            function _() {
                if (!l.length) return void(c ? D({
                    msg: '</p><center><img src="/res/hifive.png" /><h1>THANK YOU FOR REPORTING</h1></center><p>thank you for your recent report! reports like yours help us identify those who disrupt TETR.IO for everyone.</p><p>your recent reports led to actions against a badly behaving player and their account. thank you for making TETR.IO a better place!</p><p>we hope you\'ll continue assisting us by reporting bad behavior in the future, as well.</p><br><p>TETR.IO STAFF',
                    classes: ["noclickout"],
                    buttons: [{
                        label: "OK",
                        classes: [],
                        callback: e => {
                            e(), U.finish()
                        }
                    }]
                }) : U.finish());
                const e = l.shift();
                D({
                    title: "YOU HAVE BEEN WARNED",
                    msg: `a TETR.IO moderator has left a message for you. please read it thoroughly.</p><p>&nbsp;</p><p class="modal_also">warning id ${e._id}</p><p>you were warned at ${new Date(e.ts).toLocaleString()} for the following reason:</p><p class="banreason">${r(e.reason)}`,
                    classes: ["ban_modal", "noclickout"],
                    buttons: [{
                        label: "OK",
                        classes: [],
                        callback: e => {
                            e(), _()
                        }
                    }]
                })
            }
            return g(() => {
                k.get("/api/server/environment", {}, !1, !1, !1, {
                    "X-Session-ID": t
                }).then(t => {
                    a = Uint8Array.from(atob(t.vx), e => e.charCodeAt(0)), U.finishLoad("environment"), window.IS_ELECTRON && (console.log("%cUsing the Desktop Client", "color: #F3E5C0;\n\t\t\t\t\t\t font-size: 1.2em;\n\t\t\t\t\t\t font-weight: 900;\n\t\t\t\t\t\t text-shadow: 0px 0px 2px #BAB650;\n\t\t\t\t\t\t background-color: #504C3488;\n\t\t\t\t\t\t padding: 0 1em;\n\t\t\t\t\t\t border-radius: 3px;"), q()), t.signature.build.id !== TETRIO_ENV.build.id || "creamykagarin7843" !== document.body.getAttribute("data-v") ? (console.log(`%cOut of date. Local build ${TETRIO_ENV.build.id} does not match server build ${t.signature.build.id}`, "color: #FF8E8E;\n\t\t\t\t\t font-size: 1.2em;\n\t\t\t\t\t font-weight: 900;\n\t\t\t\t\t text-shadow: 0px 0px 2px #E83737;\n\t\t\t\t\t background-color: #B6181888;\n\t\t\t\t\t padding: 0 1em;\n\t\t\t\t\t border-radius: 3px;"), U.update()) : (console.log(`%cUp to date. Local version ${TETRIO_ENV.version}-${TETRIO_ENV.mode} | Commit ${TETRIO_ENV.commit.id} (${new Date(TETRIO_ENV.commit.time).toLocaleString()}) | Server cycle ${TETRIO_ENV.serverCycle} | Build ${TETRIO_ENV.build.id} (${new Date(TETRIO_ENV.build.time).toLocaleString()})`, "color: #C0F3C8;\n\t\t\t\t\t font-size: 1.2em;\n\t\t\t\t\t font-weight: 900;\n\t\t\t\t\t text-shadow: 0px 0px 2px #50BA5C;\n\t\t\t\t\t background-color: #34503788;\n\t\t\t\t\t padding: 0 1em;\n\t\t\t\t\t border-radius: 3px;"), p()), e("preform_players_entry").innerHTML = t.stats.players.toLocaleString("en-US"), e("preform_players_return").innerHTML = t.stats.players.toLocaleString("en-US"), e("preform_games_entry").innerHTML = t.stats.gamesplayed.toLocaleString("en-US"), e("preform_games_return").innerHTML = t.stats.gamesplayed.toLocaleString("en-US"), e("preform_hours_entry").innerHTML = Math.floor(t.stats.gametime / 3600).toLocaleString("en-US"), e("preform_hours_return").innerHTML = Math.floor(t.stats.gametime / 3600).toLocaleString("en-US")
                }, e => {
                    U.finishLoad("environment"), window.IS_ELECTRON && (console.log("%cUsing the Desktop Client", "color: #F3E5C0;\n\t\t\t\t\t\t font-size: 1.2em;\n\t\t\t\t\t\t font-weight: 900;\n\t\t\t\t\t\t text-shadow: 0px 0px 2px #BAB650;\n\t\t\t\t\t\t background-color: #504C3488;\n\t\t\t\t\t\t padding: 0 1em;\n\t\t\t\t\t\t border-radius: 3px;"), q()), T("failed to check for updates. check your connection!"), p()
                }), e("entry_button").addEventListener("click", (function(t) {
                    let s = e("entry_username").value.toLowerCase();
                    if (!s) {
                        if (localStorage.getItem("defaultAnonUsername")) e("entry_username").value = localStorage.getItem("defaultAnonUsername");
                        else {
                            const t = `GUEST-${m(1, 10, "0123456789AIUEO_")}`;
                            localStorage.setItem("defaultAnonUsername", t), e("entry_username").value = t
                        }
                        return s = e("entry_username").value.toLowerCase(), e("entry_form").classList.add("busy"), void e("askregister_anon").click()
                    }
                    e("entry_form").classList.add("busy"), k.get(`/api/users/${encodeURIComponent(s)}/exists`, {}).then(t => {
                        e("entry_form").classList.remove("busy"), h(e("entry_form")), t.exists ? (e("login_is").innerHTML = s.toUpperCase(), e("login_password_username_field").value = s.toUpperCase(), f(e("login_form")), e("login_password").focus()) : (e("askregister_is").innerHTML = s.toUpperCase(), e("register_password_username_field").value = s.toUpperCase(), f(e("askregister_form")))
                    }, t => {
                        e("entry_form").classList.remove("busy"), S(t)
                    })
                })), e("askregister_back").addEventListener("click", (function(t) {
                    h(e("askregister_form")), f(e("entry_form")), e("entry_username").focus()
                })), e("askregister_register").addEventListener("click", (function(t) {
                    h(e("askregister_form")), localStorage.getItem("lastUsername") ? (f(e("registeralt_form")), e("registeralt_username").textContent = localStorage.getItem("lastUsername").toUpperCase()) : (f(e("register_form")), e("register_password_email_field").focus())
                })), e("registeralt_back").addEventListener("click", (function(t) {
                    h(e("registeralt_form")), f(e("entry_form")), e("entry_username").focus()
                })), e("registeralt_continue").addEventListener("click", (function(t) {
                    h(e("registeralt_form")), f(e("register_form")), e("register_password_email_field").focus()
                })), e("register_button").addEventListener("click", (function(s) {
                    const a = e("entry_username").value.toLowerCase(),
                        o = e("register_password_email_field").value,
                        l = e("register_password").value;
                    l === e("register_password_confirmation").value ? (e("register_form").classList.add("busy"), k.post("/api/users/create", {
                        username: a,
                        password: l,
                        email: o || void 0,
                        captcha: e("captcha").value
                    }, !1, !1, !1, {
                        "X-Session-ID": t
                    }).then(t => {
                        e("register_password").value = "", e("register_password_confirmation").value = "", x("welcome!"), i = !0, t.newname || x("this name has been used before"), z.login(t.token, t.userid, a), d(e("register_form"))
                    }, t => {
                        if (t.errors[0] && "BLOCK" === t.errors[0].msg) {
                            document.body.classList.add("trapped"), localStorage.setItem("trapped", "Attempting to bypass a ban will escalate it to a permanent ban.");
                            let s = "BLOCKED users or IPs may not create accounts. try using an existing account.",
                                a = 1;
                            return t.banlist.forEach(e => {
                                s += `</p><p>&nbsp;</p><p class="modal_also">#${a++}: ban id ${e._id}</p><p>your ${e.from} was ${"silence" == e.type ? "silenced" : "restrict" == e.type ? "restricted" : "blocked"} at ${new Date(e.ts).toLocaleString()} for the following reason:</p><p class="banreason">${r(e.reason)}</p><p>this ban ${Date.parse(e.expires) - Date.parse(e.ts) >= 54e12 ? "will not expire" : `expires in ${n(Date.parse(e.expires))}`}.`
                            }), e("block_reasons").outerHTML = `<p id="block_reasons">${s}</p>`, e("blocked_warning").classList.remove("hidden"), t.infinite && (e("block_header").innerHTML = "YOU HAVE BEEN BANNED FROM TETR.IO", e("blocked_warning").classList.remove("ban_modal"), e("blocked_warning").classList.add("crash_modal")), e("register_form").classList.remove("busy"), e("captcha_form").classList.remove("busy"), h(e("register_form")), void h(e("captcha_form"))
                        }
                        if (t.errors[0] && "CAPTCHA" === t.errors[0].msg) return e("captcha").value = "", e("register_form").classList.remove("busy"), e("captcha_form").classList.remove("busy"), e("captcha_button").setAttribute("data-for", "register_button"), e("captcha_image").innerHTML = t.captcha, h(e("register_form")), void f(e("captcha_form"));
                        e("register_form").classList.remove("busy"), e("captcha_form").classList.remove("busy"), S(t)
                    })) : T("those passwords don't match")
                })), e("register_back").addEventListener("click", (function(t) {
                    h(e("register_form")), f(e("askregister_form")), e("register_password").value = "", e("register_password_confirmation").value = ""
                })), e("login_button").addEventListener("click", (function(t) {
                    const s = e("entry_username").value.toLowerCase(),
                        a = e("login_password").value;
                    e("login_form").classList.add("busy"), k.post("/api/users/authenticate", {
                        username: s,
                        password: a,
                        totp: e("totp").value
                    }).then(t => {
                        e("login_password").value = "", z.login(t.token, t.userid, s), d(e("login_form"))
                    }, t => {
                        if (t.errors[0] && "BLOCK" === t.errors[0].msg) {
                            document.body.classList.add("trapped"), localStorage.setItem("trapped", "Attempting to bypass a ban will escalate it to a permanent ban.");
                            let s = "BLOCKED users or IPs may not use TETR.IO.",
                                a = 1;
                            return t.banlist.forEach(e => {
                                s += `</p><p>&nbsp;</p><p class="modal_also">#${a++}: ban id ${e._id}</p><p>your ${e.from} was ${"silence" == e.type ? "silenced" : "restrict" == e.type ? "restricted" : "blocked"} at ${new Date(e.ts).toLocaleString()} for the following reason:</p><p class="banreason">${r(e.reason)}</p><p>this ban ${Date.parse(e.expires) - Date.parse(e.ts) >= 54e12 ? "will not expire" : `expires in ${n(Date.parse(e.expires))}`}.`
                            }), e("block_reasons").outerHTML = `<p id="block_reasons">${s}</p>`, e("blocked_warning").classList.remove("hidden"), t.infinite && (e("block_header").innerHTML = "YOU HAVE BEEN BANNED FROM TETR.IO", e("blocked_warning").classList.remove("ban_modal"), e("blocked_warning").classList.add("crash_modal")), e("login_form").classList.remove("busy"), void h(e("login_form"))
                        }
                        if (t.errors[0] && "TOTP" === t.errors[0].msg) return e("totp").value = "", e("login_form").classList.remove("busy"), e("totp_form").classList.remove("busy"), e("totp_button").setAttribute("data-for", "login_button"), h(e("login_form")), void f(e("totp_form"));
                        e("totp_form").classList.remove("busy"), e("login_form").classList.remove("busy"), S(t)
                    })
                })), e("login_back").addEventListener("click", (function(t) {
                    h(e("login_form")), f(e("entry_form")), e("entry_username").focus(), e("login_password").value = ""
                })), e("login_reset").addEventListener("click", (function(t) {
                    h(e("login_form")), f(e("request_reset_form")), e("request_reset_email").focus(), e("login_password").value = ""
                })), e("request_reset_back").addEventListener("click", (function(t) {
                    h(e("request_reset_form")), f(e("login_form")), e("login_password").focus(), e("request_reset_email").value = ""
                })), e("request_reset_button").addEventListener("click", (function(s) {
                    const a = e("entry_username").value.toLowerCase(),
                        n = e("request_reset_email").value;
                    e("request_reset_form").classList.add("busy"), k.post("/api/users/requestPasswordReset", {
                        username: a,
                        email: n,
                        captcha: e("captcha").value
                    }, !1, !1, !1, {
                        "X-Session-ID": t
                    }).then(t => {
                        I("if the email you entered was correct, you should be receiving an email shortly!"), e("request_reset_form").classList.remove("busy"), e("request_reset_back").click(), e("captcha_form").classList.remove("busy"), h(e("captcha_form"))
                    }, t => {
                        if (t.errors[0] && "CAPTCHA" === t.errors[0].msg) return e("captcha").value = "", e("request_reset_form").classList.remove("busy"), e("captcha_form").classList.remove("busy"), e("captcha_button").setAttribute("data-for", "request_reset_button"), e("captcha_image").innerHTML = t.captcha, h(e("request_reset_form")), f(e("captcha_form")), void e("captcha_form").classList.remove("busy");
                        e("request_reset_form").classList.remove("busy"), e("captcha_form").classList.remove("busy"), S(t)
                    })
                })), e("reset_step2_button").addEventListener("click", (function(t) {
                    const s = o.substring(2),
                        a = e("reset_step2_password").value;
                    a === e("reset_step2_password_confirmation").value ? (e("reset_step2_form").classList.add("busy"), k.post("/api/users/resetPassword", {
                        recoveryid: s,
                        password: a
                    }).then(t => {
                        e("reset_step2_password").value = "", e("reset_step2_password_confirmation").value = "", I("password reset!"), h(e("reset_step2_form")), f(e("entry_form")), e("entry_username").focus()
                    }, t => {
                        e("reset_step2_form").classList.remove("busy"), S(t)
                    })) : T("those passwords don't match")
                })), e("askregister_anon").addEventListener("click", (function(s) {
                    const a = e("entry_username").value.toLowerCase();
                    e("askregister_form").classList.add("busy"), k.post("/api/users/anonymousJoin", {
                        username: a,
                        captcha: e("captcha").value
                    }, !1, !1, !1, {
                        "X-Session-ID": t
                    }).then(t => {
                        t.newname || x("this name has been used before - please consider registering a full account!"), i = !0, z.login(t.token, t.userid, a, !1), d(e("askregister_form"))
                    }, t => {
                        if (t.errors[0] && "BLOCK" === t.errors[0].msg) {
                            document.body.classList.add("trapped"), localStorage.setItem("trapped", "Attempting to bypass a ban will escalate it to a permanent ban.");
                            let s = "BLOCKED users or IPs may not use TETR.IO. try using an existing account.",
                                a = 1;
                            return t.banlist.forEach(e => {
                                s += `</p><p>&nbsp;</p><p class="modal_also">#${a++}: ban id ${e._id}</p><p>your ${e.from} was ${"silence" == e.type ? "silenced" : "restrict" == e.type ? "restricted" : "blocked"} at ${new Date(e.ts).toLocaleString()} for the following reason:</p><p class="banreason">${r(e.reason)}</p><p>this ban ${Date.parse(e.expires) - Date.parse(e.ts) >= 54e12 ? "will not expire" : `expires in ${n(Date.parse(e.expires))}`}.`
                            }), e("block_reasons").outerHTML = `<p id="block_reasons">${s}</p>`, e("blocked_warning").classList.remove("hidden"), t.infinite && (e("block_header").innerHTML = "YOU HAVE BEEN BANNED FROM TETR.IO", e("blocked_warning").classList.remove("ban_modal"), e("blocked_warning").classList.add("crash_modal")), e("askregister_form").classList.remove("busy"), e("captcha_form").classList.remove("busy"), h(e("askregister_form")), void h(e("captcha_form"))
                        }
                        if (t.errors[0] && "CAPTCHA" === t.errors[0].msg) return e("captcha").value = "", e("askregister_form").classList.remove("busy"), e("captcha_form").classList.remove("busy"), e("entry_form").classList.remove("busy"), e("captcha_button").setAttribute("data-for", "askregister_anon"), e("captcha_image").innerHTML = t.captcha, h(e("askregister_form")), h(e("entry_form")), void f(e("captcha_form"));
                        e("askregister_form").classList.remove("busy"), e("captcha_form").classList.remove("busy"), S(t)
                    })
                })), e("captcha_button").addEventListener("click", (function(t) {
                    e("captcha").value && (e("captcha_form").classList.add("busy"), e(e("captcha_button").getAttribute("data-for")).click())
                })), e("totp_button").addEventListener("click", (function(t) {
                    e("totp").value && (e("totp_form").classList.add("busy"), e(e("totp_button").getAttribute("data-for")).click())
                })), e("return_logout").addEventListener("click", (function(t) {
                    document.body.classList.contains("trapped") || "Attempting to bypass a ban will escalate it to a permanent ban." === localStorage.getItem("trapped") || (h(e("return_form")), z.logout(!0), f(e("entry_form")))
                })), e("return_button").addEventListener("click", (function(t) {
                    e("return_form").classList.add("busy"), d(e("return_form"))
                })), e("ban_skip_button").addEventListener("click", (function(t) {
                    e("banned_warning").classList.add("hidden"), _()
                })), e("deletion_step1_button").addEventListener("click", (function(t) {
                    h(e("deletion_step1_form")), f(e("deletion_step2_form"))
                })), e("deletion_step1_cancel").addEventListener("click", (function(e) {
                    U.update(!0)
                })), e("deletion_step2_button").addEventListener("click", (function(t) {
                    h(e("deletion_step2_form")), f(e("deletion_step3_form")), e("deletion_spanner").classList.remove("hidden")
                })), e("deletion_step2_cancel").addEventListener("click", (function(e) {
                    U.update(!0)
                }));
                let s = 10,
                    l = !1;

                function c() {
                    l || (s--, e("deletion_countdown").innerHTML = Math.max(0, s), -1 === s ? (e("deletion_cancel_holder").remove(), e("deletion_countdown").remove(), e("deletion_header").innerHTML = "DESTRUCTION!", setTimeout(() => {
                        k.post("/api/users/finalizeDeletion", {
                            deletionid: o.substring(2)
                        }).then(t => {
                            z.logout(), e("deletion_header").innerHTML = "ACCOUNT DELETED", e("deletion_final_form").classList.add("shudder"), setTimeout(() => {
                                e("deletion_final_form").classList.remove("shudder")
                            }, 150), setTimeout(() => {
                                U.update(!0)
                            }, 5e3)
                        }, t => {
                            e("deletion_header").innerHTML = "an error has occured", S(t)
                        })
                    }, 500)) : setTimeout(c, 1e3))
                }
                e("deletion_step3_button").addEventListener("click", (function(t) {
                    h(e("deletion_step3_form")), f(e("deletion_final_form")), setTimeout(c, 1e3)
                })), e("deletion_step3_cancel").addEventListener("click", (function(e) {
                    U.update(!0)
                })), e("deletion_final_cancel").addEventListener("click", (function(e) {
                    l = !0, U.update(!0)
                }))
            }), {
                quickjoin: o,
                newacc: () => i
            }
        })();
    let j = null,
        W = null;

    function q() {
        document.body.classList.add("electron"), navigator.onLine || document.body.classList.add("offline"), window.addEventListener("offline", (function(e) {
            document.body.classList.add("offline")
        })), window.addEventListener("online", (function(e) {
            document.body.classList.remove("offline")
        })), document.addEventListener("keydown", t => {
            if (!t.repeat) {
                if ("f5" === t.key.toLowerCase() || "r" === t.key.toLowerCase() && t.ctrlKey) {
                    if (!F && document.body.classList.contains("ingame_phys") && e("menus").classList.contains("hidden") && 0 === ht) return;
                    U.update(!0)
                }("I" === t.key && t.ctrlKey || "f12" === t.key.toLowerCase()) && window.IPC.send("devtools"), "f11" === t.key.toLowerCase() && "darwin" !== PLATFORM_TYPE && window.IPC.send("fullscreen"), "f4" !== t.key.toLowerCase() || j || (j = setTimeout(() => {
                    window.IPC.send("emergency")
                }, 5e3), W = setTimeout(() => {
                    x("keep holding F4 to enable SAFE MODE")
                }, 1e3))
            }
        }, !1), document.addEventListener("keyup", e => {
            "f4" === e.key.toLowerCase() && j && (clearTimeout(j), clearTimeout(W), j = null, W = null)
        }, !1), window.IPC.on("goto", (e, t) => {
            if (document.body.classList.contains("ingame") || Ws && Ws.isConnected() && t.startsWith("https://tetr.io/#")) return F = !0, void(window.location = t);
            const s = t.replace("https://tetr.io/#", "");
            switch (s.substring(0, 2)) {
                case "R:":
                    ws.navigateToShortID(s.trim());
                    break;
                case "r:":
                    ws.navigateToLongID(s.trim());
                    break;
                case "P:":
                case "D:":
                    break;
                default:
                    ct("connecting to live servers…"), Ws.require().then(e => {
                        dt(), et("playmulti"), e.maintenance && document.body.classList.add("maintenance"), ea.joinRoom(s.trim())
                    }).catch(() => {
                        dt(), T("could not connect to live servers")
                    })
            }
        })
    }

    function K() {}

    function Y() {
        window.IS_ELECTRON ? (F = !0, window.IPC.send("close")) : console.error("Tried to exit while not on Electron")
    }

    function V(e) {
        window.IS_ELECTRON ? (window.IPC.send("nuke"), setTimeout(() => {
            caches.delete("tetrio-dyn").then(e).catch(e => {
                console.error(e)
            })
        }, 500)) : e()
    }

    function Z(t) {
        window.IS_ELECTRON && !1 !== te.electron.presence && (t.largeImageText = z.anon() ? "Playing anonymously" : `${z.username().toUpperCase()} - Lv. ${e("me_level").innerHTML}${e("me_leaguerank").classList.contains("hidden") ? "" : ` - ${e("me_leaguerank").getAttribute("src").replace("/res/league-ranks/", "").replace(".png", "").toUpperCase()}`}`, z.anon() || (t.buttons = [{
            label: "View Profile",
            url: `https://ch.tetr.io/u/${z.username()}`
        }]), window.IPC.send("presence", t))
    }

    function J() {
        window.IS_ELECTRON && !1 !== te.electron.taskbarflash && window.IPC.send("flash")
    }

    function Q(e) {
        window.IS_ELECTRON && window.IPC.send("blockmovement", !!e)
    }
    const ee = (() => {
            let e = !1,
                t = !1;
            window.addEventListener("gamepadconnected", () => {
                e = !0, x({
                    msg: "a controller was connected",
                    color: "#6AFF3C",
                    icon: "connect"
                }), PIXI.Ticker.shared.add(o)
            }), window.addEventListener("gamepaddisconnected", () => {
                e = !1, x({
                    msg: "a controller was disconnected",
                    color: "#FF783C",
                    icon: "disconnect"
                }), PIXI.Ticker.shared.remove(o)
            }), window.addEventListener("keydown", () => {
                t = !1
            }, !0);
            const s = {};
            let a = 10,
                n = 2;

            function o(o) {
                if (!e) return;
                const i = navigator.getGamepads ? navigator.getGamepads() : navigator.webkitGetGamepads ? navigator.webkitGetGamepads : [];
                let r;
                for (let e = 0; e < i.length; e++) i[e] && (r = i[e]);
                for (let e = 0; e < r.axes.length; e++) {
                    const i = `Axis_${e}_Pos`,
                        l = r.axes[e] > (te.controls.sensitivity || .5),
                        c = `Axis_${e}_Neg`,
                        d = r.axes[e] < -1 * (te.controls.sensitivity || .5);
                    void 0 !== s[i] && s[i] !== l ? (s[i] = l, a = 10, n = 2, t = !0, document.dispatchEvent(new CustomEvent(`gp${l ? "down" : "up"}`, {
                        detail: i
                    }))) : void 0 === s[i] ? s[i] = l : l && (a > 0 ? a -= o : n > 0 ? n -= o : (n = 2, t = !0, document.dispatchEvent(new CustomEvent("gprepeat", {
                        detail: i,
                        repeat: !0
                    })))), void 0 !== s[c] && s[c] !== d ? (s[c] = d, a = 10, n = 2, t = !0, document.dispatchEvent(new CustomEvent(`gp${d ? "down" : "up"}`, {
                        detail: c
                    }))) : void 0 === s[c] ? s[c] = d : d && (a > 0 ? a -= o : n > 0 ? n -= o : (n = 2, t = !0, document.dispatchEvent(new CustomEvent("gprepeat", {
                        detail: c,
                        repeat: !0
                    }))))
                }
                for (let e = 0; e < r.buttons.length; e++) {
                    const i = `Button_${e}`,
                        l = r.buttons[e].value > (te.controls.sensitivity || .5);
                    void 0 !== s[i] && s[i] !== l ? (s[i] = l, a = 10, n = 2, t = !0, document.dispatchEvent(new CustomEvent(`gp${l ? "down" : "up"}`, {
                        detail: i
                    }))) : void 0 === s[i] ? s[i] = l : l && (a > 0 ? a -= o : n > 0 ? n -= o : (n = 2, t = !0, document.dispatchEvent(new CustomEvent("gprepeat", {
                        detail: i,
                        repeat: !0
                    }))))
                }
            }
            return {
                pulse: function(s, a, n) {
                    if (!e || !t) return;
                    if (0 == te.controls.vibration) return;
                    const o = navigator.getGamepads ? navigator.getGamepads() : navigator.webkitGetGamepads ? navigator.webkitGetGamepads : [];
                    let i;
                    for (let e = 0; e < o.length; e++) o[e] && (i = o[e]);
                    i.vibrationActuator && i.vibrationActuator.playEffect && i.vibrationActuator.playEffect("dual-rumble", {
                        startDelay: 0,
                        duration: s,
                        weakMagnitude: Math.min(1, (te.controls.vibration || 1) * a),
                        strongMagnitude: Math.min(1, (te.controls.vibration || 1) * n)
                    })
                },
                WEAK_GLIDE: [25, 0, .15],
                WEAK_TAP: [50, 0, .15],
                HARDDROP: [25, 0, .2],
                CLEARLINE: [200, .3, .3],
                CLEARSPIN: [200, 1, .3],
                CLEARQUAD: [300, .3, .6],
                CLEARB2B: [300, .6, .6],
                SPIN: [50, 1, 0],
                DAMAGE_SMALL: [150, .7, 0],
                DAMAGE_MEDIUM: [250, .7, .7],
                DAMAGE_LARGE: [350, 1, 1],
                GARBAGERISE: [150, .5, 0],
                CLEAR: [300, .5, 1],
                TOPOUT: [500, .5, 1],
                GARBAGESMASH: [500, 1, 1]
            }
        })(),
        te = {
            controls: {
                style: "guideline",
                custom: {
                    moveLeft: [],
                    moveRight: [],
                    softDrop: [],
                    hardDrop: [],
                    rotateCCW: [],
                    rotateCW: [],
                    rotate180: [],
                    hold: [],
                    exit: [],
                    retry: [],
                    chat: [],
                    target1: [],
                    target2: [],
                    target3: [],
                    target4: [],
                    menuUp: [],
                    menuDown: [],
                    menuLeft: [],
                    menuRight: [],
                    menuBack: [],
                    menuConfirm: [],
                    openSocial: []
                },
                sensitivity: .5,
                vibration: 1
            },
            handling: {
                arr: 2,
                das: 10,
                dcd: 0,
                sdf: 6,
                safelock: !0,
                cancel: !1
            },
            volume: {
                disable: !1,
                music: .45,
                sfx: .4,
                stereo: .5,
                others: !0,
                attacks: !0,
                next: !1,
                noreset: !0,
                oof: !0,
                scrollable: !0,
                bgmtweak: {}
            },
            video: {
                graphics: "high",
                caching: "medium",
                actiontext: "all",
                particles: .6,
                background: .3,
                bounciness: 1,
                shakiness: 1,
                gridopacity: .1,
                boardopacity: .85,
                shadowopacity: .15,
                zoom: 1,
                alwaystiny: !1,
                nosuperlobbyanim: !1,
                colorshadow: !1,
                sidebyside: !0,
                spin: !0,
                chatfilter: !0,
                background_url: null,
                background_usecustom: null,
                nochat: !1,
                hideroomids: !1,
                emotes: !0,
                emotes_anim: !0,
                siren: !0,
                powersave: !1,
                invert: !1,
                nobg: !1,
                chatbg: !0,
                replaytoolsnocollapse: !1,
                kos: !0,
                fire: !0,
                focuswarning: !0,
                hidenetwork: !1,
                guide: !0,
                lowrescounters: !1,
                desktopnotifications: !0,
                lowres: !1,
                webgl: "webgl2",
                bloom: 1,
                chroma: .5,
                flashwave: 1
            },
            gameoptions: {
                pro_40l: !1,
                pro_40l_alert: !1,
                pro_40l_retry: !1,
                stride_40l: !1,
                slot_40l_counter1: void 0,
                slot_40l_counter2: void 0,
                slot_40l_counter3: void 0,
                slot_40l_counter4: void 0,
                slot_40l_counter5: void 0,
                pro_blitz: !1,
                pro_blitz_alert: !1,
                pro_blitz_retry: !1,
                stride_blitz: !1,
                slot_blitz_counter1: void 0,
                slot_blitz_counter2: void 0,
                slot_blitz_counter3: void 0,
                slot_blitz_counter4: void 0,
                slot_blitz_counter5: void 0
            },
            electron: {
                loginskip: "always",
                frameratelimit: "4x",
                presence: !0,
                taskbarflash: !0,
                anglecompat: !1,
                adblock: !1
            },
            notifications: {
                suppress: !1,
                forcesound: !0,
                online: "ingame",
                offline: "off",
                dm: "both",
                dm_pending: "both",
                invite: "both",
                other: "both"
            }
        },
        se = "ID_1";
    let ae = {
        moveLeft: ["A", "KEYA", "NUMPAD4"],
        moveRight: ["D", "KEYD", "NUMPAD6"],
        softDrop: ["W", "KEYW", "NUMPAD8"],
        hardDrop: ["S", "KEYS", "NUMPAD5"],
        rotateCCW: ["ARROWLEFT", "LEFT", "NUMPAD7"],
        rotateCW: ["ARROWRIGHT", "RIGHT", "NUMPAD9"],
        rotate180: ["ARROWUP", "UP", "NUMPAD2"],
        hold: ["SHIFT", "SHIFTLEFT", "NUMPADENTER"],
        exit: ["ESCAPE"],
        retry: ["R", "KEYR"],
        chat: ["T", "KEYT"],
        target1: ["1", "DIGIT1"],
        target2: ["2", "DIGIT2"],
        target3: ["3", "DIGIT3"],
        target4: ["4", "DIGIT4"],
        menuUp: ["W", "KEYW", "ARROWUP", "UP"],
        menuDown: ["S", "KEYS", "ARROWDOWN", "DOWN"],
        menuLeft: ["A", "KEYA", "ARROWLEFT", "LEFT"],
        menuRight: ["D", "KEYD", "ARROWRIGHT", "RIGHT"],
        menuBack: ["ESCAPE", "BACKSPACE"],
        menuConfirm: ["ENTER", "NUMPADENTER", "SPACE"],
        openSocial: ["TAB"]
    };
    const ne = {
            moveLeft: ["ARROWLEFT", "LEFT", "NUMPAD4"],
            moveRight: ["ARROWRIGHT", "RIGHT", "NUMPAD6"],
            softDrop: ["ARROWDOWN", "DOWN", "NUMPAD2"],
            hardDrop: ["SPACE", "NUMPAD8"],
            rotateCCW: ["CONTROL", "CONTROLLEFT", "Z", "KEYZ", "NUMPAD3", "NUMPAD7"],
            rotateCW: ["ARROWUP", "UP", "X", "KEYX", "NUMPAD1", "NUMPAD5", "NUMPAD9"],
            rotate180: ["A", "KEYA"],
            hold: ["SHIFT", "SHIFTLEFT", "C", "KEYC", "NUMPAD0"],
            exit: ["ESCAPE"],
            retry: ["R", "KEYR"],
            chat: ["T", "KEYT"],
            target1: ["1", "DIGIT1"],
            target2: ["2", "DIGIT2"],
            target3: ["3", "DIGIT3"],
            target4: ["4", "DIGIT4"],
            menuUp: ["W", "KEYW", "ARROWUP", "UP"],
            menuDown: ["S", "KEYS", "ARROWDOWN", "DOWN"],
            menuLeft: ["A", "KEYA", "ARROWLEFT", "LEFT"],
            menuRight: ["D", "KEYD", "ARROWRIGHT", "RIGHT"],
            menuBack: ["ESCAPE", "BACKSPACE"],
            menuConfirm: ["ENTER", "NUMPADENTER", "SPACE"],
            openSocial: ["TAB"]
        },
        oe = {
            moveLeft: ["A", "KEYA", "NUMPAD4"],
            moveRight: ["D", "KEYD", "NUMPAD6"],
            softDrop: ["W", "KEYW", "NUMPAD8"],
            hardDrop: ["S", "KEYS", "NUMPAD5"],
            rotateCCW: ["ARROWLEFT", "LEFT", "NUMPAD7"],
            rotateCW: ["ARROWRIGHT", "RIGHT", "NUMPAD9"],
            rotate180: ["ARROWUP", "UP", "NUMPAD2"],
            hold: ["SHIFT", "SHIFTLEFT", "NUMPADENTER"],
            exit: ["ESCAPE"],
            retry: ["R", "KEYR"],
            chat: ["T", "KEYT"],
            target1: ["1", "DIGIT1"],
            target2: ["2", "DIGIT2"],
            target3: ["3", "DIGIT3"],
            target4: ["4", "DIGIT4"],
            menuUp: ["W", "KEYW", "ARROWUP", "UP"],
            menuDown: ["S", "KEYS", "ARROWDOWN", "DOWN"],
            menuLeft: ["A", "KEYA", "ARROWLEFT", "LEFT"],
            menuRight: ["D", "KEYD", "ARROWRIGHT", "RIGHT"],
            menuBack: ["ESCAPE", "BACKSPACE"],
            menuConfirm: ["ENTER", "NUMPADENTER", "SPACE"],
            openSocial: ["TAB"]
        };
    let ie = ["../res/bg/1.jpg", "../res/bg/2.jpg", "../res/bg/3.jpg", "../res/bg/4.jpg", "../res/bg/5.jpg", "../res/bg/6.jpg", "../res/bg/7.jpg", "../res/bg/8.jpg", "../res/bg/9.jpg", "../res/bg/10.jpg", "../res/bg/11.jpg", "../res/bg/12.jpg", "../res/bg/13.jpg", "../res/bg/14.jpg", "../res/bg/15.jpg", "../res/bg/16.jpg", "../res/bg/17.jpg", "../res/bg/18.jpg", "../res/bg/19.jpg", "../res/bg/20.jpg", "../res/bg/21.jpg", "../res/bg/22.jpg", "../res/bg/23.jpg", "../res/bg/24.jpg", "../res/bg/25.jpg", "../res/bg/26.jpg", "../res/bg/27.jpg", "../res/bg/28.jpg", "../res/bg/29.jpg", "../res/bg/30.jpg", "../res/bg/31.jpg", "../res/bg/32.jpg", "../res/bg/33.jpg", "../res/bg/34.jpg", "../res/bg/35.jpg"],
        re = [],
        le = "";

    function ce() {
        localStorage.setItem("userConfig", JSON.stringify(te))
    }

    function de() {
        const e = localStorage.getItem("userConfig");
        if (!e) {
            console.log("First boot - welcome to TETR.IO!");
            localStorage.getItem("feecofScore");
            return localStorage.getItem("feecofScore") < 3e5 ? te.video.graphics = "low" : localStorage.getItem("feecofScore") < 6e5 ? te.video.graphics = "medium" : localStorage.getItem("feecofScore") < 1e6 || !window.IS_ELECTRON ? te.video.graphics = "high" : te.video.graphics = "ultra", void console.log(`Autoselected graphics mode ${te.video.graphics}`)
        }
        Object.assign(te, JSON.parse(e))
    }
    let pe = -1;

    function ue() {
        switch (Object.keys(ne).forEach(e => {
                void 0 === te.controls.custom[e] && (te.controls.custom[e] = [])
            }), te.controls.style) {
            case "guideline":
                Object.assign(ae, ne);
                break;
            case "wasd":
                Object.assign(ae, oe);
                break;
            case "custom":
                Object.assign(ae, te.controls.custom);
                let e = !1;
                Object.keys(ae).forEach(t => {
                    ae[t].forEach(t => {
                        null !== t && t !== t.toUpperCase() && (e = !0)
                    })
                }), e && (te.controls.custom = ne, Object.assign(ae, te.controls.custom), x({
                    msg: "your keybinds were reset due to an update. please re-enter them!",
                    color: "#FF4200",
                    icon: "error",
                    timeout: 15e3
                }))
        }
        te.handling.arr = parseFloat(te.handling.arr), te.handling.das = parseFloat(te.handling.das), te.handling.sdf = parseFloat(te.handling.sdf), te.handling.dcd = parseFloat(te.handling.dcd || 0), ks.setVolume(te.volume.music), document.body.setAttribute("data-graphics", te.video.graphics), _n && te.video.background !== pe && (_n.alpha = te.video.background, pe = te.video.background), re = [], (te.video.background_url || "").split(",").forEach(e => {
            re.push(e.trim())
        }), fn && (fn.alpha = Math.min(1, 10 * te.video.background)), document.body.classList.toggle("noingamechat", !!te.video.nochat), document.body.classList.toggle("hideroomids", !!te.video.hideroomids), e("multi_join").type = te.video.hideroomids ? "password" : "text", document.body.classList.toggle("invert", !!te.video.invert), document.body.classList.toggle("nobg", !!te.video.nobg), document.body.classList.toggle("chatbg", !!te.video.chatbg), document.body.classList.toggle("replaytoolsnocollapse", !!te.video.replaytoolsnocollapse), document.body.classList.toggle("hidenetwork", !!te.video.hidenetwork), document.body.classList.toggle("hidefocuswarning", !1 === te.video.focuswarning), document.body.classList.toggle("ceriad_blocked", !!window.IS_ELECTRON && !!te.electron.adblock), e("sys_guide").classList.toggle("hidden", !1 === te.video.guide), e("room_opts_welcome").classList.toggle("hidden", !1 === te.video.guide), Hn(), An(), window.IS_ELECTRON && window.IPC.send("anglecompat", !!te.electron.anglecompat), ge()
    }

    function me(e) {
        return e.code ? e.code.toUpperCase() : !!e.key && (" " === e.key ? "SPACE" : 3 === e.location ? `NUMPAD${e.key.toUpperCase()}` : e.key.toUpperCase())
    }

    function ge() {
        fe(!1, !0);
        for (const e of document.getElementsByClassName("controls_keybinds_style")) e.classList.remove("pressed");
        e(`controls_keybinds_style_${te.controls.style}`).classList.add("pressed");
        for (const e of document.getElementsByClassName("controls_keybinds_list")) e.classList.add("hidden");
        e(`controls_keybinds_list_${te.controls.style}`).classList.remove("hidden");
        for (const e of document.getElementsByClassName("keybind_custom")) {
            const t = te.controls.custom[e.getAttribute("data-key")],
                s = t && t.length && t[parseInt(e.getAttribute("data-id"))] || "[NOT SET]";
            e.textContent = s, e.setAttribute("data-value", s)
        }
        for (const e of document.getElementsByClassName("keybind_custom")) {
            const t = e.getAttribute("data-value"),
                a = e.getAttribute("data-scope");
            "[NOT SET]" !== t && s(`.keybind_custom${"global" !== a ? `[data-scope="${a}"]` : ""}[data-value="${t.replace('"', "&quot;")}"]`).length >= 2 ? e.classList.add("keybind_warning") : "[NOT SET]" !== t && "global" !== a && s(`.keybind_custom[data-scope="global"][data-value="${t.replace('"', "&quot;")}"]`).length >= 1 ? e.classList.add("keybind_warning") : e.classList.remove("keybind_warning")
        }
        for (const e of document.getElementsByClassName("guide_keybind")) {
            const t = ae[e.getAttribute("data-key")].filter(e => !!e);
            e.textContent = t && t.length ? t.join(", ") : "[NOT SET]"
        }
        e("controls_sensitivity").value = te.controls.sensitivity || .5, e("controls_sensitivity_field").value = 100 - Math.round(100 * (te.controls.sensitivity || .5)), e("controls_vibration").value = te.controls.vibration || 1, e("controls_vibration_field").value = 0 == te.controls.vibration ? "OFF" : Math.round(100 * (te.controls.vibration || 1)), e("handling_arr").value = te.handling.arr, e("handling_arr_field").value = te.handling.arr, e("handling_arr_field_ms").value = `${Math.round(te.handling.arr * (1e3 / 60))}MS`, e("handling_das").value = te.handling.das, e("handling_das_field").value = te.handling.das, e("handling_das_field_ms").value = `${Math.round(te.handling.das * (1e3 / 60))}MS`, e("handling_dcd").value = te.handling.dcd || 0, e("handling_dcd_field").value = te.handling.dcd || 0, e("handling_dcd_field_ms").value = `${Math.round((te.handling.dcd || 0) * (1e3 / 60))}MS`, e("handling_sdf").value = te.handling.sdf, e("handling_sdf_field").value = 41 == te.handling.sdf ? "∞" : te.handling.sdf, e("handling_safelock").classList.toggle("checked", !1 !== te.handling.safelock), e("handling_cancel").classList.toggle("checked", !!te.handling.cancel), e("volume_music").value = te.volume.music, e("volume_music_field").value = 0 == te.volume.music ? "MUTE" : Math.round(100 * te.volume.music), e("volume_overlay_mus_value").style.backgroundImage = `linear-gradient(to top, #FFF 0%, #FFF ${Math.round(100 * te.volume.music)}%, #FFF2 ${Math.round(100 * te.volume.music)}%, #FFF2 100%)`, e("volume_sfx").value = te.volume.sfx, e("volume_sfx_field").value = 0 == te.volume.sfx ? "MUTE" : Math.round(100 * te.volume.sfx), e("volume_overlay_sfx_value").style.backgroundImage = `linear-gradient(to top, #FFF 0%, #FFF ${Math.round(100 * te.volume.sfx)}%, #FFF2 ${Math.round(100 * te.volume.sfx)}%, #FFF2 100%)`, e("volume_stereo").value = te.volume.stereo, e("volume_stereo_field").value = 0 == te.volume.stereo ? "OFF" : Math.round(100 * te.volume.stereo), e("volume_disable").classList.toggle("checked", !!te.volume.disable), e("volume_next").classList.toggle("checked", te.volume.next), e("volume_others").classList.toggle("checked", te.volume.others), e("volume_scrollable").classList.toggle("checked", !1 !== te.volume.scrollable), e("volume_attacks").classList.toggle("checked", !1 !== te.volume.attacks), e("volume_noreset").classList.toggle("checked", !1 !== te.volume.noreset), e("volume_oof").classList.toggle("checked", !1 !== te.volume.oof);
        for (const e of document.getElementsByClassName("video_graphics")) e.classList.remove("pressed");
        e(`video_graphics_${te.video.graphics}`).classList.add("pressed");
        for (const e of document.getElementsByClassName("video_caching")) e.classList.remove("pressed");
        e(`video_caching_${te.video.caching || "medium"}`).classList.add("pressed");
        for (const e of document.getElementsByClassName("video_actiontext")) e.classList.remove("pressed");
        e(`video_actiontext_${te.video.actiontext || "all"}`).classList.add("pressed");
        for (const e of document.getElementsByClassName("video_webgl")) e.classList.remove("pressed");
        e(`video_webgl_${te.video.webgl || "webgl2"}`).classList.add("pressed"), e("video_particles").value = te.video.particles || .6, e("video_particles_field").value = Math.round(100 * (te.video.particles || .6)), e("video_background").value = te.video.background, e("video_background_field").value = Math.round(100 * te.video.background), e("video_bounciness").value = te.video.bounciness, e("video_bounciness_field").value = Math.round(100 * te.video.bounciness), e("video_shakiness").value = te.video.shakiness, e("video_shakiness_field").value = Math.round(100 * te.video.shakiness), e("video_gridopacity").value = void 0 === te.video.gridopacity ? .1 : te.video.gridopacity, e("video_gridopacity_field").value = Math.round(100 * (void 0 === te.video.gridopacity ? .1 : te.video.gridopacity)), e("video_boardopacity").value = void 0 === te.video.boardopacity ? .85 : te.video.boardopacity, e("video_boardopacity_field").value = Math.round(100 * (void 0 === te.video.boardopacity ? .85 : te.video.boardopacity)), e("video_shadowopacity").value = void 0 === te.video.shadowopacity ? .15 : te.video.shadowopacity, e("video_shadowopacity_field").value = Math.round(100 * (void 0 === te.video.shadowopacity ? .15 : te.video.shadowopacity)), e("video_zoom").value = void 0 === te.video.zoom ? 1 : te.video.zoom, e("video_zoom_field").value = Math.round(100 * (void 0 === te.video.zoom ? 1 : te.video.zoom)), e("video_bloom").value = void 0 === te.video.bloom ? 1 : te.video.bloom, e("video_bloom_field").value = 0 == te.video.bloom ? "OFF" : Math.round(100 * (void 0 === te.video.bloom ? 1 : te.video.bloom)), e("video_chroma").value = void 0 === te.video.chroma ? .5 : te.video.chroma, e("video_chroma_field").value = 0 == te.video.chroma ? "OFF" : Math.round(100 * (void 0 === te.video.chroma ? .5 : te.video.chroma)), e("video_flashwave").value = void 0 === te.video.flashwave ? 1 : te.video.flashwave, e("video_flashwave_field").value = 0 == te.video.flashwave ? "OFF" : Math.round(100 * (void 0 === te.video.flashwave ? 1 : te.video.flashwave)), e("video_powersave").classList.toggle("checked", !!te.video.powersave), e("video_alwaystiny").classList.toggle("checked", !!te.video.alwaystiny), e("video_nosuperlobbyanim").classList.toggle("checked", !!te.video.nosuperlobbyanim), e("video_colorshadow").classList.toggle("checked", !!te.video.colorshadow), e("video_sidebyside").classList.toggle("checked", !!te.video.sidebyside), e("video_spin").classList.toggle("checked", !!te.video.spin), e("video_chatfilter").classList.toggle("checked", !1 !== te.video.chatfilter), e("video_nochat").classList.toggle("checked", !!te.video.nochat), e("video_hideroomids").classList.toggle("checked", !!te.video.hideroomids), e("video_emotes").classList.toggle("checked", !1 !== te.video.emotes), e("video_emotes_anim").classList.toggle("checked", !1 !== te.video.emotes_anim), e("video_invert").classList.toggle("checked", !!te.video.invert), e("video_nobg").classList.toggle("checked", !!te.video.nobg), e("video_chatbg").classList.toggle("checked", !!te.video.chatbg), e("video_replaytoolsnocollapse").classList.toggle("checked", !!te.video.replaytoolsnocollapse), e("video_kos").classList.toggle("checked", !1 !== te.video.kos), e("video_fire").classList.toggle("checked", !1 !== te.video.fire), e("video_focuswarning").classList.toggle("checked", !1 !== te.video.focuswarning), e("video_hidenetwork").classList.toggle("checked", !!te.video.hidenetwork), e("video_guide").classList.toggle("checked", !1 !== te.video.guide), e("video_desktopnotifications").classList.toggle("checked", !1 !== te.video.desktopnotifications), e("video_siren").classList.toggle("checked", !1 !== te.video.siren), e("video_lowrescounters").classList.toggle("checked", !!te.video.lowrescounters), e("video_lowres").classList.toggle("checked", !!te.video.lowres), e("config_background_usecustom").classList.toggle("checked", te.video.background_usecustom === se), e("config_background_url").value = te.video.background_url || "", e("diyusi_strategy_1").querySelector("h1").textContent = (ae.target1[0] || "*").toLowerCase(), e("diyusi_strategy_2").querySelector("h1").textContent = (ae.target2[0] || "*").toLowerCase(), e("diyusi_strategy_3").querySelector("h1").textContent = (ae.target3[0] || "*").toLowerCase(), e("diyusi_strategy_4").querySelector("h1").textContent = (ae.target4[0] || "*").toLowerCase(), e("pro_40l").classList.toggle("checked", !!te.gameoptions.pro_40l), e("pro_40l_alert").classList.toggle("checked", !!te.gameoptions.pro_40l_alert), e("pro_40l_retry").classList.toggle("checked", !!te.gameoptions.pro_40l_retry), e("stride_40l").classList.toggle("checked", !!te.gameoptions.stride_40l), e("slot_40l_counter1").textContent = te.gameoptions.slot_40l_counter1 || "---default---", e("slot_40l_counter2").textContent = te.gameoptions.slot_40l_counter2 || "---default---", e("slot_40l_counter3").textContent = te.gameoptions.slot_40l_counter3 || "---default---", e("slot_40l_counter4").textContent = te.gameoptions.slot_40l_counter4 || "---default---", e("slot_40l_counter5").textContent = te.gameoptions.slot_40l_counter5 || "---default---", e("pro_blitz").classList.toggle("checked", !!te.gameoptions.pro_blitz), e("pro_blitz_alert").classList.toggle("checked", !!te.gameoptions.pro_blitz_alert), e("pro_blitz_retry").classList.toggle("checked", !!te.gameoptions.pro_blitz_retry), e("stride_blitz").classList.toggle("checked", !!te.gameoptions.stride_blitz), e("slot_blitz_counter1").textContent = te.gameoptions.slot_blitz_counter1 || "---default---", e("slot_blitz_counter2").textContent = te.gameoptions.slot_blitz_counter2 || "---default---", e("slot_blitz_counter3").textContent = te.gameoptions.slot_blitz_counter3 || "---default---", e("slot_blitz_counter4").textContent = te.gameoptions.slot_blitz_counter4 || "---default---", e("slot_blitz_counter5").textContent = te.gameoptions.slot_blitz_counter5 || "---default---";
        for (const e of document.getElementsByClassName("electron_loginskip")) e.classList.remove("pressed");
        e(`electron_loginskip_${te.electron.loginskip || "always"}`).classList.add("pressed");
        for (const e of document.getElementsByClassName("electron_frameratelimit")) e.classList.remove("pressed");
        e(`electron_frameratelimit_${te.electron.frameratelimit || "4x"}`).classList.add("pressed"), e("config_electron_presence").classList.toggle("checked", !1 !== te.electron.presence), e("config_electron_taskbarflash").classList.toggle("checked", !1 !== te.electron.taskbarflash), e("config_electron_anglecompat").classList.toggle("checked", !!te.electron.anglecompat), e("config_electron_adblock").classList.toggle("checked", !!te.electron.adblock), ks.randomOstPools.random.forEach(e => {
            s(`.bgmtweak_option[data-id="${e}"]`).forEach(t => {
                t.classList.toggle("pressed", t.getAttribute("data-option") === ((te.volume.bgmtweak || {})[e] || "base"))
            })
        }), e("notifications_suppress").classList.toggle("checked", !1 !== te.notifications.suppress), e("notifications_forcesound").classList.toggle("checked", !!te.notifications.forcesound);
        for (const e of document.getElementsByClassName("notifications_online")) e.classList.remove("pressed");
        e(`notifications_online_${te.notifications.online}`).classList.add("pressed");
        for (const e of document.getElementsByClassName("notifications_offline")) e.classList.remove("pressed");
        e(`notifications_offline_${te.notifications.offline}`).classList.add("pressed");
        for (const e of document.getElementsByClassName("notifications_dm")) e.classList.remove("pressed");
        e(`notifications_dm_${te.notifications.dm}`).classList.add("pressed");
        for (const e of document.getElementsByClassName("notifications_dm_pending")) e.classList.remove("pressed");
        e(`notifications_dm_pending_${te.notifications.dm_pending}`).classList.add("pressed");
        for (const e of document.getElementsByClassName("notifications_invite")) e.classList.remove("pressed");
        e(`notifications_invite_${te.notifications.invite}`).classList.add("pressed");
        for (const e of document.getElementsByClassName("notifications_other")) e.classList.remove("pressed");
        e(`notifications_other_${te.notifications.other}`).classList.add("pressed")
    }
    de();
    let he = -1;

    function fe(e, t, s = !1) {
        if (!hn) return;
        const a = te.video.background_usecustom === se ? re : ie,
            n = a.join(",");
        if (!e && n === le) return;
        if (e && n === le && 1 === a.length) return;
        le = n;
        let o = Math.floor(Math.random() * a.length);
        for (; o === he && a.length > 1;) o = Math.floor(Math.random() * a.length);
        he = o, t ? hn.setBackground(a[o], !0) : (hn.setBackground(a[o]), s || sn.play("bgtransition"))
    }
    let _e = () => {};

    function be(t) {
        e("keybind_request").classList.remove("hidden"), _e = t, document.addEventListener("keydown", ye, !1), document.addEventListener("gpdown", ye, !1), setTimeout(() => {
            document.addEventListener("click", ve, !1)
        }, 0)
    }

    function ye(t) {
        document.removeEventListener("keydown", ye, !1), document.removeEventListener("gpdown", ye, !1), document.removeEventListener("click", ve, !1), e("keybind_request").classList.add("hidden"), _e(me(t) || t.detail.toUpperCase()), t.preventDefault()
    }

    function ve(t) {
        document.removeEventListener("keydown", ye, !1), document.removeEventListener("gpdown", ye, !1), document.removeEventListener("click", ve, !1), e("keybind_request").classList.add("hidden"), _e("X-NOKEY"), t.preventDefault()
    }
    const ke = (t, s) => {
            e(t).addEventListener("click", (function(e) {
                !1 !== s(e) && (ce(), ue())
            }))
        },
        we = (t, s) => {
            e(t).addEventListener("input", (function(e) {
                !1 !== s(e) && (ce(), ue())
            }))
        };
    U.ready((function(t) {
        let s = "";
        ks.randomOstPools.random.forEach(e => {
            s += `<div class="control_group flex-row bgmtweaking">\n\t\t\t\t\t<h1 class="bgmtweak_header rg_target_pri" data-id="${e}" data-hover="tap" data-hit="click">${ks.ost[e].artist} - ${ks.ost[e].name} (${ks.ost[e].genre})</h1>\n\t\t\t\t\t<div class="control_button flex-item bgmtweak_option rg_target_pri" data-id="${e}" data-option="ban" data-hover="tap" data-hit="click" title="Never play this song.">BAN</div>\n\t\t\t\t\t<div class="control_button flex-item bgmtweak_option rg_target_pri" data-id="${e}" data-option="minmin" data-hover="tap" data-hit="click" title="Play this song far less often.">--</div>\n\t\t\t\t\t<div class="control_button flex-item bgmtweak_option rg_target_pri" data-id="${e}" data-option="min" data-hover="tap" data-hit="click" title="Play this song less often.">-</div>\n\t\t\t\t\t<div class="control_button flex-item bgmtweak_option rg_target_pri" data-id="${e}" data-option="base" data-hover="tap" data-hit="click" title="Play this song a normal amount.">=</div>\n\t\t\t\t\t<div class="control_button flex-item bgmtweak_option rg_target_pri" data-id="${e}" data-option="plus" data-hover="tap" data-hit="click" title="Play this song more often.">+</div>\n\t\t\t\t\t<div class="control_button flex-item bgmtweak_option rg_target_pri" data-id="${e}" data-option="plusplus" data-hover="tap" data-hit="click" title="Play this song far more often.">++</div>\n\t\t\t\t</div>`
        }), e("bgmtweak").innerHTML = s, de(), ue(), "legacy" === te.video.webgl && x({
            msg: "using LEGACY WEBGL - this may slow down your game. if your device supports it, switch to WEBGL 2 in CONFIG!",
            color: "#FFC600",
            icon: "warning",
            timeout: 1e4
        }), setTimeout(() => {
            fe(!1, !1, !0)
        }, 300), setTimeout(() => {
            An()
        }, 2e3), ke("finish_guide_room", () => {
            te.video.guide = !1, e("room_opts_room").click()
        }), ke("finish_guide_sys", () => (e("sys_guide").classList.add("hiding"), e("room_opts_room").click(), setTimeout(() => {
            te.video.guide = !1, ce(), ue()
        }, 1e3), !1)), ke("controls_keybinds_style_guideline", () => {
            te.controls.style = "guideline"
        }), ke("controls_keybinds_style_wasd", () => {
            te.controls.style = "wasd"
        }), ke("controls_keybinds_style_custom", () => {
            te.controls.style = "custom"
        });
        for (const e of document.getElementsByClassName("keybind_custom")) e.addEventListener("click", (function(t) {
            be(t => {
                te.controls.custom[e.getAttribute("data-key")][parseInt(e.getAttribute("data-id"))] = "X-NOKEY" === t ? "" : t, ce(), ue()
            })
        }));
        we("controls_sensitivity", () => {
            te.controls.sensitivity = e("controls_sensitivity").value
        }), we("controls_vibration", () => {
            te.controls.vibration = e("controls_vibration").value
        });
        const a = () => {
            Ws && Ws.isConnected() && Ws.updateHandling()
        };
        we("handling_arr", () => {
            te.handling.arr = parseFloat(e("handling_arr").value), a()
        }), we("handling_das", () => {
            te.handling.das = parseFloat(e("handling_das").value), a()
        }), we("handling_dcd", () => {
            te.handling.dcd = parseFloat(e("handling_dcd").value), a()
        }), we("handling_sdf", () => {
            te.handling.sdf = parseFloat(e("handling_sdf").value), a()
        }), ke("handling_safelock", () => {
            te.handling.safelock = !e("handling_safelock").classList.contains("checked"), a()
        }), ke("handling_cancel", () => {
            te.handling.cancel = !e("handling_cancel").classList.contains("checked"), a()
        });
        for (const e of document.getElementsByClassName("stat_field")) e.addEventListener("click", (function(t) {
            const s = e.closest(".stat");
            Ge(s.querySelector(".stat_name").textContent, "enter a new value", s.querySelector(".stat_range").getAttribute("min"), s.querySelector(".stat_range").getAttribute("max"), s.querySelector(".stat_range").getAttribute("step") || "1", s.querySelector(".stat_range").value, e => {
                s.querySelector(".stat_range").value = e, s.querySelector(".stat_range").dispatchEvent(new Event("input", {
                    bubbles: !0,
                    cancelable: !0
                })), ce(), ue()
            })
        }));
        ke("handling_reset", () => {
            te.handling.arr = 2, te.handling.das = 10, te.handling.dcd = 1, te.handling.sdf = 6, a()
        }), e("handling_test").addEventListener("click", (function(e) {
            Ft.testControls()
        })), we("volume_music", () => {
            te.volume.music = e("volume_music").value
        }), we("volume_sfx", () => {
            te.volume.sfx = e("volume_sfx").value
        }), we("volume_stereo", () => {
            te.volume.stereo = e("volume_stereo").value
        }), ke("volume_next", () => {
            te.volume.next = !e("volume_next").classList.contains("checked")
        }), ke("volume_others", () => {
            te.volume.others = !e("volume_others").classList.contains("checked")
        }), ke("volume_scrollable", () => {
            te.volume.scrollable = !e("volume_scrollable").classList.contains("checked")
        }), ke("volume_attacks", () => {
            te.volume.attacks = !e("volume_attacks").classList.contains("checked")
        }), ke("volume_noreset", () => {
            te.volume.noreset = !e("volume_noreset").classList.contains("checked")
        }), ke("volume_oof", () => {
            te.volume.oof = !e("volume_oof").classList.contains("checked")
        }), ke("volume_disable", () => {
            te.volume.disable = !e("volume_disable").classList.contains("checked")
        });
        let n = null;
        window.addEventListener("wheel", (function(t) {
            if (!1 === te.volume.scrollable) return;
            if (!document.body.classList.contains("ingame") && !t.altKey) return;
            if (t.target.closest("#ingame_chat_container") && !t.altKey) return;
            if (t.target.closest("#zen_panel_content") && !t.altKey) return;
            const s = Math.sign(-t.deltaY);
            if (t.target.closest("#volume_overlay_sfx")) te.volume.sfx = Math.max(0, Math.min(1, te.volume.sfx + .05 * s));
            else if (t.target.closest("#volume_overlay_mus")) te.volume.music = Math.max(0, Math.min(1, te.volume.music + .05 * s));
            else {
                let e = te.volume.sfx * (.25 * s);
                e = 1 === s ? Math.max(.05, e) : Math.min(-.05, e), te.volume.sfx = Math.max(0, Math.min(1, parseFloat(te.volume.sfx) + e));
                let t = te.volume.music * (.25 * s);
                t = 1 === s ? Math.max(.05, t) : Math.min(-.05, t), te.volume.music = Math.max(0, Math.min(1, parseFloat(te.volume.music) + t))
            }
            e("volume_overlay").classList.remove("hidden"), e("volume_overlay").classList.remove("hiding"), setTimeout(() => {
                e("volume_overlay").classList.add("hiding")
            }, 100), n && clearTimeout(n), n = setTimeout(() => {
                e("volume_overlay").classList.add("hidden")
            }, 5100), ce(), ue(), t.altKey && t.preventDefault()
        }), {
            passive: !1
        }), ke("video_graphics_minimal", () => {
            te.video.graphics = "minimal", te.video.lowres = !0, te.video.sidebyside = !1, gn.unset(), x({
                msg: "changing GRAPHICS LEVEL requires a restart to fully go in effect. hit F5 on your keyboard to restart.",
                color: "#FFC600",
                icon: "warning"
            }), e("dirtyflag_gfx").innerHTML = `DIRTY (${te.video.graphics})`
        }), ke("video_graphics_low", () => {
            "minimal" === te.video.graphics && (te.video.lowres = !1, te.video.sidebyside = !0), te.video.graphics = "low", gn.unset(), x({
                msg: "changing GRAPHICS LEVEL requires a restart to fully go in effect. hit F5 on your keyboard to restart.",
                color: "#FFC600",
                icon: "warning"
            }), e("dirtyflag_gfx").innerHTML = `DIRTY (${te.video.graphics})`
        }), ke("video_graphics_medium", () => {
            "minimal" === te.video.graphics && (te.video.lowres = !1, te.video.sidebyside = !0), te.video.graphics = "medium", gn.unset(), x({
                msg: "changing GRAPHICS LEVEL requires a restart to fully go in effect. hit F5 on your keyboard to restart.",
                color: "#FFC600",
                icon: "warning"
            }), e("dirtyflag_gfx").innerHTML = `DIRTY (${te.video.graphics})`
        }), ke("video_graphics_high", () => {
            "minimal" === te.video.graphics && (te.video.lowres = !1, te.video.sidebyside = !0), te.video.graphics = "high", gn.set(), x({
                msg: "changing GRAPHICS LEVEL requires a restart to fully go in effect. hit F5 on your keyboard to restart.",
                color: "#FFC600",
                icon: "warning"
            }), e("dirtyflag_gfx").innerHTML = `DIRTY (${te.video.graphics})`
        }), ke("video_graphics_ultra", () => {
            "minimal" === te.video.graphics && (te.video.lowres = !1, te.video.sidebyside = !0), te.video.graphics = "ultra", gn.set(), x({
                msg: "changing GRAPHICS LEVEL requires a restart to fully go in effect. hit F5 on your keyboard to restart.",
                color: "#FFC600",
                icon: "warning"
            }), window.IS_ELECTRON || x({
                msg: "you are not using TETR.IO DESKTOP - ULTRA graphics may be less performant.",
                color: "#FFC600",
                icon: "warning"
            }), e("dirtyflag_gfx").innerHTML = `DIRTY (${te.video.graphics})`
        }), ke("video_caching_low", () => {
            te.video.caching = "low", x({
                msg: "changing CACHING LEVEL requires a restart to fully go in effect. hit F5 on your keyboard to restart.",
                color: "#FFC600",
                icon: "warning"
            }), e("dirtyflag_gfx").innerHTML = `DIRTY (${te.video.graphics})`
        }), ke("video_caching_medium", () => {
            te.video.caching = "medium", x({
                msg: "changing CACHING LEVEL requires a restart to fully go in effect. hit F5 on your keyboard to restart.",
                color: "#FFC600",
                icon: "warning"
            }), e("dirtyflag_gfx").innerHTML = `DIRTY (${te.video.graphics})`
        }), ke("video_caching_high", () => {
            te.video.caching = "high", x({
                msg: "changing CACHING LEVEL requires a restart to fully go in effect. hit F5 on your keyboard to restart.",
                color: "#FFC600",
                icon: "warning"
            }), e("dirtyflag_gfx").innerHTML = `DIRTY (${te.video.graphics})`
        }), ke("video_webgl_legacy", () => (D({
            title: "USE LEGACY WEBGL?",
            msg: 'LEGACY WEBGL is the slowest WEBGL mode and may introduce bugs. only use it if the other modes do not work for you (for example, you see graphical glitches or flickering while playing)!</p><p class="modal_also">when reporting a bug, please mention LEGACY WEBGL is enabled.',
            buttons: [{
                label: "CANCEL",
                classes: [],
                callback: e => {
                    e()
                }
            }, {
                label: "USE LEGACY WEBGL",
                classes: ["sec"],
                callback: t => {
                    te.video.webgl = "legacy", ce(), ue(), x({
                        msg: "changing WEBGL MODE requires a restart to fully go in effect. hit F5 on your keyboard to restart.",
                        color: "#FFC600",
                        icon: "warning"
                    }), e("dirtyflag_gl").innerHTML = `DIRTY (${te.video.webgl})`, t()
                }
            }]
        }), !1)), ke("video_webgl_webgl1", () => {
            te.video.webgl = "webgl1", x({
                msg: "changing WEBGL MODE requires a restart to fully go in effect. hit F5 on your keyboard to restart.",
                color: "#FFC600",
                icon: "warning"
            }), e("dirtyflag_gl").innerHTML = `DIRTY (${te.video.webgl})`
        }), ke("video_webgl_webgl2", () => {
            te.video.webgl = "webgl2", x({
                msg: "changing WEBGL MODE requires a restart to fully go in effect. hit F5 on your keyboard to restart.",
                color: "#FFC600",
                icon: "warning"
            }), e("dirtyflag_gl").innerHTML = `DIRTY (${te.video.webgl})`
        }), ke("video_actiontext_off", () => {
            te.video.actiontext = "off"
        }), ke("video_actiontext_some", () => {
            te.video.actiontext = "some"
        }), ke("video_actiontext_all", () => {
            te.video.actiontext = "all"
        }), we("video_particles", () => {
            te.video.particles = e("video_particles").value
        }), we("video_background", () => {
            te.video.background = e("video_background").value
        }), we("video_bounciness", () => {
            te.video.bounciness = e("video_bounciness").value
        }), we("video_shakiness", () => {
            te.video.shakiness = e("video_shakiness").value
        }), we("video_gridopacity", () => {
            te.video.gridopacity = e("video_gridopacity").value
        }), we("video_boardopacity", () => {
            te.video.boardopacity = e("video_boardopacity").value
        }), we("video_shadowopacity", () => {
            te.video.shadowopacity = e("video_shadowopacity").value
        }), we("video_zoom", () => {
            te.video.zoom = e("video_zoom").value
        }), we("video_bloom", () => {
            te.video.bloom = e("video_bloom").value
        }), we("video_chroma", () => {
            te.video.chroma = e("video_chroma").value
        }), we("video_flashwave", () => {
            te.video.flashwave = e("video_flashwave").value
        }), ke("video_powersave", () => {
            te.video.powersave = !e("video_powersave").classList.contains("checked"), x({
                msg: "changing POWER SAVE requires a restart to go in effect. hit F5 on your keyboard to restart.",
                color: "#FFC600",
                icon: "warning"
            }), e("dirtyflag_gfx").innerHTML = `DIRTY (${te.video.graphics})`
        }), ke("video_lowres", () => {
            te.video.lowres = !e("video_lowres").classList.contains("checked"), x({
                msg: "changing LOW RESOLUTION MODE requires a restart to go in effect. hit F5 on your keyboard to restart.",
                color: "#FFC600",
                icon: "warning"
            }), e("dirtyflag_gfx").innerHTML = `DIRTY (${te.video.graphics})`
        }), ke("video_guide", () => {
            te.video.guide = !e("video_guide").classList.contains("checked"), te.video.guide ? e("room_opts_welcome").click() : e("room_opts_room").click()
        }), ke("video_desktopnotifications", () => {
            te.video.desktopnotifications = !e("video_desktopnotifications").classList.contains("checked"), te.video.desktopnotifications && Ot(!0)
        }), ke("video_lowrescounters", () => {
            te.video.lowrescounters = !e("video_lowrescounters").classList.contains("checked")
        }), ke("video_alwaystiny", () => {
            te.video.alwaystiny = !e("video_alwaystiny").classList.contains("checked")
        }), ke("video_nosuperlobbyanim", () => {
            te.video.nosuperlobbyanim = !e("video_nosuperlobbyanim").classList.contains("checked")
        }), ke("video_colorshadow", () => {
            te.video.colorshadow = !e("video_colorshadow").classList.contains("checked")
        }), ke("video_sidebyside", () => {
            te.video.sidebyside = !e("video_sidebyside").classList.contains("checked")
        }), ke("video_spin", () => {
            te.video.spin = !e("video_spin").classList.contains("checked")
        }), ke("video_chatfilter", () => {
            te.video.chatfilter = !e("video_chatfilter").classList.contains("checked")
        }), ke("video_nochat", () => {
            te.video.nochat = !e("video_nochat").classList.contains("checked")
        }), ke("video_hideroomids", () => {
            te.video.hideroomids = !e("video_hideroomids").classList.contains("checked")
        }), ke("video_emotes", () => {
            te.video.emotes = !e("video_emotes").classList.contains("checked")
        }), ke("video_emotes_anim", () => {
            te.video.emotes_anim = !e("video_emotes_anim").classList.contains("checked")
        }), ke("video_invert", () => {
            te.video.invert = !e("video_invert").classList.contains("checked")
        }), ke("video_nobg", () => {
            te.video.nobg = !e("video_nobg").classList.contains("checked")
        }), ke("video_chatbg", () => {
            te.video.chatbg = !e("video_chatbg").classList.contains("checked")
        }), ke("video_replaytoolsnocollapse", () => {
            te.video.replaytoolsnocollapse = !e("video_replaytoolsnocollapse").classList.contains("checked")
        }), ke("video_kos", () => {
            te.video.kos = !e("video_kos").classList.contains("checked")
        }), ke("video_fire", () => {
            te.video.fire = !e("video_fire").classList.contains("checked")
        }), ke("video_focuswarning", () => {
            te.video.focuswarning = !e("video_focuswarning").classList.contains("checked")
        }), ke("video_hidenetwork", () => {
            te.video.hidenetwork = !e("video_hidenetwork").classList.contains("checked")
        }), ke("video_siren", () => {
            te.video.siren = !e("video_siren").classList.contains("checked")
        }), e("config_background_url").addEventListener("keyup", (function(t) {
            te.video.background_url = e("config_background_url").value, ce(), ue()
        })), ke("config_background_usecustom", () => {
            te.video.background_usecustom = e("config_background_usecustom").classList.contains("checked") ? null : se
        }), ke("pro_40l", () => {
            te.gameoptions.pro_40l = !e("pro_40l").classList.contains("checked")
        }), ke("pro_40l_alert", () => {
            te.gameoptions.pro_40l_alert = !e("pro_40l_alert").classList.contains("checked")
        }), ke("pro_40l_retry", () => {
            te.gameoptions.pro_40l_retry = !e("pro_40l_retry").classList.contains("checked")
        }), ke("stride_40l", () => {
            te.gameoptions.stride_40l = !e("stride_40l").classList.contains("checked")
        }), we("slot_40l_counter1", () => {
            te.gameoptions.slot_40l_counter1 = "---default---" === e("slot_40l_counter1").innerHTML ? void 0 : e("slot_40l_counter1").innerHTML
        }), we("slot_40l_counter2", () => {
            te.gameoptions.slot_40l_counter2 = "---default---" === e("slot_40l_counter2").innerHTML ? void 0 : e("slot_40l_counter2").innerHTML
        }), we("slot_40l_counter3", () => {
            te.gameoptions.slot_40l_counter3 = "---default---" === e("slot_40l_counter3").innerHTML ? void 0 : e("slot_40l_counter3").innerHTML
        }), we("slot_40l_counter4", () => {
            te.gameoptions.slot_40l_counter4 = "---default---" === e("slot_40l_counter4").innerHTML ? void 0 : e("slot_40l_counter4").innerHTML
        }), we("slot_40l_counter5", () => {
            te.gameoptions.slot_40l_counter5 = "---default---" === e("slot_40l_counter5").innerHTML ? void 0 : e("slot_40l_counter5").innerHTML
        }), ke("pro_blitz", () => {
            te.gameoptions.pro_blitz = !e("pro_blitz").classList.contains("checked")
        }), ke("pro_blitz_alert", () => {
            te.gameoptions.pro_blitz_alert = !e("pro_blitz_alert").classList.contains("checked")
        }), ke("pro_blitz_retry", () => {
            te.gameoptions.pro_blitz_retry = !e("pro_blitz_retry").classList.contains("checked")
        }), ke("stride_blitz", () => {
            te.gameoptions.stride_blitz = !e("stride_blitz").classList.contains("checked")
        }), we("slot_blitz_counter1", () => {
            te.gameoptions.slot_blitz_counter1 = "---default---" === e("slot_blitz_counter1").innerHTML ? void 0 : e("slot_blitz_counter1").innerHTML
        }), we("slot_blitz_counter2", () => {
            te.gameoptions.slot_blitz_counter2 = "---default---" === e("slot_blitz_counter2").innerHTML ? void 0 : e("slot_blitz_counter2").innerHTML
        }), we("slot_blitz_counter3", () => {
            te.gameoptions.slot_blitz_counter3 = "---default---" === e("slot_blitz_counter3").innerHTML ? void 0 : e("slot_blitz_counter3").innerHTML
        }), we("slot_blitz_counter4", () => {
            te.gameoptions.slot_blitz_counter4 = "---default---" === e("slot_blitz_counter4").innerHTML ? void 0 : e("slot_blitz_counter4").innerHTML
        }), we("slot_blitz_counter5", () => {
            te.gameoptions.slot_blitz_counter5 = "---default---" === e("slot_blitz_counter5").innerHTML ? void 0 : e("slot_blitz_counter5").innerHTML
        }), ke("electron_loginskip_never", () => {
            te.electron.loginskip = "never"
        }), ke("electron_loginskip_quickjoin", () => {
            te.electron.loginskip = "quickjoin"
        }), ke("electron_loginskip_always", () => {
            te.electron.loginskip = "always"
        }), ke("electron_frameratelimit_1x", () => {
            te.electron.frameratelimit = "1x"
        }), ke("electron_frameratelimit_2x", () => {
            te.electron.frameratelimit = "2x"
        }), ke("electron_frameratelimit_4x", () => {
            te.electron.frameratelimit = "4x"
        }), ke("electron_frameratelimit_off", () => {
            te.electron.frameratelimit = "off"
        }), ke("config_electron_presence", () => {
            te.electron.presence = !e("config_electron_presence").classList.contains("checked")
        }), ke("config_electron_taskbarflash", () => {
            te.electron.taskbarflash = !e("config_electron_taskbarflash").classList.contains("checked")
        }), ke("config_electron_anglecompat", () => {
            te.electron.anglecompat = !e("config_electron_anglecompat").classList.contains("checked"), x({
                msg: "changing STREAMER COMPATIBILITY MODE requires a full restart to go in effect. close TETR.IO, then reopen it.",
                color: "#FFC600",
                icon: "warning"
            }), e("dirtyflag_client").innerHTML = "DIRTY"
        }), ke("config_electron_vsync", () => {
            window.IPC.send("vsync", !e("config_electron_vsync").classList.contains("checked")), x({
                msg: "changing HARD VSYNC MODE requires a full restart to go in effect. close TETR.IO, then reopen it.",
                color: "#FFC600",
                icon: "warning"
            }), e("dirtyflag_client").innerHTML = "DIRTY", e("config_electron_vsync").classList.toggle("checked"), e("config_electron_frameratelimit").classList.toggle("disable-cfg")
        }), ke("config_electron_adblock", () => {
            te.electron.adblock = !e("config_electron_adblock").classList.contains("checked"), te.electron.adblock && (ct("one moment…"), k.get("/api/tetra/specialthanks", {}, !0).then(e => {
                dt();
                let t = "";
                e.supporters.forEach(e => {
                    t += `<a class="adblock_st ${e.username ? `tetra_pop" data-hover="tap" data-hit="click" data-username="${e.username}"` : 'noclick"'}>${e.flip ? e.username.toUpperCase() : e.name}</a>, `
                }), D({
                    title: "3RD PARTY ADS DISABLED",
                    msg: `this toggle made possible by these generous supporters:</p><p>${t.slice(0, -2)}</p><p>please, consider supporting the sole developer behind TETR.IO!`,
                    classes: ["supporter_modal"],
                    buttons: [{
                        label: "NO…",
                        classes: [],
                        callback: e => {
                            try {
                                _paq.push(["trackEvent", "Advertising", "Block", "Config toggle (no conversion)"])
                            } catch (e) {}
                            e()
                        }
                    }, {
                        label: "SUPPORT!",
                        classes: ["pri"],
                        callback: e => {
                            try {
                                _paq.push(["trackEvent", "Advertising", "Block", "Config toggle (converted)"])
                            } catch (e) {}
                            e(), Ke()
                        }
                    }]
                })
            }, e => {
                try {
                    _paq.push(["trackEvent", "Advertising", "Block", "Config toggle (could not load dialog)"])
                } catch (e) {}
                dt()
            }))
        });
        for (const e of document.getElementsByClassName("bgmtweak_option")) e.addEventListener("click", (function(t) {
            void 0 === te.volume.bgmtweak && (te.volume.bgmtweak = {}), te.volume.bgmtweak[e.getAttribute("data-id")] = e.getAttribute("data-option"), ce(), ue()
        }));
        for (const e of document.getElementsByClassName("bgmtweak_header")) e.addEventListener("click", (function(t) {
            ks.playSmoothOrRandom(e.getAttribute("data-id"))
        }));
        ke("notifications_suppress", () => {
            te.notifications.suppress = !e("notifications_suppress").classList.contains("checked")
        }), ke("notifications_forcesound", () => {
            te.notifications.forcesound = !e("notifications_forcesound").classList.contains("checked")
        }), ke("notifications_online_off", () => {
            te.notifications.online = "off"
        }), ke("notifications_online_ingame", () => {
            te.notifications.online = "ingame"
        }), ke("notifications_online_both", () => {
            te.notifications.online = "both"
        }), ke("notifications_offline_off", () => {
            te.notifications.offline = "off"
        }), ke("notifications_offline_ingame", () => {
            te.notifications.offline = "ingame"
        }), ke("notifications_offline_both", () => {
            te.notifications.offline = "both"
        }), ke("notifications_dm_off", () => {
            te.notifications.dm = "off"
        }), ke("notifications_dm_ingame", () => {
            te.notifications.dm = "ingame"
        }), ke("notifications_dm_both", () => {
            te.notifications.dm = "both"
        }), ke("notifications_dm_pending_off", () => {
            te.notifications.dm_pending = "off"
        }), ke("notifications_dm_pending_ingame", () => {
            te.notifications.dm_pending = "ingame"
        }), ke("notifications_dm_pending_both", () => {
            te.notifications.dm_pending = "both"
        }), ke("notifications_invite_ingame", () => {
            te.notifications.invite = "ingame"
        }), ke("notifications_invite_both", () => {
            te.notifications.invite = "both"
        }), ke("notifications_other_ingame", () => {
            te.notifications.other = "ingame"
        }), ke("notifications_other_both", () => {
            te.notifications.other = "both"
        })
    }));
    const Le = (() => {
            let e = null,
                t = [];
            return g(() => {
                !async function() {
                    let s = "No-GPU";
                    const a = document.createElement("canvas").getContext("webgl");
                    if (a) {
                        const e = a.getExtension("WEBGL_debug_renderer_info");
                        e && (s = a.getParameter(e.UNMASKED_RENDERER_WEBGL))
                    }
                    let n = navigator.hardwareConcurrency || 0,
                        o = navigator.deviceMemory || 0,
                        i = navigator.userAgent.replace("//", "--") || "No-UA";
                    const r = await FingerprintJS.load();
                    let l = (await r.get()).visitorId,
                        c = localStorage.getItem("debugIdentity");
                    c || (c = `${Date.now()}-${Math.floor(1e9 * Math.random())}`.replace("//", "--"), localStorage.setItem("debugIdentity", c)), c = c.replace("//", "--");
                    let d = `${window.screen.availWidth}x${window.screen.availHeight}@${window.devicePixelRatio || 1}`,
                        p = {};
                    switch (te.controls.style) {
                        case "guideline":
                            Object.assign(p, ne);
                            break;
                        case "wasd":
                            Object.assign(p, oe);
                            break;
                        case "custom":
                            Object.assign(p, te.controls.custom)
                    }
                    let u = `${p.moveLeft[0] || "?"}, ${p.moveRight[0] || "?"}, ${p.softDrop[0] || "?"}, ${p.hardDrop[0] || "?"}, ${p.rotateCCW[0] || "?"}, ${p.rotateCW[0] || "?"}, ${p.rotate180[0] || "?"}, ${p.hold[0] || "?"}`.replace("//", "--"),
                        m = `${te.handling.arr}F ARR, ${te.handling.das}F DAS, ${te.handling.sdf}X SDF`,
                        g = window.BASEBOARD || "N/A";
                    e = "xHW-" + btoa(`${i} // ${n}-core // ${o}-GB // ${s} // ${l} // ${c} // ${d} // ${u} // ${m} // ${g}`), t.forEach(t => {
                        t(e)
                    })
                }()
            }), {
                get: () => e,
                getWhenReady: s => {
                    e ? s(e) : t.push(s)
                }
            }
        })(),
        Ee = "\n---default---,DEFAULT,use the default option;\n---empty---,EMPTY,leave this slot empty;\nscore,SCORE,display the score in this slot;\nspp,SCORE (per piece),display the score and score per piece in this slot;\nstopwatch,STOPWATCH,display the time passed in this slot;\nlines,LINES,display the amount of cleared lines in this slot;\npieces,PIECES,display the amount of placed pieces and speed in this slot;\nkeys,INPUTS,display the amount of buttonpresses in this slot;\nfinesse,FINESSE,display your finesse in this slot;\nfinesse_l,FINESSE (SMALLER),display your finesse in this slot (for use on the left-hand side);\nhold,HOLD,display the amount of held pieces in this slot;\nallclears,ALL CLEARS,display the amount of ALL CLEARS in this slot\n".replace(/\n/g, ""),
        xe = "\n---default---,DEFAULT,use the default option;\n---empty---,EMPTY,leave this slot empty;\nscore,SCORE,display the score in this slot;\nspp,SCORE (per piece),display the score and score per piece in this slot;\ntimer,TIMER,display the time remaining in this slot;\nlines,LINES,display the amount of cleared lines in this slot;\nlevel,LEVEL,display the current level in this slot;\npieces,PIECES,display the amount of placed pieces and speed in this slot;\nkeys,INPUTS,display the amount of buttonpresses in this slot;\nfinesse,FINESSE,display your finesse in this slot;\nfinesse_l,FINESSE (SMALLER),display your finesse in this slot (for use on the left-hand side);\nhold,HOLD,display the amount of held pieces in this slot;\nallclears,ALL CLEARS,display the amount of ALL CLEARS in this slot\n".replace(/\n/g, "");
    U.ready((function(t) {
        e("slot_40l_counter1").setAttribute("data-items", Ee), e("slot_40l_counter2").setAttribute("data-items", Ee), e("slot_40l_counter3").setAttribute("data-items", Ee), e("slot_40l_counter4").setAttribute("data-items", Ee), e("slot_40l_counter5").setAttribute("data-items", Ee), e("slot_blitz_counter1").setAttribute("data-items", xe), e("slot_blitz_counter2").setAttribute("data-items", xe), e("slot_blitz_counter3").setAttribute("data-items", xe), e("slot_blitz_counter4").setAttribute("data-items", xe), e("slot_blitz_counter5").setAttribute("data-items", xe)
    }));
    const Te = "\n---empty---,EMPTY,leave this slot empty;\nscore,SCORE,display the score in this slot;\nspp,SCORE (per piece),display the score and score per piece in this slot;\nstopwatch,STOPWATCH,display the time passed in this slot;\ntimer,TIMER,display the time remaining in this slot (for TIMED objective);\nlines,LINES,display the amount of cleared lines in this slot;\nlevel,LEVEL,display the current level in this slot;\npieces,PIECES,display the amount of placed pieces and speed in this slot;\nkeys,INPUTS,display the amount of buttonpresses in this slot;\nhold,HOLD,display the amount of held pieces in this slot;\nallclears,ALL CLEARS,display the amount of ALL CLEARS in this slot\n".replace(/\n/g, ""),
        Ie = [{
            id: "room_content_room",
            classes: "hidden",
            blocks: [{
                title: "GENERAL",
                options: [{
                    id: "meta.name",
                    label: "room name",
                    title: "Name this room will display in the listing as",
                    type: "text",
                    classes: "imp",
                    attributes: 'maxlength="64" minlength="1"'
                }, {
                    id: "meta.userlimit",
                    label: "player limit",
                    title: "Maximum players in this room. 0 = no limit. Does not apply retroactively.",
                    type: "number",
                    classes: "",
                    attributes: 'max="999" min="0"'
                }, {
                    id: "meta.allowAnonymous",
                    label: "allow anonymous users to join",
                    title: "Whether to allow anonymous users to enter this room. Does not apply retroactively.",
                    type: "checkbox",
                    classes: "",
                    attributes: ""
                }, {
                    id: "meta.bgm",
                    label: "music",
                    title: "Background song to play. If random, not everyone will hear the same song.",
                    type: "music",
                    classes: "imp",
                    attributes: ""
                }]
            }]
        }, {
            id: "room_content_match",
            classes: "hidden",
            blocks: [{
                title: "GENERAL",
                options: [{
                    id: "meta.match.type",
                    label: "game mode",
                    title: "Game mode.",
                    type: "spinner",
                    classes: "super-imp",
                    attributes: 'data-items="versus,VERSUS,a battle royale! who can survive the longest?"'
                }, {
                    id: "meta.match.ft",
                    label: "first to (FT)",
                    title: "Amount of rounds one must win to win the game.",
                    type: "number",
                    classes: "imp",
                    attributes: 'max="1000" min="1"'
                }, {
                    id: "meta.match.wb",
                    label: "win by (WB)",
                    title: "Amount of points one must have over the second place to secure the win.",
                    type: "number",
                    classes: "imp",
                    attributes: 'max="1000" min="1"'
                }, {
                    id: "game.options.stock",
                    label: "stock",
                    title: "Amount of extra lives one has.",
                    type: "number",
                    classes: "",
                    attributes: 'max="10" min="0"'
                }]
            }]
        }, {
            id: "room_content_game",
            classes: "hidden",
            blocks: [{
                title: "EXPERIMENTAL",
                options: [{
                    id: "game.options.passthrough",
                    label: "enable passthrough",
                    title: "If disabled, attacks can be canceled while in transit or during latency. Experimental, may be removed or become standard.",
                    type: "checkbox",
                    classes: "imp",
                    attributes: ""
                }]
            }, {
                title: "GENERAL",
                options: [{
                    id: "game.options.bagtype",
                    label: "random bag type",
                    title: "The type of system used to generate random pieces.",
                    type: "spinner",
                    classes: "imp",
                    attributes: 'data-items="7-bag,7-BAG,keep shuffling a bag of the 7 tetrominoes;14-bag,14-BAG,keep shuffling a bag of 2x the 7 tetrominoes;classic,CLASSIC,random with repetition protection;pairs,PAIRS,alternate between 2 tetrominoes;total mayhem,TOTAL MAYHEM,completely random generation"'
                }, {
                    id: "game.options.spinbonuses",
                    label: "allowed spins",
                    title: "The type of pieces allowed to do spins.",
                    type: "spinner",
                    classes: "imp",
                    attributes: 'data-items="T-spins,T-SPINS,receive bonuses for spinning T-pieces;all,ALL-SPIN,receive bonuses for spinning all pieces;stupid,STUPID,everything is a spin because YEAH WHY NOT (O-spin SUPPORTED!);none,NONE,receive no spin bonuses"'
                }, {
                    id: "game.options.allow180",
                    label: "allow 180 spins",
                    title: "Whether to allow the 180 rotation key to be used.",
                    type: "checkbox",
                    classes: "imp",
                    attributes: ""
                }, {
                    id: "game.options.kickset",
                    label: "kick table",
                    title: "The type of kicks that pieces can do.",
                    type: "spinner",
                    classes: "",
                    attributes: 'data-items="SRS+,SRS+,the default natural rotation system with symmetric I-piece rotation;SRS,SRS,the standard natural rotation system;SRS-X,SRS-X,SRS with more powerful 180 spins;TETRA-X,TETRA-X,novel rotation system by DR OCELOT;NRS,NRS,the classic rotation system;ARS,ARS,rotation system used in arcade games;ASC,ASC,permissive rotation system by WINTERNEBS;none,NONE,no kicks possible"'
                }, {
                    id: "game.options.allow_harddrop",
                    label: "use hard drop",
                    title: "Whether to allow use of the Hard Drop button.",
                    type: "checkbox",
                    classes: "",
                    attributes: ""
                }, {
                    id: "game.options.display_next",
                    label: "use NEXT queue",
                    title: "Whether to show the NEXT queue.",
                    type: "checkbox",
                    classes: "",
                    attributes: ""
                }, {
                    id: "game.options.display_hold",
                    label: "use HOLD queue",
                    title: "Whether to use the HOLD queue.",
                    type: "checkbox",
                    classes: "",
                    attributes: ""
                }, {
                    id: "game.options.nextcount",
                    label: "next pieces",
                    title: "Amount of pieces shown in the NEXT queue, if said queue is enabled.",
                    type: "number",
                    classes: "",
                    attributes: 'min="1" max="5"'
                }, {
                    id: "game.options.display_shadow",
                    label: "show shadow piece",
                    title: "Whether to show the shadow piece.",
                    type: "checkbox",
                    classes: "",
                    attributes: ""
                }, {
                    id: "game.options.are",
                    label: "ARE",
                    title: "Amount of time in frames in between a piece being placed and the next one spawning.",
                    type: "number",
                    classes: "",
                    attributes: 'min="0" max="300"'
                }, {
                    id: "game.options.lineclear_are",
                    label: "line clear ARE",
                    title: "Amount of time in frames in between a piece being placed and the next one spawning, if a line was cleared.",
                    type: "number",
                    classes: "",
                    attributes: 'min="0" max="300"'
                }, {
                    id: "game.options.room_handling",
                    label: "enforce below handling settings",
                    title: "Whether to enforce the handling settings below.",
                    type: "checkbox",
                    classes: "",
                    attributes: ""
                }, {
                    id: "game.options.room_handling_arr",
                    label: "enforced ARR",
                    title: 'Auto Repeat Rate, enforced if "enforce below handling settings" is enabled.',
                    type: "number",
                    classes: "",
                    attributes: 'min="0" max="5" step="0.1"'
                }, {
                    id: "game.options.room_handling_das",
                    label: "enforced DAS",
                    title: 'Delayed Auto Shift, enforced if "enforce below handling settings" is enabled.',
                    type: "number",
                    classes: "",
                    attributes: 'min="1" max="20" step="0.1"'
                }, {
                    id: "game.options.room_handling_sdf",
                    label: "enforced SDF",
                    title: 'Soft Drop Factor, enforced if "enforce below handling settings" is enabled. Use 21 for MAX.',
                    type: "number",
                    classes: "",
                    attributes: 'min="5" max="21"'
                }]
            }, {
                title: "GRAVITY & MARGIN TIME",
                options: [{
                    id: "game.options.g",
                    label: "gravity",
                    title: "Starting gravity (how fast blocks drop). Higher is faster.",
                    type: "number",
                    classes: "",
                    attributes: 'max="20" min="0" step="0.01"'
                }, {
                    id: "game.options.gincrease",
                    label: "gravity increase",
                    title: "The amount of gravity increase per second.",
                    type: "number",
                    classes: "",
                    attributes: 'max="1" min="0" step="0.0001"'
                }, {
                    id: "game.options.gmargin",
                    label: "gravity margin time",
                    title: "Amount of time in frames until the gravity starts to increase.",
                    type: "number",
                    classes: "",
                    attributes: 'max="100000" min="0" step="1"'
                }, {
                    id: "game.options.garbagemultiplier",
                    label: "garbage multiplier",
                    title: "Starting garbage multiplier. 1 means normal amount of garbage, 2 means double.",
                    type: "number",
                    classes: "",
                    attributes: 'max="100" min="0" step="0.1"'
                }, {
                    id: "game.options.garbagemargin",
                    label: "garbage margin time",
                    title: "Amount of time in frames until the garbage multiplier starts to increase.",
                    type: "number",
                    classes: "",
                    attributes: 'max="100000" min="0" step="1"'
                }, {
                    id: "game.options.garbageincrease",
                    label: "garbage increase",
                    title: "The amount of garbage multiplier increase per second.",
                    type: "number",
                    classes: "",
                    attributes: 'max="1" min="0" step="0.0001"'
                }, {
                    id: "game.options.locktime",
                    label: "lock delay",
                    title: "If not using master levels, the amount of frames until a piece locks down.",
                    type: "number",
                    classes: "",
                    attributes: 'min="1"'
                }, {
                    id: "game.options.garbagespeed",
                    label: "garbage travel speed",
                    title: "The time it takes in frames for garbage to travel.",
                    type: "number",
                    classes: "",
                    attributes: 'min="1" max="600"'
                }, {
                    id: "game.options.garbagecap",
                    label: "garbage cap",
                    title: "Amount of garbage that may enter the screen at once.",
                    type: "number",
                    classes: "",
                    attributes: 'min="1" max="40"'
                }, {
                    id: "game.options.garbagecapincrease",
                    label: "garbage cap increase",
                    title: "The amount of garbage cap increase per second.",
                    type: "number",
                    classes: "",
                    attributes: 'max="1" min="0" step="0.0001"'
                }, {
                    id: "game.options.garbagecapmax",
                    label: "garbage cap max",
                    title: "Maximum amount the garbage cap may reach.",
                    type: "number",
                    classes: "",
                    attributes: 'min="1" max="40"'
                }, {
                    id: "game.options.manual_allowed",
                    label: "allow manual targeting",
                    title: "Whether to allow users to click boards to manually target them.",
                    type: "checkbox",
                    classes: "",
                    attributes: ""
                }, {
                    id: "game.options.b2bchaining",
                    label: "enable back-to-back chaining",
                    title: "Whether to make long Back-to-Back chains become more powerful.",
                    type: "checkbox",
                    classes: "",
                    attributes: ""
                }, {
                    id: "game.options.clutch",
                    label: "enable clutch clears",
                    title: "Whether to allow out-of-bound placements when they clear a line.",
                    type: "checkbox",
                    classes: "",
                    attributes: ""
                }]
            }]
        }],
        Se = [{
            id: "custom_content_game",
            classes: "",
            blocks: [{
                title: "GENERAL",
                options: [{
                    id: "bagtype",
                    label: "random bag type",
                    title: "The type of system used to generate random pieces.",
                    type: "spinner",
                    classes: "imp",
                    value: "7bag",
                    attributes: 'data-items="7-bag,7-BAG,keep shuffling a bag of the 7 tetrominoes;14-bag,14-BAG,keep shuffling a bag of 2x the 7 tetrominoes;classic,CLASSIC,random with repetition protection;pairs,PAIRS,alternate between 2 tetrominoes;total mayhem,TOTAL MAYHEM,completely random generation"'
                }, {
                    id: "spinbonuses",
                    label: "allowed spins",
                    title: "The type of pieces allowed to do spins.",
                    type: "spinner",
                    classes: "imp",
                    value: "T-spins",
                    attributes: 'data-items="T-spins,T-SPINS,receive bonuses for spinning T-pieces;all,ALL-SPIN,receive bonuses for spinning all pieces;stupid,STUPID,everything is a spin because YEAH WHY NOT (O-spin SUPPORTED!);none,NONE,receive no spin bonuses"'
                }, {
                    id: "seed_random",
                    label: 'use random seed (overrides "seed")',
                    title: "Whether to use a random seed.",
                    type: "checkbox",
                    classes: "",
                    attributes: "checked"
                }, {
                    id: "seed",
                    label: "seed",
                    title: 'Seed to use, if "use random seed" is not checked.',
                    type: "number",
                    classes: "",
                    attributes: 'max="2147483647" min="0" value="0"'
                }, {
                    id: "can_retry",
                    label: "allow retry",
                    title: "Whether to allow retrying.",
                    type: "checkbox",
                    classes: "",
                    attributes: "checked"
                }, {
                    id: "stock",
                    label: "stock",
                    title: "Amount of extra lives one has.",
                    type: "number",
                    classes: "",
                    attributes: 'max="10" min="0" value="0"'
                }, {
                    id: "clutch",
                    label: "enable clutch clears",
                    title: "Whether to allow out-of-bound placements when they clear a line.",
                    type: "checkbox",
                    classes: "",
                    attributes: "checked"
                }, {
                    id: "boardwidth",
                    label: "board width",
                    title: "The width of the playing field.",
                    type: "number",
                    classes: "",
                    attributes: 'max="20" min="4" value="10"'
                }, {
                    id: "boardheight",
                    label: "board height",
                    title: "The width of the playing field.",
                    type: "number",
                    classes: "",
                    attributes: 'max="40" min="4" value="20"'
                }]
            }, {
                title: "CONTROLS",
                options: [{
                    id: "allow180",
                    label: "allow 180 spins",
                    title: "Whether to allow the 180 rotation key to be used.",
                    type: "checkbox",
                    classes: "",
                    attributes: "checked"
                }, {
                    id: "kickset",
                    label: "kick table",
                    title: "The type of kicks that pieces can do.",
                    type: "spinner",
                    classes: "",
                    value: "SRS+",
                    attributes: 'data-items="SRS+,SRS+,the default natural rotation system with symmetric I-piece rotation;SRS,SRS,the standard natural rotation system;SRS-X,SRS-X,SRS with more powerful 180 spins;TETRA-X,TETRA-X,novel rotation system by DR OCELOT;NRS,NRS,the classic rotation system;ARS,ARS,rotation system used in arcade games;ASC,ASC,permissive rotation system by WINTERNEBS;none,NONE,no kicks possible"'
                }, {
                    id: "allow_harddrop",
                    label: "use hard drop",
                    title: "Whether to allow use of the Hard Drop button.",
                    type: "checkbox",
                    classes: "",
                    attributes: "checked"
                }, {
                    id: "display_next",
                    label: "use NEXT queue",
                    title: "Whether to show the NEXT queue.",
                    type: "checkbox",
                    classes: "",
                    attributes: "checked"
                }, {
                    id: "display_hold",
                    label: "use HOLD queue",
                    title: "Whether to use the HOLD queue.",
                    type: "checkbox",
                    classes: "",
                    attributes: "checked"
                }, {
                    id: "nextcount",
                    label: "next pieces",
                    title: "Amount of pieces shown in the NEXT queue, if said queue is enabled.",
                    type: "number",
                    classes: "",
                    attributes: 'min="1" value="5" max="5"'
                }, {
                    id: "infinitemovement",
                    label: "infinite movement",
                    title: "Whether to never lock, as long as you keep moving the piece.",
                    type: "checkbox",
                    classes: "",
                    attributes: ""
                }, {
                    id: "display_shadow",
                    label: "show shadow piece",
                    title: "Whether to show the shadow piece.",
                    type: "checkbox",
                    classes: "",
                    attributes: "checked"
                }, {
                    id: "are",
                    label: "ARE",
                    title: "Amount of time in frames in between a piece being placed and the next one spawning.",
                    type: "number",
                    classes: "",
                    attributes: 'min="0" value="0" max="300"'
                }, {
                    id: "lineclear_are",
                    label: "line clear ARE",
                    title: "Amount of time in frames in between a piece being placed and the next one spawning, if a line was cleared.",
                    type: "number",
                    classes: "",
                    attributes: 'min="0" value="0" max="300"'
                }]
            }, {
                title: "GRAVITY & LEVELLING",
                options: [{
                    id: "g",
                    label: "gravity",
                    title: "Gravity (how fast blocks drop). Higher is faster.",
                    type: "number",
                    classes: "",
                    attributes: 'max="20" min="0" step="0.01" value="0.02"'
                }, {
                    id: "levels",
                    label: 'use levelling (overrides "gravity")',
                    title: "Whether to allow players to level up. Overrides the normal gravity.",
                    type: "checkbox",
                    classes: "",
                    attributes: "checked"
                }, {
                    id: "masterlevels",
                    label: "use master levels",
                    title: "If enabled, allow levels past 20 to become MASTER LEVELS (faster lock-down time and less resets).",
                    type: "checkbox",
                    classes: "",
                    attributes: ""
                }, {
                    id: "startinglevel",
                    label: "starting level",
                    title: "Level to start at.",
                    type: "number",
                    classes: "",
                    attributes: 'value="1" min="1"'
                }, {
                    id: "levelspeed",
                    label: "level speed",
                    title: "How fast you clear levels.",
                    type: "number",
                    classes: "",
                    attributes: 'step="0.01" value="1"'
                }, {
                    id: "levelstatic",
                    label: 'use static levelling (overrides "level speed")',
                    title: "Use a static amount of lines to level up.",
                    type: "checkbox",
                    classes: "",
                    attributes: "checked"
                }, {
                    id: "levelstaticspeed",
                    label: "level static speed",
                    title: "If using static levelling, the amount of lines needed to clear a level.",
                    type: "number",
                    classes: "",
                    attributes: 'min="1" value="10"'
                }, {
                    id: "gbase",
                    label: "base gravity",
                    title: "When using levels, the starting gravity.",
                    type: "number",
                    classes: "",
                    attributes: 'step="0.01" value="0.8"'
                }, {
                    id: "gspeed",
                    label: "gravity increase",
                    title: "When using levels, the speed with which gravity increases.",
                    type: "number",
                    classes: "",
                    attributes: 'step="0.001" value="0.007"'
                }, {
                    id: "locktime",
                    label: "lock delay",
                    title: "If not using master levels, the amount of frames until a piece locks down.",
                    type: "number",
                    classes: "",
                    attributes: 'min="1" value="30"'
                }]
            }]
        }, {
            id: "custom_content_objective",
            classes: "hidden",
            blocks: [{
                title: "GENERAL",
                options: [{
                    id: "x_resulttype",
                    label: "key",
                    title: "The counter you will be judged on at the end of the game.",
                    type: "spinner",
                    classes: "super-imp",
                    value: "score",
                    attributes: 'data-items="score,SCORE,final score will be displayed;time,TIME,final time will be displayed;lines,LINES,final line count will be displayed"'
                }, {
                    id: "objective_type",
                    label: "objective",
                    title: "Game mode.",
                    type: "spinner",
                    classes: "super-imp",
                    value: "lines",
                    attributes: 'data-items="none,NONE,play infinitely;lines,LINES,get to a set amount of lines to clear;timed,TIMED,play for a set amount of time to clear"'
                }, {
                    id: "objective_count",
                    label: "count",
                    title: "Amount of primary key to get in LINES mode. For example, in LINES mode this would be the amount of lines to be cleared.",
                    type: "number",
                    classes: "imp",
                    attributes: 'min="1" value="150"'
                }, {
                    id: "objective_time",
                    label: "time",
                    title: "Amount of time in milliseconds. For example, in TIMED mode this would be the amount of time until the game ends.",
                    type: "number",
                    classes: "imp",
                    attributes: 'min="1" value="120000"'
                }, {
                    id: "topoutisclear",
                    label: "topping out is OK",
                    title: "If enabled, still display the results screen if the player tops out.",
                    type: "checkbox",
                    classes: "",
                    attributes: "checked"
                }]
            }]
        }, {
            id: "custom_content_meta",
            classes: "hidden",
            blocks: [{
                title: "INTRO",
                options: [{
                    id: "mission",
                    label: "mission",
                    title: "Text displayed before starting game.",
                    type: "text",
                    classes: "imp",
                    attributes: 'value="CUSTOM GAME"'
                }, {
                    id: "stride",
                    label: "stride mode",
                    title: "Speeds up animations and disables some of the below settings.",
                    type: "checkbox",
                    classes: "",
                    attributes: ""
                }, {
                    id: "countdown",
                    label: "play countdown",
                    title: "Whether to play a countdown.",
                    type: "checkbox",
                    classes: "",
                    attributes: "checked"
                }, {
                    id: "countdown_count",
                    label: "countdown count",
                    title: "Amount of steps in the countdown.",
                    type: "number",
                    classes: "",
                    attributes: 'min="1" value="3" max="60"'
                }, {
                    id: "countdown_interval",
                    label: "countdown interval",
                    title: "Amount of milliseconds between countdown ticks.",
                    type: "number",
                    classes: "",
                    attributes: 'min="1" value="1000"'
                }, {
                    id: "precountdown",
                    label: "time before countdown",
                    title: "Amount of milliseconds before the countdown is started.",
                    type: "number",
                    classes: "",
                    attributes: 'min="1" value="3000"'
                }, {
                    id: "prestart",
                    label: "time before start",
                    title: "Amount of milliseconds before the game is created.",
                    type: "number",
                    classes: "",
                    attributes: 'min="1" value="1000"'
                }, {
                    id: "zoominto",
                    label: "zoom animation",
                    title: "Type of animation to play when starting.",
                    type: "spinner",
                    classes: "",
                    value: "slow",
                    attributes: 'data-items="none,NO ANIMATION,display no animation;fast,FAST,display a fast animation;slow,SLOW,display a slow animation;cinematic,CINEMATIC,display a very slow animation"'
                }]
            }, {
                title: "COUNTERS",
                options: [{
                    id: "slot_counter1",
                    label: "left counter slot 1",
                    title: "The type of metric to display in the first left-hand slot.",
                    type: "spinner",
                    classes: "",
                    value: "stopwatch",
                    attributes: `data-items="${Te}"`
                }, {
                    id: "slot_counter2",
                    label: "left counter slot 2",
                    title: "The type of metric to display in the second left-hand slot.",
                    type: "spinner",
                    classes: "",
                    value: "lines",
                    attributes: `data-items="${Te}"`
                }, {
                    id: "slot_counter3",
                    label: "left counter slot 3",
                    title: "The type of metric to display in the third left-hand slot.",
                    type: "spinner",
                    classes: "",
                    value: "level",
                    attributes: `data-items="${Te}"`
                }, {
                    id: "slot_counter4",
                    label: "left counter slot 4",
                    title: "The type of metric to display in the fourth left-hand slot.",
                    type: "spinner",
                    classes: "",
                    value: "---empty---",
                    attributes: `data-items="${Te}"`
                }, {
                    id: "slot_counter5",
                    label: "right counter slot",
                    title: "The type of metric to display in the right-hand slot.",
                    type: "spinner",
                    classes: "",
                    value: "score",
                    attributes: `data-items="${Te}"`
                }, {
                    id: "absolute_lines",
                    label: "enforce absolute line count",
                    title: "Do not display the progression through the level in the line count.",
                    type: "checkbox",
                    classes: "",
                    attributes: "checked"
                }, {
                    id: "display_progress",
                    label: "display progress bar",
                    title: "Whether to display the progress bar on the right.",
                    type: "checkbox",
                    classes: "",
                    attributes: "checked"
                }]
            }]
        }];

    function Me(e, t) {
        let s = "";
        return e.forEach(e => {
            s += `<div class="scroller room_content tab_content ${e.classes}" data-scope="${t}" id="${e.id}"><p class="rc_moreinfo ns">hover over a setting for more info</p>`, e.blocks.forEach(e => {
                s += `<div class="scroller_block light"><h2 class="ns">${e.title}</h2>`, e.options.forEach(e => {
                    switch (e.type) {
                        case "text":
                            s += `<div class="room_config_row flex-row ${e.classes}" title="${e.title}">\n\t\t\t\t\t\t\t\t\t<div class="room_config_label flex-item ns">${e.label}</div>\n\t\t\t\t\t\t\t\t\t<input class="room_config_item flex-item" data-index="${e.id}" ${e.attributes}>\n\t\t\t\t\t\t\t\t</div>`;
                            break;
                        case "number":
                            s += `<div class="room_config_row flex-row ${e.classes}" title="${e.title}">\n\t\t\t\t\t\t\t\t\t<div class="room_config_label flex-item ns">${e.label}</div>\n\t\t\t\t\t\t\t\t\t<input type="number" class="room_config_item flex-item" data-index="${e.id}" ${e.attributes}>\n\t\t\t\t\t\t\t\t</div>`;
                            break;
                        case "checkbox":
                            s += `<div class="room_config_row flex-row ${e.classes}" title="${e.title}">\n\t\t\t\t\t\t\t\t\t<div class="room_config_label flex-item ns">${e.label}</div>\n\t\t\t\t\t\t\t\t\t<label class="rc_switch flex-item"><input type="checkbox" class="room_config_item" data-index="${e.id}" ${e.attributes}><span class="rc_switch_knob"></span></label>\n\t\t\t\t\t\t\t\t</div>`;
                            break;
                        case "spinner":
                            s += `<div class="room_config_row flex-row ${e.classes}" title="${e.title}">\n\t\t\t\t\t\t\t\t\t<div class="room_config_label flex-item ns">${e.label}</div>\n\t\t\t\t\t\t\t\t\t<div class="room_config_item room_config_spinner flex-item ns" data-index="${e.id}" ${e.attributes}>${e.value || ""}</div>\n\t\t\t\t\t\t\t\t</div>`;
                            break;
                        case "music":
                            s += `<div class="room_config_row flex-row ${e.classes}" title="${e.title}">\n\t\t\t\t\t\t\t\t\t<div class="room_config_label flex-item ns">${e.label}</div>\n\t\t\t\t\t\t\t\t\t<div class="room_config_item room_config_spinner flex-item music_picker ns" data-index="${e.id}" ${e.attributes}></div>\n\t\t\t\t\t\t\t\t</div>`
                    }
                }), s += "</div>"
            }), s += "</div>"
        }), s
    }
    U.ready((function(t) {
        e("room_opts_save").outerHTML = Me(Ie, "room_opts") + e("room_opts_save").outerHTML, e("custom_content_container").innerHTML = Me(Se, "custom_opts"), !1 === te.video.guide && (e("room_opts_welcome").classList.remove("active"), e("room_opts_room").classList.add("active"), e("room_content_welcome").classList.add("hidden"), e("room_content_room").classList.remove("hidden"))
    }));
    const Ce = (() => {
            let e = {},
                a = !1,
                n = null,
                o = null,
                i = null;
            const r = [];

            function l() {
                if (!a || !e) return;
                if (!o || !i || null === i.offsetParent) return void n.classList.add("hidden");
                n.classList.remove("hidden");
                const t = i.getBoundingClientRect();
                n.style.left = `${t.left}px`, n.style.top = `${t.top}px`, n.style.width = `${t.width}px`, n.style.height = `${t.height}px`, n.classList.toggle("input", ["input", "textarea"].includes(document.activeElement.tagName.toLowerCase())), n.classList.toggle("noclick", i.classList.contains("noclick"))
            }

            function c(e) {
                const t = e.split("!");
                return 2 === t.length ? {
                    tags: t[0].split(""),
                    selector: t[1]
                } : {
                    tags: [],
                    selector: t[0]
                }
            }

            function d(t) {
                const a = function(e, t = null) {
                    const a = c(e);
                    let n = Array.from(s(a.selector));
                    if (n = n.filter(e => (null !== e.offsetParent || e.classList.contains("rb_bypass")) && null === e.closest(".hidden")), a.tags.includes("f") && n.splice(1), a.tags.includes("l") && n.splice(0, n.length - 1), t && a.tags.includes("n")) {
                        const e = n.indexOf(t); - 1 !== e && n.length ? n = [n[(e + 1) % n.length]] : n.splice(1)
                    }
                    if (t && a.tags.includes("p")) {
                        const e = n.indexOf(t); - 1 !== e && n.length ? n = [n[(e - 1 + n.length) % n.length]] : n.splice(0, n.length - 1)
                    }
                    return n[0] || null
                }(t, i);
                a ? (o = function(t, a) {
                    const n = c(t);
                    let o = Array.from(s(n.selector));
                    const i = (o = o.filter(e => (null !== e.offsetParent || e.classList.contains("rb_bypass")) && null === e.closest(".hidden"))).indexOf(a);
                    let r = n.selector;
                    return 0 === i ? r = `f!${n.selector}` : i === o.length - 1 && (r = `l!${n.selector}`), e.items[r] ? r : n.selector
                }(t, i = a), c(t).tags.includes("s") || function(e) {
                    const t = document.createElement("div");
                    return t.classList.add("elgh"), t.style.left = `${e.offsetLeft}px`, t.style.top = `${e.offsetTop}px`, t.style.width = `${Math.max(0, Math.min(e.offsetParent.offsetWidth - e.offsetLeft - 30, e.offsetWidth))}px`, t.style.height = `${e.offsetHeight}px`, e.offsetParent.appendChild(t), setTimeout(() => {
                        t.remove()
                    }, 1e3), t
                }(i).scrollIntoView({
                    behavior: "smooth",
                    block: "center",
                    inline: "nearest"
                }), i.getAttribute("data-hover") && vs.play(`menu${i.getAttribute("data-hover")}`)) : o = t
            }

            function p(t) {
                (e = t).starter ? d(e.starter) : (o = null, i = null)
            }
            U.ready((function(e) {
                (n = document.createElement("div")).id = "ribbonglide", document.body.appendChild(n), PIXI.Ticker.shared.add(l)
            }));
            let u = null;

            function m(e) {
                if ("none" === window.getComputedStyle(e, null).getPropertyValue("pointer-events")) return vs.play("no"), n.classList.add("no"), null !== u && clearTimeout(u), void setTimeout(() => {
                    n.classList.remove("no"), u = null
                }, 100);
                ee.pulse(...ee.WEAK_TAP), vs.play("ribbon_tap", .5), e.focus(), e.click()
            }
            return {
                push: () => {
                    r.push({
                        guide: e,
                        targeted: o,
                        targetedElement: i
                    })
                },
                pop: () => {
                    ! function() {
                        const t = r.pop();
                        t && (e = t.guide, o = t.targeted, i = t.targetedElement)
                    }()
                },
                tryClick: e => {
                    m(e)
                },
                isEngaged: () => a,
                engage: () => {
                    a = !0, document.body.classList.add("ribbonglide_engaged")
                },
                disengage: () => {
                    a = !1, document.body.classList.remove("ribbonglide_engaged")
                },
                bindGuide: e => {
                    p(e)
                },
                rebind: () => {
                    p(e)
                },
                action: s => {
                    ! function(s) {
                        if (a && !i && d(o), a && o && e && e.items && void 0 !== e.items[o])
                            if (void 0 === e.items[o][s] && "confirm" === s && i) m(i);
                            else if (void 0 === e.items[o][s] && "back" === s && e.back) m(t(e.back));
                        else if (void 0 !== e.items[o][s])
                            if ("string" == typeof e.items[o][s]) vs.play("ribbon", .5), ee.pulse(...ee.WEAK_GLIDE), d(e.items[o][s]);
                            else {
                                const t = e.items[o][s](i);
                                t && (vs.play("ribbon"), ee.pulse(...ee.WEAK_GLIDE), d(t))
                            }
                    }(s)
                }
            }
        })(),
        Ae = {
            home: {
                starter: "f!.scroller_item",
                back: "#exit_electron",
                items: {
                    ".scroller_item": {
                        up: "p!.scroller_item",
                        down: "n!.scroller_item"
                    }
                }
            },
            play1p: {
                starter: "f!.scroller_item",
                back: "#back",
                items: {
                    ".scroller_item": {
                        up: "p!.scroller_item",
                        down: "n!.scroller_item"
                    }
                }
            },
            "40l": {
                starter: "#start_40l",
                back: "#back",
                items: {
                    "#start_40l": {
                        left: "#music_picker_40l",
                        right: "#music_picker_40l",
                        up: "l!.checkbox",
                        down: "f!.checkbox"
                    },
                    "#music_picker_40l": {
                        left: "#start_40l",
                        right: "#start_40l",
                        up: "l!.checkbox",
                        down: "f!.checkbox"
                    },
                    "f!.checkbox": {
                        up: "#start_40l",
                        down: "n!.checkbox"
                    },
                    "l!.checkbox": {
                        up: "p!.checkbox",
                        down: "#start_40l"
                    },
                    ".checkbox": {
                        up: "p!.checkbox",
                        down: "n!.checkbox"
                    }
                }
            },
            blitz: {
                starter: "#start_blitz",
                back: "#back",
                items: {
                    "#start_blitz": {
                        up: "l!.checkbox",
                        down: "f!.checkbox"
                    },
                    "f!.checkbox": {
                        up: "#start_blitz",
                        down: "n!.checkbox"
                    },
                    "l!.checkbox": {
                        up: "p!.checkbox",
                        down: "#start_blitz"
                    },
                    ".checkbox": {
                        up: "p!.checkbox",
                        down: "n!.checkbox"
                    }
                }
            },
            zen: {
                starter: "#start_zen",
                back: "#back",
                items: {
                    "#start_zen": {}
                }
            },
            custom: {
                starter: "#start_custom",
                back: "#back",
                items: {
                    "#custom_export": {
                        up: "l!.room_config_row",
                        down: "#start_custom"
                    },
                    "#start_custom": {
                        left: "#music_picker_custom",
                        right: "#music_picker_custom",
                        up: "#custom_export",
                        down: "f!.room_tab"
                    },
                    "#music_picker_custom": {
                        left: "#start_custom",
                        right: "#start_custom",
                        up: "#custom_export",
                        down: "f!.room_tab"
                    },
                    ".room_tab": {
                        left: "p!.room_tab",
                        right: "n!.room_tab",
                        up: "#start_custom",
                        down: "n!.room_config_row"
                    },
                    "f!.room_config_row": {
                        up: "f!.room_tab",
                        down: "n!.room_config_row",
                        confirm: e => {
                            Ce.tryClick(e.querySelector(".room_config_item"))
                        }
                    },
                    "l!.room_config_row": {
                        up: "p!.room_config_row",
                        down: "#custom_export",
                        confirm: e => {
                            Ce.tryClick(e.querySelector(".room_config_item"))
                        }
                    },
                    ".room_config_row": {
                        up: "p!.room_config_row",
                        down: "n!.room_config_row",
                        confirm: e => {
                            Ce.tryClick(e.querySelector(".room_config_item"))
                        }
                    }
                }
            },
            about: {
                starter: "#about_line_logo",
                back: "#back",
                items: {
                    "#about_line_logo": {
                        up: "l!.scroller_item",
                        down: "f!.credit_st"
                    },
                    ".credit_st": {
                        left: "p!.credit_st",
                        right: "n!.credit_st",
                        up: "#about_line_logo",
                        down: "f!.scroller_item"
                    },
                    "f!.scroller_item": {
                        up: "l!.credit_st",
                        down: "n!.scroller_item"
                    },
                    "l!.scroller_item": {
                        up: "p!.scroller_item",
                        down: "#about_line_logo"
                    },
                    ".scroller_item": {
                        up: "p!.scroller_item",
                        down: "n!.scroller_item"
                    }
                }
            },
            playmulti: {
                starter: "f!.scroller_item",
                back: "#back",
                items: {
                    "#multi_join": {
                        up: "l!.scroller_item",
                        down: "f!.scroller_item",
                        confirm: e => {
                            Ce.tryClick(e)
                        }
                    },
                    "f!.scroller_item": {
                        up: "#multi_join",
                        down: "n!.scroller_item"
                    },
                    "l!.scroller_item": {
                        up: "p!.scroller_item",
                        down: "#multi_join"
                    },
                    ".scroller_item": {
                        up: "p!.scroller_item",
                        down: "n!.scroller_item"
                    }
                }
            },
            multilisting: {
                starter: "f!.room_listing_item",
                back: "#back",
                items: {
                    ".room_listing_item": {
                        up: "p!.room_listing_item",
                        down: "n!.room_listing_item"
                    }
                }
            },
            lobby: {
                starter: "#roomid_container",
                back: "#leaveroom",
                items: {
                    "#roomid_container": {
                        up: "#room_opts_save",
                        down: "f!.room_tab"
                    },
                    ".room_tab": {
                        left: "p!.room_tab",
                        right: "n!.room_tab",
                        up: "#roomid_container",
                        down: "f!.room_config_row"
                    },
                    "f!.room_config_row": {
                        up: "f!.room_tab",
                        down: "n!.room_config_row",
                        confirm: t => {
                            e("roomview").classList.contains("hosting") && Ce.tryClick(t.querySelector(".room_config_item"))
                        }
                    },
                    "l!.room_config_row": {
                        up: "p!.room_config_row",
                        down: "#room_opts_save",
                        confirm: t => {
                            e("roomview").classList.contains("hosting") && Ce.tryClick(t.querySelector(".room_config_item"))
                        }
                    },
                    ".room_config_row": {
                        up: "p!.room_config_row",
                        down: "n!.room_config_row",
                        confirm: t => {
                            e("roomview").classList.contains("hosting") && Ce.tryClick(t.querySelector(".room_config_item"))
                        }
                    },
                    "#room_opts_save": {
                        up: "l!.room_config_row",
                        down: "#roomid_container",
                        confirm: t => {
                            e("roomview").classList.contains("hosting") && Ce.tryClick(t)
                        }
                    }
                }
            },
            victory: {
                starter: "f!.playerresult",
                back: "#backtoroom",
                items: {
                    ".playerresult": {
                        up: "p!.playerresult",
                        down: "n!.playerresult"
                    }
                }
            },
            multilog: {
                starter: "f!.leagueplayer",
                back: "#back",
                items: {
                    ".leagueplayer": {
                        up: "l!.multilog_result",
                        down: "f!.multilog_result",
                        left: "p!.leagueplayer",
                        right: "n!.leagueplayer"
                    },
                    "f!.multilog_result": {
                        up: "f!.leagueplayer",
                        down: "n!.multilog_result"
                    },
                    "l!.multilog_result": {
                        up: "p!.multilog_result",
                        down: "f!.leagueplayer"
                    },
                    ".multilog_result": {
                        up: "p!.multilog_result",
                        down: "n!.multilog_result"
                    }
                }
            },
            league: {
                starter: "s!#enter_matchmaking",
                back: "#back",
                items: {
                    "#enter_matchmaking": {
                        up: "#league_tetra",
                        down: "#league_tetra"
                    },
                    "#league_tetra": {
                        up: "#enter_matchmaking",
                        down: "#enter_matchmaking"
                    }
                }
            },
            endleague: {
                starter: "f!.leagueplayer",
                back: "#backtoleague",
                items: {
                    ".leagueplayer": {
                        up: "p!.leagueplayer",
                        down: "n!.leagueplayer",
                        left: "p!.leagueplayer",
                        right: "n!.leagueplayer"
                    }
                }
            },
            tetra: {
                starter: "#tetra_standalone",
                back: "#back",
                items: {
                    "#tetra_find": {
                        up: "l!#tetra_news_content a",
                        down: "#tetra_standalone"
                    },
                    "#tetra_standalone": {
                        up: "#tetra_find",
                        down: "#tetra_leaderboards"
                    },
                    "#tetra_leaderboards": {
                        up: "#tetra_standalone",
                        down: "#tetra_me",
                        left: "#tetra_me",
                        right: "#tetra_players"
                    },
                    "#tetra_me": {
                        up: "#tetra_leaderboards",
                        down: "f!#tetra_news_content a",
                        left: "#tetra_players",
                        right: "#tetra_players"
                    },
                    "#tetra_players": {
                        up: "#tetra_leaderboards",
                        down: "f!#tetra_news_content a",
                        left: "#tetra_me",
                        right: "#tetra_me"
                    },
                    "f!#tetra_news_content a": {
                        up: "#tetra_me",
                        left: "#tetra_players",
                        down: "n!#tetra_news_content a",
                        right: "n!#tetra_news_content a"
                    },
                    "l!#tetra_news_content a": {
                        up: "p!#tetra_news_content a",
                        left: "p!#tetra_news_content a",
                        down: "#tetra_find",
                        right: "#tetra_find"
                    },
                    "#tetra_news_content a": {
                        up: "p!#tetra_news_content a",
                        left: "p!#tetra_news_content a",
                        down: "n!#tetra_news_content a",
                        right: "n!#tetra_news_content a"
                    }
                }
            },
            tetra_records: {
                starter: "f!.control_button",
                back: "#back",
                items: {
                    ".control_button": {
                        up: "l!.record_item",
                        down: "f!.record_item",
                        left: "p!.control_button",
                        right: "n!.control_button"
                    },
                    "f!.record_item": {
                        up: "f!.control_button",
                        down: "n!.record_item"
                    },
                    "l!.record_item": {
                        up: "p!.record_item",
                        down: "f!.control_button"
                    },
                    ".record_item": {
                        up: "p!.record_item",
                        down: "n!.record_item"
                    }
                }
            },
            tetra_me: {
                starter: "f!.control_button",
                back: "#back",
                items: {
                    ".control_button": {
                        up: "l!.record_item",
                        down: "f!.record_item",
                        left: "p!.control_button",
                        right: "n!.control_button"
                    },
                    "f!.record_item": {
                        up: "f!.control_button",
                        down: "n!.record_item"
                    },
                    "l!.record_item": {
                        up: "p!.record_item",
                        down: "f!.control_button"
                    },
                    ".record_item": {
                        up: "p!.record_item",
                        down: "n!.record_item"
                    }
                }
            },
            tetra_players: {
                starter: "f!.control_button",
                back: "#back",
                items: {
                    ".control_button": {
                        up: "l!.record_item",
                        down: "f!.record_item",
                        left: "p!.control_button",
                        right: "n!.control_button"
                    },
                    "f!.record_item": {
                        up: "f!.control_button",
                        down: "n!.record_item"
                    },
                    "l!.record_item": {
                        up: "p!.record_item",
                        down: "f!.control_button"
                    },
                    ".record_item": {
                        up: "p!.record_item",
                        down: "n!.record_item"
                    }
                }
            },
            results: {
                starter: "f!.rg_target_pri",
                back: "#back",
                items: {
                    ".rg_target_pri": {
                        up: "p!.rg_target_pri",
                        left: "p!.rg_target_pri",
                        down: "n!.rg_target_pri",
                        right: "n!.rg_target_pri"
                    }
                }
            },
            config: {
                starter: "f!.rg_target_pri",
                back: "#back",
                items: {
                    ".rg_target_pri": {
                        up: "p!.rg_target_pri",
                        down: "n!.rg_target_pri",
                        left: e => {
                            if ("range" !== e.getAttribute("type")) return "p!.rg_target_pri"; {
                                let t = parseFloat(e.getAttribute("step")) || 1;
                                e.classList.contains("range_reversed") || (t *= -1), e.value = Math.min(parseFloat(e.getAttribute("max")), Math.max(parseFloat(e.getAttribute("min")), parseFloat(e.value) + t)), e.dispatchEvent(new Event("input", {
                                    bubbles: !0,
                                    cancelable: !0
                                }))
                            }
                        },
                        right: e => {
                            if ("range" !== e.getAttribute("type")) return "n!.rg_target_pri"; {
                                let t = parseFloat(e.getAttribute("step")) || 1;
                                e.classList.contains("range_reversed") && (t *= -1), e.value = Math.min(parseFloat(e.getAttribute("max")), Math.max(parseFloat(e.getAttribute("min")), parseFloat(e.value) + t)), e.dispatchEvent(new Event("input", {
                                    bubbles: !0,
                                    cancelable: !0
                                }))
                            }
                        }
                    }
                }
            },
            config_account: {
                starter: "f!.rg_target_pri",
                back: "#back",
                items: {
                    ".rg_target_pri": {
                        up: "p!.rg_target_pri",
                        down: "n!.rg_target_pri",
                        left: "p!.rg_target_pri",
                        right: "n!.rg_target_pri"
                    }
                }
            },
            config_bgmtweak: {
                starter: "f!.rg_target_pri",
                back: "#back",
                items: {
                    ".rg_target_pri": {
                        up: "p!.rg_target_pri",
                        down: "n!.rg_target_pri",
                        left: "p!.rg_target_pri",
                        right: "n!.rg_target_pri"
                    }
                }
            },
            config_electron: {
                starter: "f!.rg_target_pri",
                back: "#back",
                items: {
                    ".rg_target_pri": {
                        up: "p!.rg_target_pri",
                        down: "n!.rg_target_pri",
                        left: "p!.rg_target_pri",
                        right: "n!.rg_target_pri"
                    }
                }
            },
            list_request: {
                starter: "f!#list_request .scroller_item",
                back: "#list_request_back",
                items: {
                    "#list_request .scroller_item": {
                        up: "p!#list_request .scroller_item",
                        down: "n!#list_request .scroller_item"
                    }
                }
            },
            tetra_dialog: {
                starter: ".tetra_modal_close",
                back: ".tetra_modal_close",
                items: {
                    ".tetra_modal_close": {
                        up: "l!.tetra_button",
                        down: "f!.tetra_button"
                    },
                    ".tetra_button": {
                        up: ".tetra_modal_close",
                        down: ".tetra_modal_close",
                        left: "p!.tetra_button",
                        right: "n!.tetra_button"
                    }
                }
            },
            dialog: {
                starter: "f!.oob_button",
                items: {
                    ".oob_button": {
                        left: "p!.oob_button",
                        right: "n!.oob_button"
                    }
                }
            },
            social: {
                starter: "f!.oob_button",
                items: {
                    ".oob_button": {
                        left: "p!.oob_button",
                        right: "n!.oob_button"
                    }
                }
            }
        };

    function He() {
        D({
            title: "DELETE YOUR ACCOUNT?",
            msg: `delete your account <span class="inline_self">${e("config_account_username_field").value}</span> and all attached data?</p><p class="modal_also">this cannot be undone.`,
            classes: ["crash_modal"],
            buttons: [{
                label: "CANCEL",
                classes: [],
                callback: e => {
                    e()
                }
            }, {
                label: "DELETE!",
                classes: ["pri"],
                callback: e => {
                    e(), Re()
                }
            }]
        })
    }

    function Re() {
        D({
            title: "DELETE YOUR ACCOUNT?",
            msg: `no seriously, are you sure you want to delete <span class="inline_self">${e("config_account_username_field").value}</span> and EVERYTHING INVOLVED, like your replays, badges, XP, rating, etc?</p><p class="modal_also">you can never get it back!!!`,
            classes: ["crash_modal", "shudder"],
            buttons: [{
                label: "CANCEL",
                classes: [],
                callback: e => {
                    e()
                }
            }, {
                label: "DELETE!!!",
                classes: ["pri"],
                callback: e => {
                    e(), $e()
                }
            }]
        })
    }

    function $e() {
        D({
            title: `DELETING ${e("config_account_username_field").value}`,
            msg: 'please type your username<br><input class="usernamelike" data-escape="account_delete_cancel" data-enter="account_delete_submit" id="account_delete" placeholder="YOUR USERNAME" value="">',
            buttons: [{
                label: "CANCEL",
                classes: [],
                id: "account_delete_cancel",
                callback: e => {
                    e()
                }
            }, {
                label: "SUBMIT",
                classes: ["pri"],
                id: "account_delete_submit",
                callback: t => {
                    t(), e("account_delete").value.toUpperCase() === e("config_account_username_field").value ? Oe() : T("wrong username - deletion aborted")
                }
            }]
        }), e("account_delete").focus()
    }

    function Oe() {
        z.requestPassword((e, t) => {
            ct("requesting deletion…"), k.post("/api/users/requestDeletion", {
                password: e,
                totp: t
            }, !0).then(e => {
                I("an email has been sent with further instructions!"), dt()
            }, e => {
                dt(), S(e)
            })
        })
    }
    const Pe = (() => {
        let e, t = !1,
            s = !1,
            a = [];

        function n() {
            t || s || (s = !0, nsfwjs.load("/res/ml/").then(s => {
                e = s, t = !0, a.forEach(e => {
                    e()
                })
            }))
        }
        return {
            request: function(s = (() => {})) {
                return new Promise((o, i) => {
                    n();
                    const r = document.createElement("input");
                    r.type = "file", r.setAttribute("accept", ".png,.jpg,.jpeg,.gif,image/gif,image/png,image/jpg,image/jpeg"), r.onchange = r => {
                        s();
                        const l = document.createElement("img"),
                            c = r.target.files[0];
                        if (c.size >= 2097152) return void i("sorry, that file's too large!");
                        const d = new FileReader;
                        d.readAsDataURL(c), d.onload = () => {
                            l.src = d.result,
                                function(e) {
                                    n(), t ? e() : a.push(e)
                                }(() => {
                                    setTimeout(() => {
                                        try {
                                            e.classify(l).then(e => {
                                                let t = 0;
                                                ["Porn", "Sexy", "Hentai"].includes(e[0].className) ? t = 2 : e.forEach(e => {
                                                    ["Porn", "Sexy", "Hentai"].includes(e.className) && (e.probability >= .4 ? t = Math.max(t, 2) : e.probability >= .1 && (t = Math.max(t, 1)))
                                                }), o({
                                                    safetyLevel: t,
                                                    image: c,
                                                    predictions: e
                                                })
                                            }).catch(() => {
                                                o({
                                                    safetyLevel: 1,
                                                    image: c,
                                                    predictions: []
                                                })
                                            })
                                        } catch (e) {
                                            o({
                                                safetyLevel: 1,
                                                image: c,
                                                predictions: []
                                            })
                                        }
                                    }, 100)
                                })
                        }
                    }, r.click()
                })
            }
        }
    })();
    let De, Ne = 0,
        Fe = "z",
        Ue = -1,
        Be = {};
    const Xe = {
        none: {
            back: null,
            header: "HOME",
            footer: "pick a game mode"
        },
        home: {
            back: null,
            header: "HOME",
            footer: 'welcome to <span class="cheeky">TETRIO</span>!',
            onenter: () => {
                ks.playSmooth(document.body.classList.contains("inpair") || document.body.classList.contains("matchmaking") ? "touhoudaiensei" : "kuchu-toshi"), document.body.classList.contains("inpair") || document.body.classList.contains("matchmaking") || Va("online", "menus"), X.mount("tetr-io_728x90_1"), X.mount("tetr-io_970X250_1"), vt("Homebanner")
            },
            onreenter: () => {
                X.mount("tetr-io_728x90_1"), X.mount("tetr-io_970X250_1"), vt("Homebanner")
            },
            onexit: () => {
                X.unmount("tetr-io_728x90_1"), X.unmount("tetr-io_970X250_1")
            }
        },
        about: {
            back: "home",
            header: "ABOUT",
            footer: 'thank you for playing <span class="cheeky">TETRIO</span>!',
            onenter: () => {
                ws.loadSpecialThanks()
            }
        },
        play1p: {
            back: "home",
            header: "SOLO",
            footer: "pick a game mode",
            onenter: () => {
                e("zen_count").innerHTML = Ft.getZen().level, X.mount("tetr-io_728x90_2"), vt("Solo Home Menu")
            },
            onreenter: () => {
                X.mount("tetr-io_728x90_2"), vt("Solo Home Menu")
            },
            onexit: () => {
                X.unmount("tetr-io_728x90_2")
            }
        },
        playmulti: {
            back: "home",
            header: "MULTIPLAYER",
            footer: "pick a game mode",
            onback: () => {
                document.body.classList.contains("inpair") || document.body.classList.contains("matchmaking") || Ws.unrequire()
            },
            onenter: () => {
                ks.playSmooth(document.body.classList.contains("inpair") || document.body.classList.contains("matchmaking") ? "touhoudaiensei" : "kuchu-toshi"), k.get("/api/rooms/menu", {}, !0).then(t => {
                    e("quickplay_players").innerHTML = `${t.quickplay.playing}${t.quickplay.total - t.quickplay.playing ? `<span class="room_listing_spectators">+${t.quickplay.total - t.quickplay.playing}</span>` : ""}`, e("quickplay_players").classList.toggle("empty", !t.quickplay.playing), e("room_count").innerHTML = `${t.roomcount}`, e("room_count").classList.toggle("empty", !t.roomcount), e("room_count").classList.toggle("singular", 1 === t.roomcount)
                }, t => {
                    e("quickplay_players").innerHTML = "0", e("quickplay_players").classList.add("empty")
                }), document.body.classList.contains("inpair") || document.body.classList.contains("matchmaking") || Va("online", "menus"), X.mount("tetr-io_728x90_3"), vt("Multiplayer Home Menu")
            },
            onreenter: () => {
                X.mount("tetr-io_728x90_3"), vt("Multiplayer Home Menu")
            },
            onexit: () => {
                X.unmount("tetr-io_728x90_3")
            }
        },
        multilisting: {
            back: "playmulti",
            header: "MULTIPLAYER / ROOM LISTING",
            footer: "pick a room to join!",
            onenter: () => {
                ea.loadListing(), e("roomlisting_scroller").scrollTop = 0
            }
        },
        lobby: {
            back: null,
            header: "",
            footer: "",
            onenter: () => {
                ks.playSmooth("smoke"), e("room_chat").scrollTop = e("room_chat").scrollHeight + 100, Zs && "X-QP" === Zs ? X.mount("tetr-io_300x250_1") : X.mount("tetr-io_728x90_4"), vt(Zs && "X-QP" === Zs ? "Quick Play Lobby" : "Custom Room Lobby")
            },
            onreenter: () => {
                Zs && "X-QP" === Zs ? X.mount("tetr-io_300x250_1") : X.mount("tetr-io_728x90_4")
            },
            onexit: () => {
                X.unmount("tetr-io_300x250_1"), X.unmount("tetr-io_728x90_4")
            }
        },
        victory: {
            back: null,
            header: "RESULTS",
            footer: "the results are in!",
            onenter: () => {
                ks.playSmooth("aijin-sanka"), e("victoryview").scrollTop = -200, e("vvsc").scrollTop = -200, X.mount("tetr-io_970X250_2"), X.mount("tetr-io_728x90_5"), vt("Multiplayer Results")
            },
            onreenter: () => {
                X.mount("tetr-io_970X250_2"), X.mount("tetr-io_728x90_5"), vt("Multiplayer Results")
            },
            onexit: () => {
                X.unmount("tetr-io_970X250_2"), X.unmount("tetr-io_728x90_5")
            }
        },
        multilog: {
            back: "home",
            header: "RESULTS",
            footer: "the results are in!"
        },
        league: {
            back: "playmulti",
            header: "TETRA LEAGUE",
            footer: "face off against others and rise up through the ranks!",
            onenter: () => {
                ks.playSmooth("touhoudaiensei"), e("leagueview").scrollTop = 0, We(), X.mount("tetr-io_728x90_6"), vt("League Home")
            },
            onreenter: () => {
                X.mount("tetr-io_728x90_6"), vt("League Home")
            },
            onexit: () => {
                X.unmount("tetr-io_728x90_6")
            }
        },
        endleague: {
            back: null,
            header: "TETRA LEAGUE / RESULTS",
            footer: "the results are in!",
            onenter: () => {
                e("league_chat").scrollTop = e("league_chat").scrollHeight + 100, vt("League Results")
            }
        },
        tetra: {
            back: "home",
            header: "TETRA CHANNEL",
            footer: "welcome to TETRA CHANNEL!",
            onenter: () => {
                ks.playSmooth(document.body.classList.contains("inpair") || document.body.classList.contains("matchmaking") ? "touhoudaiensei" : "shikiichi-made-mousukoshi"), ws.loadNews(), ws.loadTwitch(), vt("Tetra Home")
            }
        },
        tetra_records: {
            back: "tetra",
            header: "TETRA CHANNEL / LEADERBOARDS",
            footer: "top the global leaderboards!",
            onenter: () => {
                ws.loadRecords("40l_global", "tetra_records")
            }
        },
        tetra_me: {
            back: "tetra",
            header: "TETRA CHANNEL / ME",
            footer: "view your achievements!",
            onenter: () => {
                ws.loadRecords("any_userrecent_CURRENTID", "tetra_me")
            }
        },
        tetra_players: {
            back: "tetra",
            header: "TETRA CHANNEL / PLAYERS",
            footer: "view other players and their achievements!",
            onenter: () => {
                ws.loadUserList("tetra_player_league_stream", "/api/users/by/league"), e("tetra_players_league").classList.add("pressed"), e("tetra_players_xp").classList.remove("pressed"), e("tetra_player_league_stream").classList.remove("hidden"), e("tetra_player_xp_stream").classList.add("hidden")
            }
        },
        "40l": {
            back: "play1p",
            header: "40 LINES",
            footer: "press START to begin playing"
        },
        blitz: {
            back: "play1p",
            header: "BLITZ",
            footer: "press START to begin playing"
        },
        zen: {
            back: "play1p",
            header: "ZEN",
            footer: "press START to begin playing"
        },
        custom: {
            back: "play1p",
            header: "CUSTOM",
            footer: "press START to begin playing"
        },
        results: {
            back: "home",
            header: "RESULTS",
            footer: "GAME TYPE: the results are in!",
            onenter: () => {
                e("results_stats_set_overview").classList.add("pressed"), e("results_stats_set_full").classList.remove("pressed"), e("results_stats_overview").classList.remove("hidden"), e("results_stats_full").classList.add("hidden"), X.mount("tetr-io_728x90_7"), vt("Solo Results")
            },
            onreenter: () => {
                X.mount("tetr-io_728x90_7"), vt("Solo Results")
            },
            onexit: () => {
                X.unmount("tetr-io_728x90_7")
            }
        },
        config: {
            back: "home",
            header: "CONFIG",
            footer: 'tweak your settings for a better <span class="cheeky">TETRIO</span> experience'
        },
        config_account: {
            back: "config",
            header: "CONFIG / ACCOUNT",
            footer: 'change settings in your <span class="cheeky">TETRIO</span> account'
        },
        config_account_orders: {
            back: "config_account",
            header: "CONFIG / ACCOUNT / ORDERS",
            footer: "view past orders for your account"
        },
        config_bgmtweak: {
            back: "config",
            header: "CONFIG / BGM TWEAKER",
            footer: "change how often some songs play"
        },
        config_electron: {
            back: "config",
            header: 'CONFIG / <span class="cheeky">TETRIO</span> DESKTOP',
            footer: 'change <span class="cheeky">TETRIO</span> DESKTOP settings'
        }
    };
    let ze = "none";

    function Ge(t, s, a, n, o, i, r) {
        D({
            title: t,
            msg: `${s}<br><input data-escape="request_number_cancel" data-enter="request_number_submit" id="request_number" type="number" placeholder="NUMBER" autocomplete="off" value="${i}" step="${o}" min="${a}" max="${n}">`,
            buttons: [{
                label: "CANCEL",
                classes: [],
                id: "request_number_cancel",
                callback: e => {
                    e()
                }
            }, {
                label: "SUBMIT",
                classes: ["pri"],
                id: "request_number_submit",
                callback: t => {
                    r(e("request_number").value), t()
                }
            }]
        }), e("request_number").focus()
    }

    function je(t, s, a, n) {
        D({
            title: t,
            msg: `${s}<br><span style="font-family: 'PFW'; font-size: 1.35em;">#</span><input data-escape="request_roomid_cancel" data-enter="request_roomid_submit" id="request_roomid" placeholder="ROOM ID" autocomplete="off" value="${a}" minlength="1" maxlength="16" class="mono_input usernamelike" style="width: calc(100% - 1.5em); margin-left: 0.2em;">`,
            buttons: [{
                label: "CANCEL",
                classes: [],
                id: "request_roomid_cancel",
                callback: e => {
                    e()
                }
            }, {
                label: "SUBMIT",
                classes: ["pri"],
                id: "request_roomid_submit",
                callback: t => {
                    n(e("request_roomid").value), t()
                }
            }]
        }), e("request_roomid").focus()
    }

    function We() {
        "league" !== ze || e("menus").classList.contains("hidden") || ht < 1 || k.get("/api/rooms/league", {}, !0).then(t => {
            e("mm_queuecount_count").innerHTML = t.info.queue, e("mm_playercount_count").innerHTML = t.info.players
        }, t => {
            e("mm_queuecount_count").innerHTML = "0", e("mm_playercount_count").innerHTML = "0"
        })
    }

    function qe() {
        return !document.body.classList.contains("supporter") && (!document.body.classList.contains("staff") && (Ke("THIS ACTION REQUIRES SUPPORTER"), !0))
    }

    function Ke(t = "SUPPORT TETR.IO", s) {
        if (TETRIO_ENV.novault) return void T("purchases are disabled on this installation");
        D({
            title: t,
            msg: `</p><div class="dialog_long">\n\t\t\t\t<p class="supporter_bumper">\n\t\t\t\t\tEver since starting TETR.IO back in February of 2019, I've always tried running it in a way I feel is fair. While it may be an .io-game, I don't want to go down the path of other such games. I want to pride myself on my game, not on my bottom line. TETR.IO will always be <b>free-to-win</b>, with monetization being optional for all players. Please help me sustain this goal, by supporting me, and get some cool benefits! While they won't improve your skill, they might make you stand out among friends, and rep your support! ♥\n\t\t\t\t\t<span class="supporter_bumper_footer">&mdash; osk, founder and developer of TETR.IO</span>\n\t\t\t\t</p>\n\t\t\t\t<div class="supporter-perk"><img src="/res/supporter-perk-badge.png" />show off with a very special <span>profile badge</span></div>\n\t\t\t\t<div class="supporter-perk"><img src="/res/supporter-perk-customize.png" />customize your profile with a <span>profile banner</span> and <span>about me</span> section</div>\n\t\t\t\t<div class="supporter-perk"><img src="/res/supporter-perk-amend.png" />easily <span>change your username</span> once a month and <span>change your country</span> on demand</div>\n\t\t\t\t<div class="supporter-perk"><img src="/res/supporter-perk-emotes.png" />get access to <span>exclusive supporter emotes</span></div>\n\t\t\t\t<div class="supporter-perk"><img src="/res/supporter-perk-vanityroom.png" />set a <span>custom room ID</span> on your public and private rooms</div>\n\t\t\t\t<div class="supporter-perk"><img src="/res/supporter-perk-friends.png" />have up to <span>500 friends</span>, up from 50</div>\n\t\t\t\t<div class="supporter-perk"><img src="/res/supporter-perk-discordrole.png" />get an exclusive <span>supporter role</span> in the discord</div>\n\t\t\t\t<div class="supporter-perk"><img src="/res/supporter-perk-ads.png" />hide all <span>ads</span> from the game and tetra channel</div>\n\t\t\t\t<div class="supporter-perk"><img src="/res/supporter-perk-love.png" />and get that warm feeling of <span>supporting a project you love</span></div>\n\t\t\t\t<div class="supporter_payment_block">\n\t\t\t\t\t<p>TETR.IO Supporter is a <b>non-recurring payment</b>. If you buy it while still being a supporter, it will extend the duration of your existing supporter status.</p>\n\t\t\t\t\t<div class="checkbox minor_checkbox ${s ? "checked" : ""}" id="supporter_payment_block_gift">Gift to other player(s)</div>\n\t\t\t\t\t<input placeholder="the recipients' usernames, separated by spaces" id="supporter_payment_block_recipient" autocomplete="off" class="minor_input usernamelike" value="${s ? r(s).replace('"', "").toLowerCase() : ""}">\n\t\t\t\t\t<input type="range" min="1" max="24" value="${s ? "1" : "3"}" class="minor_range" id="supporter_payment_block_duration">\n\t\t\t\t\t<div class="supporter_payment_price" id="supporter_payment_price">\n\t\t\t\t\t\t<div>3 months</div>\n\t\t\t\t\t\t€15\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="supporter_payment_custom" id="supporter_payment_custom">...or pick a custom length (up to 1200 months)</div>\n\t\t\t\t\t<p class="supporter_payment_also">will be converted to your local currency on payment</p>\n\t\t\t\t</div>\n\t\t\t</div><p>`,
            classes: ["supporter_modal"],
            buttons: [{
                label: "BACK",
                classes: [],
                callback: e => {
                    e()
                }
            }, {
                label: "SUPPORT!",
                classes: ["pri"],
                callback: t => {
                    const s = e("supporter_payment_block_recipient").value.toLowerCase().replace(/,/g, "").replace(/\s+/g, " ").trim().split(" "),
                        a = e("supporter_payment_block_gift").classList.contains("checked"),
                        n = a && s.length > 1 ? 1 : Math.max(1, Math.min(1200, parseInt(e("supporter_payment_block_duration").value)));
                    Mt("supporter", {
                        months: n,
                        price: (a ? s.length : 1) * (Math.min(TETRIO_ENV.catalog.supporter.bulk_after, n) * (a ? TETRIO_ENV.catalog.supporter.price_gift : TETRIO_ENV.catalog.supporter.price)) + Math.max(0, n - TETRIO_ENV.catalog.supporter.bulk_after) * (a ? TETRIO_ENV.catalog.supporter.price_gift_bulk : TETRIO_ENV.catalog.supporter.price_bulk),
                        isgift: a,
                        recipients: a ? s : void 0
                    }, () => {
                        t()
                    })
                }
            }]
        });
        const a = () => {
            const t = e("supporter_payment_block_gift").classList.contains("checked"),
                s = t ? e("supporter_payment_block_recipient").value.toLowerCase().replace(/,/g, "").replace(/\s+/g, " ").trim().split(" ").length : 1,
                a = s > 1 ? 1 : Math.max(1, Math.min(1200, parseInt(e("supporter_payment_block_duration").value))),
                n = s * (Math.min(TETRIO_ENV.catalog.supporter.bulk_after, a) * (t ? TETRIO_ENV.catalog.supporter.price_gift : TETRIO_ENV.catalog.supporter.price)) + Math.max(0, a - TETRIO_ENV.catalog.supporter.bulk_after) * (t ? TETRIO_ENV.catalog.supporter.price_gift_bulk : TETRIO_ENV.catalog.supporter.price_bulk),
                o = s * (Math.min(TETRIO_ENV.catalog.supporter.normal_bulk_after, a) * (t ? TETRIO_ENV.catalog.supporter.normal_price_gift : TETRIO_ENV.catalog.supporter.normal_price)) + Math.max(0, a - TETRIO_ENV.catalog.supporter.normal_bulk_after) * (t ? TETRIO_ENV.catalog.supporter.normal_price_gift_bulk : TETRIO_ENV.catalog.supporter.normal_price_bulk),
                i = s * a * TETRIO_ENV.catalog.supporter.price,
                r = s * a * TETRIO_ENV.catalog.supporter.normal_price,
                l = parseInt(e("supporter_payment_block_duration").getAttribute("max"));
            e("supporter_payment_block_duration").style.background = `linear-gradient(to right, #FFF 0%, #FFF ${(a - 1) / (l - 1) * 100}%, #000A ${(a - 1) / (l - 1) * 100}%, #000A 100%)`, e("supporter_payment_block_duration").style.display = s > 1 ? "none" : "inline-block", e("supporter_payment_custom").style.display = s > 1 ? "none" : "inline-block", e("supporter_payment_price").innerHTML = s > 1 ? `<div>${s} recipients</div>${n !== o ? `<span class="slashed_price">€${o % 1 == 0 ? o : o.toFixed(2)}</span> ` : ""}€${n % 1 == 0 ? n : n.toFixed(2)}${n !== o ? ` <span class="offer special">${Math.round(100 * (1 - n / o))}% OFF!</span>` : ""}${n !== i ? ` <span class="offer">save ${Math.round(100 * (1 - n / r))}% ${n !== o ? "in total " : ""}by ${t ? "gifting" : "buying in bulk"}</span>` : ""}` : `<div>${a} month${1 === a ? "" : "s"}${a >= 12 ? ` <span>(${Math.floor(a / 12)} year${1 === Math.floor(a / 12) ? "" : "s"}${a % 12 == 0 ? "" : `, ${a % 12} month${a % 12 == 1 ? "" : "s"}`})</span>` : ""}</div>${n !== o ? `<span class="slashed_price">€${o % 1 == 0 ? o : o.toFixed(2)}</span> ` : ""}€${n % 1 == 0 ? n : n.toFixed(2)}${n !== o ? ` <span class="offer special">${Math.round(100 * (1 - n / o))}% OFF!</span>` : ""}${n !== i ? ` <span class="offer">save ${Math.round(100 * (1 - n / r))}% ${n !== o ? "in total " : ""}by ${t ? "gifting" : "buying in bulk"}</span>` : ""}`, 1 === a && e("supporter_payment_block_duration").setAttribute("max", 24)
        };
        a(), e("supporter_payment_block_gift").addEventListener("click", () => {
            e("supporter_payment_block_gift").classList.toggle("checked"), a()
        }), e("supporter_payment_block_duration").addEventListener("input", () => {
            a()
        }), e("supporter_payment_block_recipient").addEventListener("keyup", () => {
            a()
        }), e("supporter_payment_custom").addEventListener("click", () => {
            Ge("CUSTOM LENGTH", "enter an amount of months (max: 1200)", 1, 1200, 1, e("supporter_payment_block_duration").value, t => {
                t = Math.max(1, Math.min(1200, parseInt(t))), e("supporter_payment_block_duration").setAttribute("max", Math.max(24, t)), e("supporter_payment_block_duration").value = t, a()
            })
        })
    }

    function Ye(e, t) {
        switch (e) {
            case "supporter":
                D({
                    title: t.isgift ? "THANK YOU FOR GIFTING!" : "THANK YOU FOR SUPPORTING!",
                    msg: `</p>\n\t\t\t\t\t\t<center>\n\t\t\t\t\t\t\t<img src="/res/supporter-tag-shiny.png" />\n\t\t\t\t\t\t\t<p>${t.isgift ? `YOUR GIFT HAS BEEN SENT TO <b>${t.recipients.length > 1 ? `ALL ${t.recipients.length} LUCKY PLAYERS` : r(t.recipients[0].toUpperCase())}</b>!` : document.body.classList.contains("supporter_at_launch") ? "YOUR SUPPORTER STATUS HAS BEEN EXTENDED!" : "YOU ARE NOW A TETR.IO SUPPORTER!"}</p>\n\t\t\t\t\t\t</center>\n\t\t\t\t\t\t<p class="supporter_bumper">Thank you very, <b>very</b> much for ${t.isgift ? "gifting Supporter" : "supporting"} &mdash; ${t.isgift ? "their benefits should be applied instantly" : document.body.classList.contains("supporter_at_launch") ? "your tag has been extended" : "your benefits should be applied instantly"}. With your support, I can keep developing TETR.IO as we both love it. ${t.isgift ? "You're awesome!" : document.body.classList.contains("supporter_at_launch") ? "Stay awesome!" : "You're awesome!"}<span class="supporter_bumper_footer">&mdash; osk</span></p>\n\t\t\t\t\t<p>`,
                    classes: ["supporter_modal"],
                    buttons: [{
                        label: "CLOSE",
                        classes: [],
                        callback: e => {
                            e()
                        }
                    }]
                }), vs.play("supporter"), t.isgift || (document.body.classList.add("supporter"), document.body.classList.add("ceriad_exempt"), localStorage.setItem("wasLastSupporter", "Yes, that's it!"), document.cookie = "ceriad_exempt=1;max-age=31536000;domain=tetr.io", wt.expires = wt.hasSupporter ? wt.expires + 1e3 * t.months * 3600 * 24 * 30.5 : Date.now() + 1e3 * t.months * 3600 * 24 * 30.5, wt.hasSupporter = !0), wt.total = wt.total ? wt.total + t.price : t.price, Tt()
        }
    }

    function Ve(e, t) {
        const s = document.createElement("input");
        document.body.appendChild(s), s.value = e, s.select(), document.execCommand("copy"), document.body.removeChild(s), x(`${t || `"${e}"`} copied!`)
    }

    function Ze(t, s) {
        const a = document.createElement("div");
        a.className = `shout ${t}`, a.innerHTML = s, e("majorshouts").appendChild(a), setTimeout(() => {
            a.remove()
        }, 5e3), "ultra" === te.video.graphics && kn && ho.majorShoutStyles[t] && ho.majorShoutStyles[t]()
    }

    function Je(t) {
        if (!te.volume.music) return;
        const s = e("now_playing"),
            a = e("now_playing_jp");
        s.innerHTML = `${ks.ost[t].artist.toUpperCase()} - ${ks.ost[t].name.toUpperCase()}`, a.innerHTML = `${ks.ost[t].jpartist} - ${ks.ost[t].jpname}`, s.classList.remove("hidden"), a.classList.remove("hidden"), setTimeout(() => {
            s.classList.add("hidden"), a.classList.add("hidden")
        }, 5e3)
    }

    function Qe(t) {
        e("menus").setAttribute("data-menu-type", t)
    }

    function et(t, s) {
        (Xe[ze].onexit || (() => {}))(), ze = t, e("menus").querySelectorAll("[data-menuview]").forEach(e => {
            e.getAttribute("data-menuview") !== t && (e.classList.contains("hidden") || (e.classList.add("hidden"), setTimeout(() => {
                e.classList.contains("hidden") && e.classList.add("thidden")
            }, 666)))
        }), Xe[t].back || e("back").classList.add("hidden"), e("exit_electron").classList.toggle("hidden", "home" !== t);
        const a = () => {
            e("menus").setAttribute("data-menu-type", t), e("menus").querySelectorAll("[data-menuview]").forEach(e => {
                e.getAttribute("data-menuview") === t && (e.classList.remove("thidden"), e.getBoundingClientRect(), e.classList.remove("hidden"))
            }), Xe[t].back && e("back").classList.remove("hidden"), e("header_text").innerHTML = Xe[t].header, e("footer_text").innerHTML = Xe[t].footer, (Xe[t].onenter || (() => {}))()
        };
        s ? mt(a) : a(), Ce.bindGuide(Ae[t] || {})
    }
    U.ready((function(t) {
        let a;
        st(!0), et("home"), e("back").addEventListener("click", (function(e) {
            Xe[ze].back && ((Xe[ze].onback || (() => {}))(), et(Xe[ze].back))
        })), e("exit_electron").addEventListener("click", (function(e) {
            window.IS_ELECTRON && D({
                title: "EXIT TETR.IO?",
                msg: "",
                buttons: [{
                    label: "CANCEL",
                    classes: [],
                    callback: e => {
                        e()
                    }
                }, {
                    label: "EXIT",
                    classes: ["pri"],
                    callback: e => {
                        ut(), ct("see you next time!"), Y()
                    }
                }]
            })
        })), e("volume_tweak").addEventListener("click", (function(e) {
            et("config_bgmtweak")
        })), e("config_electron").addEventListener("click", (function(t) {
            window.IS_ELECTRON && (e("electron_ver").innerHTML = CLIENT_VERSION, window.EMERGENCY_MODE && e("config_electron_emergency").classList.remove("hidden"), e("electron_frameratelimit_1x").innerHTML = `${1 * (window.REFRESH_RATE || 60)} fps`, e("electron_frameratelimit_2x").innerHTML = `${2 * (window.REFRESH_RATE || 60)} fps`, e("electron_frameratelimit_4x").innerHTML = `${4 * (window.REFRESH_RATE || 60)} fps`, e("config_electron_vsync").classList.toggle("checked", !!window.VSYNC_ON), e("config_electron_frameratelimit").classList.toggle("disable-cfg", !!window.VSYNC_ON), et("config_electron"))
        })), e("config_export").addEventListener("click", (function(e) {
            const t = new Blob([JSON.stringify(te)], {
                    type: "application/json"
                }),
                s = document.createElement("a");
            s.download = "config.ttc", s.href = (window.webkitURL || window.URL).createObjectURL(t), s.dataset.downloadurl = ["application/json", s.download, s.href].join(":"), document.body.appendChild(s), s.click(), document.body.removeChild(s)
        })), e("play_solo").addEventListener("click", (function(e) {
            et("play1p")
        })), e("sig_about").addEventListener("click", (function(e) {
            et("about")
        })), e("about_blog").addEventListener("click", (function(e) {
            window.open("https://blog.osk.sh/", "_blank")
        })), e("about_issues").addEventListener("click", (function(e) {
            window.open("https://github.com/tetrio/issues", "_blank")
        })), e("about_discord").addEventListener("click", (function(e) {
            window.open("https://l.tetr.io/discord", "_blank")
        })), e("about_harddrop").addEventListener("click", (function(e) {
            window.open("https://discord.gg/harddrop", "_blank")
        })), e("about_legal").addEventListener("click", (function(e) {
            window.open("/about/", "_blank")
        })), e("about_support").addEventListener("click", (function(e) {
            window.open("/about/support/", "_blank")
        })), e("about_patchnotes").addEventListener("click", (function(e) {
            window.open("/about/patchnotes/", "_blank")
        })), e("about_music").addEventListener("click", (function(e) {
            it(e => {
                ks.playSmoothOrRandom(e)
            })
        })), e("about_supporter").addEventListener("click", (function(e) {
            Ke()
        })), e("about_desktop").addEventListener("click", (function(e) {
            window.open("/about/desktop/", "_blank")
        })), e("footer_github").addEventListener("click", (function(e) {
            window.open("https://github.com/tetrio/issues", "_blank")
        })), e("footer_discord").addEventListener("click", (function(e) {
            window.open("https://l.tetr.io/discord", "_blank")
        })), e("footer_supporter").addEventListener("click", (function(e) {
            Ke()
        })), e("footer_twitter").addEventListener("click", (function(e) {
            window.open("https://twitter.com/tetriogame", "_blank")
        })), e("footer_desktop").addEventListener("click", (function(e) {
            window.open("/about/desktop/", "_blank")
        })), e("game_40l").addEventListener("click", (function(e) {
            et("40l")
        })), e("game_blitz").addEventListener("click", (function(e) {
            et("blitz")
        })), e("game_zen").addEventListener("click", (function(e) {
            et("zen")
        })), e("game_custom").addEventListener("click", (function(e) {
            et("custom")
        })), e("start_40l").addEventListener("click", () => {
            Ft.play40L({
                song: e("music_picker_40l").getAttribute("data-song")
            }), fe(!0), e("music_picker_results").setAttribute("data-song", e("music_picker_40l").getAttribute("data-song")), e("music_picker_results").innerHTML = e("music_picker_40l").innerHTML
        }), e("start_blitz").addEventListener("click", () => {
            Ft.playBlitz({
                song: "hyper-velocity"
            }), fe(!0)
        }), e("start_zen").addEventListener("click", () => {
            Ft.playZen({}), fe(!0)
        }), e("zen_destroy").addEventListener("click", () => {
            D({
                title: "DESTROY ZEN PROGRESS?",
                msg: 'you\'ll be reset to LEVEL 1 and 0 SCORE, with an empty board to start anew.</p><p class="modal_also">this cannot be undone.',
                classes: ["crash_modal"],
                buttons: [{
                    label: "CANCEL",
                    classes: [],
                    callback: e => {
                        e()
                    }
                }, {
                    label: "RESET ZEN",
                    classes: ["pri"],
                    callback: e => {
                        e(), D({
                            title: "REALLY DESTROY ZEN PROGRESS?",
                            msg: "ARE YOU SURE YOU WON'T REGRET DESTROYING YOUR ZEN PROGRESS???",
                            classes: ["crash_modal", "shudder"],
                            buttons: [{
                                label: "CANCEL",
                                classes: [],
                                callback: e => {
                                    e()
                                }
                            }, {
                                label: "I'M CERTAIN",
                                classes: ["pri"],
                                callback: e => {
                                    Ft.resetZen(), Ft.saveZen(Ft.getZen()), I("it's gone!"), e()
                                }
                            }]
                        })
                    }
                }]
            })
        }), e("start_custom").addEventListener("click", () => {
            Ft.playCustom({
                song: e("music_picker_custom").getAttribute("data-song")
            }), fe(!0), e("music_picker_results").setAttribute("data-song", e("music_picker_custom").getAttribute("data-song")), e("music_picker_results").innerHTML = e("music_picker_custom").innerHTML
        }), e("start_results").addEventListener("click", () => {
            Ft.playAgain({
                song: e("music_picker_results").getAttribute("data-song")
            }), fe(!0)
        }), e("sig_config").addEventListener("click", (function(e) {
            et("config")
        })), document.addEventListener("click", (function(e) {
            e.target.closest("[data-hit]") && vs.play(`menu${e.target.closest("[data-hit]").getAttribute("data-hit")}`)
        })), document.addEventListener("mouseover", (function(e) {
            e.target.closest("[data-hover]") && e.target.closest("[data-hover]").getAttribute("data-hover") && (!a || !a.closest("[data-hover]") || a && a.closest("[data-hover]").outerHTML !== e.target.closest("[data-hover]").outerHTML) && vs.play(`menu${e.target.closest("[data-hover]").getAttribute("data-hover")}`), a = e.target.closest("[data-hover]")
        })), document.addEventListener("click", (function(e) {
            e.target.classList.contains("collapse_target") && e.target.closest(".collapsible") && e.target.closest(".collapsible").classList.toggle("collapsed")
        })), document.addEventListener("click", (function(e) {
            e.target.classList.contains("music_picker") && it(t => {
                if (e.target.setAttribute("data-song", t), ks.ost[t]) e.target.innerHTML = `${ks.ost[t].artist.toLowerCase()} - ${ks.ost[t].name.toLowerCase()}`;
                else switch (t) {
                    case "RANDOM":
                        e.target.innerHTML = "RANDOM";
                        break;
                    case "RANDOMcalm":
                        e.target.innerHTML = "RANDOM: CALM";
                        break;
                    case "RANDOMbattle":
                        e.target.innerHTML = "RANDOM: BATTLE";
                        break;
                    default:
                        e.target.innerHTML = t
                }
                e.target.dispatchEvent(new Event("input"))
            })
        })), document.addEventListener("click", (function(e) {
            e.target.classList.contains("replayid") && Ve(`https://tetr.io/#${e.target.innerHTML}`, "replay link")
        })), document.addEventListener("click", (function(t) {
            t.target.classList.contains("tab") && (s(`.tab[data-scope="${t.target.getAttribute("data-scope")}"]`).forEach(e => {
                e.classList.remove("pressed"), e.classList.remove("active")
            }), t.target.classList.add("pressed"), t.target.classList.add("active"), s(`.tab_content[data-scope="${t.target.getAttribute("data-scope")}"]`).forEach(e => {
                e.classList.add("hidden")
            }), t.target.getAttribute("data-target") && e(t.target.getAttribute("data-target")).classList.remove("hidden"))
        })), e("list_request_back").addEventListener("click", (function(t) {
            Ce.pop(), e("list_request").classList.add("hidden")
        })), Be = {
            gravitymode: "relaxed",
            gravitystatic: 20,
            counters: "off",
            leveling: "on",
            garbagemode: "off",
            cheeselayer_height: 6,
            cheesetimer_interval: 4,
            cheesemessiness: 100
        }, document.addEventListener("click", (function(e) {
            e.target.classList.contains("panel_option") && (e.target.closest(".panel_optionset").querySelectorAll(".panel_option").forEach(e => {
                e.classList.remove("selected")
            }), e.target.classList.add("selected"), Be[e.target.getAttribute("data-key")] = e.target.getAttribute("data-value"), De && De.pullZenConfig())
        })), document.addEventListener("input", (function(e) {
            e.target.classList.contains("panel_input") && (Be[e.target.getAttribute("data-key")] = "number" === e.target.getAttribute("type") ? parseFloat(e.target.value) : e.target.value, De && De.pullZenConfig())
        }))
    })), window.SHOW_SUPPORTER_DIALOG = (e = "SUPPORT TETR.IO") => {
        Ke(e)
    };
    let tt = !1;

    function st(t) {
        t ? (tt || ((Xe[ze].onreenter || (() => {}))(), bt(), tt = t), e("menus").classList.remove("hidden")) : (tt && ((Xe[ze].onexit || (() => {}))(), yt(), tt = t, X.unmountGroup("main")), e("menus").classList.add("hidden"))
    }

    function at() {
        e("list_request").classList.contains("hidden") || (Ce.pop(), e("list_request").classList.add("hidden"))
    }
    let nt = () => {};

    function ot(t, s, a) {
        nt = s;
        const n = e("list_request_scroller");
        for (; n.firstChild;) n.removeChild(n.firstChild);
        t.forEach(t => {
            const s = document.createElement("div");
            if (s.classList.add("scroller_item"), s.classList.add("ns"), s.setAttribute("data-id", t.id), s.setAttribute("data-hover", "tap"), s.setAttribute("data-hit", "click"), s.setAttribute("data-keybind", t.key || "X-NOKEY"), n.appendChild(s), t.image) {
                const e = document.createElement("img");
                e.src = t.image, s.appendChild(e), s.classList.add("has_image")
            }
            t.classes && s.classList.add(...t.classes), t.attributes && Object.keys(t.attributes).forEach(e => {
                s.setAttribute(e, t.attributes[e])
            });
            const a = document.createElement("h1");
            if (a.innerHTML = t.name, s.appendChild(a), t.description) {
                const e = document.createElement("p");
                e.innerHTML = t.description, s.appendChild(e), s.classList.add("has_description")
            }
            s.addEventListener("click", (function(t) {
                Ce.pop(), e("list_request").classList.add("hidden"), nt(s.getAttribute("data-id"))
            }))
        }), e("list_request_back").classList.toggle("hidden", !a), e("list_request").classList.remove("hidden"), Ce.push(), Ce.bindGuide(Ae.list_request)
    }

    function it(e) {
        const t = [{
            id: "RANDOM",
            name: "RANDOM",
            description: "pick a completely random BGM for me"
        }, {
            id: "RANDOMcalm",
            name: "RANDOM: CALM",
            description: "pick a random calmer BGM for me"
        }, {
            id: "RANDOMbattle",
            name: "RANDOM: BATTLE",
            description: "pick a random intenser battle BGM for me"
        }];
        Object.keys(ks.ost).forEach(e => {
            ks.ost[e].hidden || t.push({
                id: e,
                name: ks.ost[e].name,
                description: `${ks.ost[e].artist} - ${ks.ost[e].genre}`
            })
        }), ot(t, t => {
            e(t)
        }, !0)
    }

    function rt(e) {
        ot([{
            id: "retry",
            name: "RETRY",
            key: "retry"
        }, {
            id: "back",
            name: "BACK TO TITLE",
            key: "exit"
        }], t => {
            e(t)
        })
    }

    function lt() {
        st(!1), et("none"), ks.stop(), De && (De.end(), De.destroy(), maingame = void 0)
    }

    function ct(t) {
        e("afterloader_text").innerHTML = t, e("afterloader").classList.remove("hidden"), document.activeElement.blur()
    }

    function dt() {
        e("afterloader").classList.add("hidden")
    }
    let pt = 0;

    function ut() {
        pt = (new Date).getTime(), e("kuro").classList.remove("hidden"), document.activeElement.blur()
    }

    function mt(e) {
        const t = 500 - ((new Date).getTime() - pt);
        t < 1 ? e() : setTimeout(() => {
            e()
        }, t)
    }

    function gt() {
        mt(() => {
            e("kuro").classList.add("hidden")
        })
    }
    let ht = 0,
        ft = null,
        _t = !1;

    function bt() {
        0 === ht && (document.body.classList.remove("ingame"), document.body.getBoundingClientRect(), ft && clearTimeout(ft), _t && Ce.engage()), ht++
    }

    function yt() {
        0 === (ht = Math.max(0, ht - 1)) && (ft && clearTimeout(ft), ft = setTimeout(() => {
            document.body.classList.add("ingame"), kt()
        }, 1e3), _t = Ce.isEngaged(), Ce.disengage())
    }

    function vt(e) {
        try {
            _paq.push(["trackEvent", "Advertising", "Impression", e])
        } catch (e) {}
    }

    function kt() {
        Math.random() < .5 ? (e("enter_matchmaking").insertAdjacentElement("beforebegin", e("tetr-io_728x90_6")), e("tetr-io_728x90_6").classList.remove("ceriad_bg_r"), e("tetr-io_728x90_6").classList.add("ceriad_bg_rt")) : (e("enter_matchmaking").insertAdjacentElement("afterend", e("tetr-io_728x90_6")), e("tetr-io_728x90_6").classList.remove("ceriad_bg_rt"), e("tetr-io_728x90_6").classList.add("ceriad_bg_r")), Math.random() < .33 ? e("results_starter_anchor").insertAdjacentElement("beforebegin", e("tetr-io_728x90_7")) : Math.random() < .67 ? e("results_starter_anchor").insertAdjacentElement("afterend", e("tetr-io_728x90_7")) : e("results_replayinfo_anchor").insertAdjacentElement("afterend", e("tetr-io_728x90_7")), e("roomview").classList.toggle("ceriad_right_aligned_experiment", Math.random() >= .5), Math.random() < .5 ? (e("solo_menu").insertAdjacentElement("afterbegin", e("tetr-io_728x90_2")), e("tetr-io_728x90_2").classList.remove("ceriad_bg_rb"), e("tetr-io_728x90_2").classList.add("ceriad_bg_rt")) : (e("solo_menu").insertAdjacentElement("beforeend", e("tetr-io_728x90_2")), e("tetr-io_728x90_2").classList.remove("ceriad_bg_rt"), e("tetr-io_728x90_2").classList.add("ceriad_bg_rb")), Math.random() < .5 ? (e("multi_menu").insertAdjacentElement("afterbegin", e("tetr-io_728x90_3")), e("tetr-io_728x90_3").classList.remove("ceriad_bg_rb"), e("tetr-io_728x90_3").classList.add("ceriad_bg_rt")) : (e("multi_menu").insertAdjacentElement("beforeend", e("tetr-io_728x90_3")), e("tetr-io_728x90_3").classList.remove("ceriad_bg_rt"), e("tetr-io_728x90_3").classList.add("ceriad_bg_rb"))
    }
    U.ready((function(s) {
        function a(t) {
            0 !== ht && e("social").classList.contains("hiding") && e("afterloader").classList.contains("hidden") && Object.keys(ae).forEach(e => {
                if (ae[e].includes(me(t) || t.detail.toUpperCase()) && e.startsWith("menu")) {
                    if (("menuConfirm" === e || "menuBack" === e) && (t.repeat || "gprepeat" === t.type)) return;
                    return ["input", "textarea"].includes(document.activeElement.tagName.toLowerCase()) ? void(Ce.isEngaged() && "menuConfirm" === e && document.activeElement.blur()) : (Ce.action(e.substring(4).toLowerCase()), t.stopPropagation(), t.preventDefault(), void(Ce.isEngaged() || (vs.play("ribbon_on"), Ce.engage())))
                }
            })
        }
        document.addEventListener("keydown", a, !1), document.addEventListener("gpdown", a, !1), document.addEventListener("gprepeat", a, !1), document.addEventListener("mousemove", (function(e) {
            0 !== ht && Ce.isEngaged() && (vs.play("ribbon_off"), Ce.disengage())
        }), {
            passive: !0
        }), document.addEventListener("wheel", (function(e) {
            0 !== ht && Ce.isEngaged() && (vs.play("ribbon_off"), Ce.disengage())
        }), {
            passive: !0
        });
        let n, o = !0,
            i = 0;
        window.addEventListener("beforeunload", (function(t) {
            if (window.IS_ELECTRON)
                if (F) Ws && Ws.isConnected() && Ws.abort();
                else {
                    if (o) return o = !1, i = 0, D({
                        title: "EXIT TETR.IO?",
                        msg: "",
                        onskip: () => {
                            i = 0, o = !0
                        },
                        buttons: [{
                            label: "CANCEL",
                            classes: [],
                            callback: e => {
                                i = 0, o = !0, e()
                            }
                        }, {
                            label: "EXIT",
                            classes: ["pri"],
                            callback: e => {
                                o = !0, i = 0, Ws && Ws.isConnected() && Ws.abort(), ut(), ct("see you next time!"), Y()
                            }
                        }]
                    }), t.preventDefault(), t.returnValue = "Exit TETR.IO?", "Exit TETR.IO?";
                    if (!(++i >= 5)) return t.preventDefault(), t.returnValue = "Exit TETR.IO?", "Exit TETR.IO?";
                    Ws && Ws.isConnected() && Ws.abort(), Y(), ut(), ct("see you next time!")
                }
            else {
                if (!F && document.body.classList.contains("ingame_phys") && e("menus").classList.contains("hidden") && 0 === ht) return t.preventDefault(), t.returnValue = "You are still ingame. Closing this tab will disconnect you. You will lose the game and may receive a penalty!", "You are still ingame. Closing this tab will disconnect you. You will lose the game and may receive a penalty!";
                Ws && Ws.isConnected() && Ws.abort()
            }
        })), window.addEventListener("hashchange", (function(e) {
            window.location.href = `/${window.location.hash}`, F = !0, window.location.reload()
        })), window.addEventListener("focus", (function(e) {
            document.body.classList.remove("nofocus"), Ja(), n && (clearTimeout(n), n = null)
        })), window.addEventListener("blur", (function(e) {
            document.body.classList.add("nofocus"), n && (clearTimeout(n), n = null), n = setTimeout(() => {
                Za(), n = null
            }, 6e5)
        })), window.addEventListener("visibilitychange", (function(e) {
            !1 !== te.volume.oof && ("visible" === document.visibilityState ? ks.setVolume(te.volume.music) : ks.setVolume(0)), "visible" === document.visibilityState ? An() : An(10)
        })), e("ingame_chat_input").addEventListener("focus", (function(e) {
            document.body.classList.add("chatfocus")
        })), e("ingame_chat_input").addEventListener("blur", (function(e) {
            document.body.classList.remove("chatfocus")
        })), e("menus").addEventListener("dragover", e => {
            e.stopPropagation(), e.preventDefault(), e.dataTransfer.dropEffect = "copy"
        }, !1);
        let r, l = "";

        function c(t) {
            "results" !== ze || e("menus").classList.contains("hidden") || e("results").classList.contains("isreplay") || 1 !== ht || Object.keys(ae).forEach(s => {
                ae[s].includes(me(t) || t.detail.toUpperCase()) && "retry" === s && e("start_results").click()
            })
        }

        function d(t) {
            e("list_request").classList.contains("hidden") || Object.keys(ae).forEach(s => {
                ae[s].includes(me(t) || t.detail.toUpperCase()) && e("list_request").querySelectorAll(".scroller_item").forEach(e => {
                    e.getAttribute("data-keybind") !== s || e.click()
                })
            })
        }
        window.DEVHOOK_LOAD_REPLAY_RAW = t => {
            Ft.showResults(t.endcontext, {
                gametype: t.endcontext.gametype,
                back: "home",
                isreplay: !0,
                username: t.user.username,
                ts: t.ts,
                replay: t
            }), e("results").classList.add("fakereplay"), l = t._id
        }, e("menus").addEventListener("drop", t => {
            t.stopPropagation(), t.preventDefault();
            const s = t.dataTransfer.files[0];
            if (!s) return;
            if (!/\.tt([rpc]|rm)$/.test(s.name)) return void T("TETR.IO cannot open this file");
            if (Ws && !Ws.isBackground()) return void T("you cannot drop a file onto TETR.IO while connected to live servers");
            if (document.body.classList.contains("ingame")) return void T("you cannot drop a file onto TETR.IO while ingame");
            const a = new FileReader;
            a.onload = () => {
                dt();
                try {
                    const t = JSON.parse(a.result);
                    /\.ttr$/.test(s.name) ? (Ft.showResults(t.endcontext, {
                        gametype: t.endcontext.gametype,
                        back: "home",
                        isreplay: !0,
                        username: t.user.username,
                        ts: t.ts,
                        replay: t
                    }), (l = t._id) && k.get(`/api/games/${encodeURIComponent(t._id)}/exists`, {}, !0).then(s => {
                        t._id === l && (s.exists || e("results").classList.add("fakereplay"))
                    }, e => {})) : /\.ttrm$/.test(s.name) ? (Ft.showMultiLog({
                        ...t,
                        back: "home"
                    }), (l = t._id) && k.get(`/api/games/${encodeURIComponent(t._id)}/exists`, {}, !0).then(s => {
                        t._id === l && (s.exists || e("multilogview").classList.add("noreplay"))
                    }, e => {})) : /\.ttp$/.test(s.name) ? (Ft.setGameOpts(t), I("custom game loaded!")) : /\.ttc$/.test(s.name) && D({
                        title: "IMPORT CONFIG?",
                        msg: 'are you sure you wish to import this CONFIG file? it will override your current CONFIG.</p><p class="modal_warning">DO NOT IMPORT A CONFIG YOU DO NOT TRUST!</p><p class="modal_also">your current CONFIG will be lost.',
                        buttons: [{
                            label: "CANCEL",
                            classes: [],
                            callback: e => {
                                e()
                            }
                        }, {
                            label: "IMPORT",
                            classes: ["sec"],
                            callback: e => {
                                e(), Object.assign(te, t), ue(), ce(), I("config loaded. you must hit F5 for all the changes to properly take effect!"), Ws && Ws.isConnected() && Ws.updateHandling()
                            }
                        }]
                    })
                } catch (e) {
                    return T("file load failed!"), void console.log(e)
                }
            }, ct("loading file…"), a.readAsText(s)
        }, !1), document.addEventListener("keydown", e => {
            9 === e.keyCode && e.preventDefault()
        }, !1), document.addEventListener("keydown", c, !1), document.addEventListener("gpdown", c, !1), document.addEventListener("keydown", d, !1), document.addEventListener("gpdown", d, !1), document.addEventListener("mousemove", (function(e) {
            r ? clearTimeout(r) : document.body.classList.remove("idlemouse"), r = setTimeout(() => {
                document.body.classList.add("idlemouse"), r = null
            }, 5e3)
        })), t("style.darkreader") && x({
            msg: "you seem to be using the extension DARK READER. this extension WILL mess with the TETR.IO interface, and may cause performance issues. please consider disabling it!",
            color: "#FFD800",
            icon: "warning",
            timeout: 15e3
        })
    }));
    const wt = {
        hasSupporter: !1,
        expires: 0,
        total: 0
    };
    U.ready((function(a) {
        e("config_account").addEventListener("click", (function(a) {
            ct("requesting account data…");
            const n = `SESS-${Math.floor(Math.random() * Number.MAX_SAFE_INTEGER)}`;
            k.get("/api/server/environment", {}, !1, !1, !1, {
                "X-Session-ID": n
            }).then(async a => {
                k.get("/api/users/me", {}, !0, !1, !1, {
                    "X-Session-ID": n,
                    "X-Connection-ID": await z.esc(Uint8Array.from(atob(a.vx), e => e.charCodeAt(0)), Le.get())
                }).then(a => {
                    e("config_account_username").value = a.user.username, e("config_account_username_field").value = a.user.username.toUpperCase(), a.user.avatar_revision ? e("config_account_avatar").innerHTML = `<img class="avatar" src="/user-content/avatars/${a.user._id}.jpg?rv=${a.user.avatar_revision}" /> ${a.user.username.toUpperCase()}` : e("config_account_avatar").innerHTML = `<img class="avatar" src="${u(a.user._id)}" /> No avatar set`, e("config_account_banner_link").setAttribute("href", `https://ch.tetr.io/u/${a.user.username}`), e("config_account_bio_link").setAttribute("href", `https://ch.tetr.io/u/${a.user.username}`), a.user.banner_revision ? e("config_account_banner").innerHTML = `<img class="banner" src="/user-content/banners/${a.user._id}.jpg?rv=${a.user.banner_revision}" /> ${a.user.username.toUpperCase()}` : e("config_account_banner").innerHTML = '<img class="banner" src="/res/banner.png" /> No banner set', e("config_account_bio").value = a.user.bio || "", a.user.email ? (e("config_account_email_warning").classList.add("hidden"), e("config_account_email").value = a.user.email) : (e("config_account_email_warning").classList.remove("hidden"), e("config_account_email").value = ""), e("config_account_privacy_showwon").classList.toggle("checked", !1 !== a.user.privacy_showwon), e("config_account_privacy_showplayed").classList.toggle("checked", !1 !== a.user.privacy_showplayed), e("config_account_privacy_showgametime").classList.toggle("checked", !1 !== a.user.privacy_showgametime), e("config_account_privacy_showcountry").classList.toggle("checked", !1 !== a.user.privacy_showcountry), e("config_account_country").innerHTML = `<img class="flag" src="/res/flags/${(a.user.country || "xx").toLowerCase()}.png" /> ${ro[a.user.country || "XX"]}`, wt.hasSupporter = a.user.supporter, wt.expires = a.user.supporter_expires, wt.total = a.user.total_supported, Tt(), t("#account_connection_discord p").innerHTML = a.user.connections.discord ? r(a.user.connections.discord.username) : "Click to link", e("account_connection_discord").classList.toggle("linked", !!a.user.connections.discord), e("config_account_totp_label").innerHTML = a.user.totp.enabled ? "ENABLED" : "NOT ENABLED", e("config_account_totp_tokens").innerHTML = a.user.totp.enabled ? `you have <b>${a.user.totp.codes_remaining}</b>/8 recovery codes remaining.` : "", e("config_account_totp_enable").classList.toggle("hidden", !!a.user.totp.enabled), e("config_account_totp_resetrecovery").classList.toggle("hidden", !a.user.totp.enabled), e("config_account_totp_disable").classList.toggle("hidden", !a.user.totp.enabled), document.body.classList.toggle("uses2fa", !!a.user.totp && !!a.user.totp.enabled), s(".config_account_privacy_privatemode").forEach(e => {
                        e.classList.toggle("pressed", e.id === `config_account_privacy_privatemode_${a.user.privacy_privatemode || "public"}`)
                    }), s(".config_account_privacy_status_shallow").forEach(e => {
                        e.classList.toggle("pressed", e.id === `config_account_privacy_status_shallow_${a.user.privacy_status_shallow || "everyone"}`)
                    }), e("config_account_privacy_status_deep_friends").classList.toggle("disabled", "nobody" === a.user.privacy_status_shallow), e("config_account_privacy_status_deep_everyone").classList.toggle("disabled", ["nobody", "friends"].includes(a.user.privacy_status_shallow)), s(".config_account_privacy_status_deep").forEach(e => {
                        e.classList.toggle("pressed", e.id === `config_account_privacy_status_deep_${a.user.privacy_status_deep || "everyone"}`)
                    }), e("config_account_privacy_status_exact_friends").classList.toggle("disabled", "nobody" === a.user.privacy_status_deep), e("config_account_privacy_status_exact_everyone").classList.toggle("disabled", ["nobody", "friends"].includes(a.user.privacy_status_deep)), s(".config_account_privacy_status_exact").forEach(e => {
                        e.classList.toggle("pressed", e.id === `config_account_privacy_status_exact_${a.user.privacy_status_exact || "friends"}`)
                    }), s(".config_account_privacy_dm").forEach(e => {
                        e.classList.toggle("pressed", e.id === `config_account_privacy_dm_${a.user.privacy_dm || "everyone"}`)
                    }), document.body.classList.toggle("dmfriendonly", "everyone" !== (a.user.privacy_dm || "everyone")), s(".config_account_privacy_invite").forEach(e => {
                        e.classList.toggle("pressed", e.id === `config_account_privacy_invite_${a.user.privacy_invite || "friends"}`)
                    }), dt(), et("config_account")
                }, e => {
                    dt(), S(e)
                })
            }, e => {
                dt(), S(e)
            })
        })), e("config_account_supporter_support").addEventListener("click", (function(e) {
            Ke()
        })), e("config_account_logout").addEventListener("click", (function(t) {
            document.body.classList.contains("trapped") || "Attempting to bypass a ban will escalate it to a permanent ban." === localStorage.getItem("trapped") || D({
                title: "LOG OUT?",
                msg: `log out from <span class="inline_self">${e("config_account_username_field").value}</span>?`,
                buttons: [{
                    label: "CANCEL",
                    classes: [],
                    callback: e => {
                        e()
                    }
                }, {
                    label: "LOG OUT",
                    classes: ["pri"],
                    callback: e => {
                        ut(), ct("see you next time!"), z.logout(), U.update(!0)
                    }
                }]
            })
        })), e("config_account_logoutall").addEventListener("click", (function(t) {
            document.body.classList.contains("trapped") || "Attempting to bypass a ban will escalate it to a permanent ban." === localStorage.getItem("trapped") || D({
                title: "LOG OUT ALL?",
                msg: `log out all devices logged into <span class="inline_self">${e("config_account_username_field").value}</span>, including this one? this will disconnect you everywhere - use it if you forgot to log out somewhere.`,
                buttons: [{
                    label: "CANCEL",
                    classes: [],
                    callback: e => {
                        e()
                    }
                }, {
                    label: "LOG OUT ALL",
                    classes: ["sec"],
                    callback: e => {
                        ut(), ct("logging out all…"), k.post("/api/users/cycle", {}, !0).then(e => {
                            ct("see you next time!"), z.logout(), U.update(!0)
                        }, e => {
                            dt(), S(e)
                        })
                    }
                }]
            })
        })), e("config_account_password_save").addEventListener("click", (function(t) {
            if (document.body.classList.contains("trapped") || "Attempting to bypass a ban will escalate it to a permanent ban." === localStorage.getItem("trapped")) return;
            const s = e("config_account_password").value,
                a = e("config_account_password_again").value;
            s ? s === a ? z.requestPassword((t, a) => {
                ct("saving new account data…"), k.post("/api/users/setPassword", {
                    old: t,
                    new: s,
                    totp: a
                }, !0).then(t => {
                    e("config_account_password").value = "", e("config_account_password_again").value = "", I("password changed!"), ct("see you next time!"), z.logout(), U.update(!0)
                }, e => {
                    dt(), S(e)
                })
            }) : T("those passwords don't match") : T("you must enter a new password")
        })), e("config_account_privacy_showwon").addEventListener("click", (function(t) {
            e("config_account_privacy_showwon").classList.toggle("checked")
        })), e("config_account_privacy_showplayed").addEventListener("click", (function(t) {
            e("config_account_privacy_showplayed").classList.toggle("checked")
        })), e("config_account_privacy_showgametime").addEventListener("click", (function(t) {
            e("config_account_privacy_showgametime").classList.toggle("checked")
        })), e("config_account_privacy_showcountry").addEventListener("click", (function(t) {
            e("config_account_privacy_showcountry").classList.toggle("checked")
        })), e("config_account_privacy_privatemode_private").addEventListener("click", (function(e) {
            s(".config_account_privacy_privatemode").forEach(t => {
                t.classList.toggle("pressed", t.id === e.target.id)
            })
        })), e("config_account_privacy_privatemode_public").addEventListener("click", (function(e) {
            s(".config_account_privacy_privatemode").forEach(t => {
                t.classList.toggle("pressed", t.id === e.target.id)
            })
        })), e("config_account_privacy_status_shallow_nobody").addEventListener("click", (function(t) {
            s(".config_account_privacy_status_shallow").forEach(e => {
                e.classList.toggle("pressed", e.id === t.target.id)
            }), e("config_account_privacy_status_deep_friends").classList.add("disabled"), e("config_account_privacy_status_deep_everyone").classList.add("disabled"), e("config_account_privacy_status_deep_friends").classList.contains("pressed") && e("config_account_privacy_status_deep_nobody").click(), e("config_account_privacy_status_deep_everyone").classList.contains("pressed") && e("config_account_privacy_status_deep_nobody").click()
        })), e("config_account_privacy_status_shallow_friends").addEventListener("click", (function(t) {
            s(".config_account_privacy_status_shallow").forEach(e => {
                e.classList.toggle("pressed", e.id === t.target.id)
            }), e("config_account_privacy_status_deep_friends").classList.remove("disabled"), e("config_account_privacy_status_deep_everyone").classList.add("disabled"), e("config_account_privacy_status_deep_everyone").classList.contains("pressed") && e("config_account_privacy_status_deep_friends").click()
        })), e("config_account_privacy_status_shallow_everyone").addEventListener("click", (function(t) {
            s(".config_account_privacy_status_shallow").forEach(e => {
                e.classList.toggle("pressed", e.id === t.target.id)
            }), e("config_account_privacy_status_deep_friends").classList.remove("disabled"), e("config_account_privacy_status_deep_everyone").classList.remove("disabled")
        })), e("config_account_privacy_status_deep_nobody").addEventListener("click", (function(t) {
            s(".config_account_privacy_status_deep").forEach(e => {
                e.classList.toggle("pressed", e.id === t.target.id)
            }), e("config_account_privacy_status_exact_friends").classList.add("disabled"), e("config_account_privacy_status_exact_everyone").classList.add("disabled"), e("config_account_privacy_status_exact_friends").classList.contains("pressed") && e("config_account_privacy_status_exact_nobody").click(), e("config_account_privacy_status_exact_everyone").classList.contains("pressed") && e("config_account_privacy_status_exact_nobody").click()
        })), e("config_account_privacy_status_deep_friends").addEventListener("click", (function(t) {
            s(".config_account_privacy_status_deep").forEach(e => {
                e.classList.toggle("pressed", e.id === t.target.id)
            }), e("config_account_privacy_status_exact_friends").classList.remove("disabled"), e("config_account_privacy_status_exact_everyone").classList.add("disabled"), e("config_account_privacy_status_exact_everyone").classList.contains("pressed") && e("config_account_privacy_status_exact_friends").click()
        })), e("config_account_privacy_status_deep_everyone").addEventListener("click", (function(t) {
            s(".config_account_privacy_status_deep").forEach(e => {
                e.classList.toggle("pressed", e.id === t.target.id)
            }), e("config_account_privacy_status_exact_friends").classList.remove("disabled"), e("config_account_privacy_status_exact_everyone").classList.remove("disabled")
        })), e("config_account_privacy_status_exact_nobody").addEventListener("click", (function(e) {
            s(".config_account_privacy_status_exact").forEach(t => {
                t.classList.toggle("pressed", t.id === e.target.id)
            })
        })), e("config_account_privacy_status_exact_friends").addEventListener("click", (function(e) {
            s(".config_account_privacy_status_exact").forEach(t => {
                t.classList.toggle("pressed", t.id === e.target.id)
            })
        })), e("config_account_privacy_status_exact_everyone").addEventListener("click", (function(e) {
            s(".config_account_privacy_status_exact").forEach(t => {
                t.classList.toggle("pressed", t.id === e.target.id)
            })
        })), e("config_account_privacy_dm_nobody").addEventListener("click", (function(e) {
            s(".config_account_privacy_dm").forEach(t => {
                t.classList.toggle("pressed", t.id === e.target.id)
            }), document.body.classList.add("dmfriendonly")
        })), e("config_account_privacy_dm_friends").addEventListener("click", (function(e) {
            s(".config_account_privacy_dm").forEach(t => {
                t.classList.toggle("pressed", t.id === e.target.id)
            }), document.body.classList.add("dmfriendonly")
        })), e("config_account_privacy_dm_everyone").addEventListener("click", (function(e) {
            s(".config_account_privacy_dm").forEach(t => {
                t.classList.toggle("pressed", t.id === e.target.id)
            }), document.body.classList.remove("dmfriendonly")
        })), e("config_account_privacy_invite_nobody").addEventListener("click", (function(e) {
            s(".config_account_privacy_invite").forEach(t => {
                t.classList.toggle("pressed", t.id === e.target.id)
            })
        })), e("config_account_privacy_invite_friends").addEventListener("click", (function(e) {
            s(".config_account_privacy_invite").forEach(t => {
                t.classList.toggle("pressed", t.id === e.target.id)
            })
        })), e("config_account_privacy_invite_everyone").addEventListener("click", (function(e) {
            s(".config_account_privacy_invite").forEach(t => {
                t.classList.toggle("pressed", t.id === e.target.id)
            })
        })), e("config_account_email_save").addEventListener("click", (function(t) {
            const s = e("config_account_email").value;
            s ? z.requestPassword((t, a) => {
                ct("saving new account data…"), k.post("/api/users/setEmail", {
                    password: t,
                    email: s,
                    totp: a
                }, !0).then(t => {
                    I("email changed!"), e("config_account_email_warning").classList.add("hidden"), dt()
                }, e => {
                    dt(), S(e)
                })
            }) : T("you must enter a new email")
        })), e("config_account_privacy_save").addEventListener("click", (function(t) {
            ct("saving new account data…"), k.post("/api/users/setPreferences", {
                privacy_showwon: e("config_account_privacy_showwon").classList.contains("checked"),
                privacy_showplayed: e("config_account_privacy_showplayed").classList.contains("checked"),
                privacy_showgametime: e("config_account_privacy_showgametime").classList.contains("checked"),
                privacy_showcountry: e("config_account_privacy_showcountry").classList.contains("checked"),
                privacy_privatemode: e("config_account_privacy_privatemode_private").classList.contains("pressed") ? "private" : "public",
                privacy_status_shallow: e("config_account_privacy_status_shallow_nobody").classList.contains("pressed") ? "nobody" : e("config_account_privacy_status_shallow_friends").classList.contains("pressed") ? "friends" : "everyone",
                privacy_status_deep: e("config_account_privacy_status_deep_nobody").classList.contains("pressed") ? "nobody" : e("config_account_privacy_status_deep_friends").classList.contains("pressed") ? "friends" : "everyone",
                privacy_status_exact: e("config_account_privacy_status_exact_nobody").classList.contains("pressed") ? "nobody" : e("config_account_privacy_status_exact_friends").classList.contains("pressed") ? "friends" : "everyone",
                privacy_dm: e("config_account_privacy_dm_nobody").classList.contains("pressed") ? "nobody" : e("config_account_privacy_dm_friends").classList.contains("pressed") ? "friends" : "everyone",
                privacy_invite: e("config_account_privacy_invite_nobody").classList.contains("pressed") ? "nobody" : e("config_account_privacy_invite_friends").classList.contains("pressed") ? "friends" : "everyone"
            }, !0).then(e => {
                I("privacy preferences changed!"), dt()
            }, e => {
                dt(), S(e)
            })
        })), e("config_account_country_change").addEventListener("click", (function(t) {
            if (qe()) return;
            const s = [];
            Object.keys(ro).forEach(e => {
                ["XX", "XM"].includes(e) || s.push({
                    id: e,
                    name: `<img class="flag" style="height: 0.88em; vertical-align: middle;" src="/res/flags/${e.toLowerCase()}.png" /> <span class="i18n_mono">${ro[e]}</span>`,
                    description: e
                })
            }), ot(s, t => {
                ct("saving new account data…"), k.post("/api/users/setCountry", {
                    country: t
                }, !0).then(s => {
                    e("config_account_country").innerHTML = `<img class="flag" src="/res/flags/${t.toLowerCase()}.png" /> ${ro[t]}`, I("country changed!"), dt()
                }, e => {
                    dt(), S(e)
                })
            }, !0)
        })), e("config_account_username_save").addEventListener("click", (function(t) {
            if (document.body.classList.contains("trapped") || "Attempting to bypass a ban will escalate it to a permanent ban." === localStorage.getItem("trapped")) return;
            if (qe()) return;
            const s = e("config_account_username").value;
            s && s !== z.username() ? D({
                title: "CHANGE USERNAME?",
                msg: `change your username from <span class="inline_self">${e("config_account_username_field").value}</span> to <span class="inline_self">${r(s.toUpperCase())}</span>? this will log you out everywhere, and your previous username will be freed. this process will try to rename everywhere it can, but some links may be broken.</p><p class="modal_also">you can do this only once a month.`,
                buttons: [{
                    label: "CANCEL",
                    classes: [],
                    callback: e => {
                        e()
                    }
                }, {
                    label: "CHANGE IT!",
                    classes: ["sec"],
                    callback: e => {
                        e(), z.requestPassword((e, t) => {
                            ct("changing username…"), k.post("/api/users/setUsername", {
                                password: e,
                                username: s,
                                totp: t
                            }, !0).then(e => {
                                D({
                                    title: "USERNAME CHANGED",
                                    msg: "your username was changed successfully. you must now log in using your new username.",
                                    classes: ["noclickout"],
                                    buttons: [{
                                        label: "GOT IT!",
                                        classes: ["pri"],
                                        callback: e => {
                                            ut(), ct("see you next time!"), z.logout(), U.update(!0)
                                        }
                                    }]
                                }), dt()
                            }, e => {
                                dt(), S(e)
                            })
                        })
                    }
                }]
            }) : T("you must enter a new username")
        }));
        let o = !1;
        window.DEVHOOK_BYPASS_NSFW_CHECK = () => {
            console.log("%cYou have just DISABLED the NSFW check temporarily. The purpose of this console command is ONLY to allow you to upload false positives.", "color: #FFFFFF;\n\t\t\t\t\t\t\t display: block;\n\t\t\t\t\t\t\t font-size: 1.2em;\n\t\t\t\t\t\t\t font-weight: 900;\n\t\t\t\t\t\t\t text-shadow: 0px 0px 2px #FFFFFF;\n\t\t\t\t\t\t\t background-color: #FF0000;\n\t\t\t\t\t\t\t padding: 0 1em;\n\t\t\t\t\t\t\t border-radius: 3px;"), console.log("%cUPLOADING EXPLICIT IMAGES WILL GET YOUR ACCOUNT RESTRICTED. UNDERSTOOD?", "color: #FF0000;\n\t\t\t\t\t\t\t display: block;\n\t\t\t\t\t\t\t font-size: 1.2em;\n\t\t\t\t\t\t\t font-weight: 900;\n\t\t\t\t\t\t\t text-shadow: 0px 0px 2px #FF0000;\n\t\t\t\t\t\t\t background-color: #FFFF00;\n\t\t\t\t\t\t\t padding: 0 1em;\n\t\t\t\t\t\t\t border-radius: 3px;"), o = !0
        }, e("config_account_avatar_change").addEventListener("click", (function(t) {
            Pe.request(() => {
                ct("setting avatar…")
            }).then(t => {
                if (2 === t.safetyLevel && !o) return console.log(t.predictions), dt(), void D({
                    title: "IMAGE REJECTED",
                    msg: 'this image was detected as potentially explicit. you must use a different image.</p><p class="modal_also">using an explicit avatar will get your account restricted.',
                    classes: ["noclickout", "crash_modal"],
                    buttons: [{
                        label: "GOT IT",
                        classes: ["pri"],
                        callback: e => {
                            e()
                        }
                    }]
                });
                const s = () => {
                    k.postImage("/api/upload/avatar", t.image, !0).then(t => {
                        e("config_account_avatar").innerHTML = `<img class="avatar" src="/user-content/avatars/${z.id()}.jpg?rv=${t.avatar_revision}" /> ${z.username().toUpperCase()}`, e("me_avatar").setAttribute("src", `/user-content/avatars/${z.id()}.jpg?rv=${t.avatar_revision}`), I("avatar updated!"), dt()
                    }, e => {
                        dt(), S(e)
                    })
                };
                1 === t.safetyLevel || o ? D({
                    title: "WARNING",
                    msg: "are you sure you wish to upload this avatar? by uploading an avatar, you understand that if this avatar is deemed explicit, your account will be restricted.",
                    classes: ["noclickout"],
                    buttons: [{
                        label: "CANCEL",
                        classes: [],
                        callback: e => {
                            dt(), e()
                        }
                    }, {
                        label: "CONTINUE",
                        classes: ["pri"],
                        callback: e => {
                            s(), e()
                        }
                    }]
                }) : s()
            }).catch(e => {
                console.error(e), dt(), T("string" == typeof e ? e : "sorry, that file cannot be uploaded")
            })
        })), e("config_account_avatar_remove").addEventListener("click", (function(t) {
            D({
                title: "REMOVE AVATAR",
                msg: "remove your avatar? it'll be replaced by a generic identicon.",
                classes: [],
                buttons: [{
                    label: "CANCEL",
                    classes: [],
                    callback: e => {
                        e()
                    }
                }, {
                    label: "REMOVE",
                    classes: ["sec"],
                    callback: t => {
                        t(), ct("removing avatar…"), k.post("/api/users/removeAvatar", {}, !0).then(t => {
                            e("config_account_avatar").innerHTML = `<img class="avatar" src="${u(z.id())}" /> No avatar set`, e("me_avatar").setAttribute("src", u(z.id())), I("avatar removed!"), dt()
                        }, e => {
                            dt(), S(e)
                        })
                    }
                }]
            })
        })), e("config_account_banner_change").addEventListener("click", (function(t) {
            qe() || Pe.request(() => {
                ct("setting banner…")
            }).then(t => {
                if (2 === t.safetyLevel && !o) return console.log(t.predictions), dt(), void D({
                    title: "IMAGE REJECTED",
                    msg: "this image was detected as potentially explicit. please use a different image.",
                    classes: ["noclickout", "crash_modal"],
                    buttons: [{
                        label: "GOT IT",
                        classes: ["pri"],
                        callback: e => {
                            e()
                        }
                    }]
                });
                k.postImage("/api/upload/banner", t.image, !0).then(t => {
                    e("config_account_banner").innerHTML = `<img class="banner" src="/user-content/banners/${z.id()}.jpg?rv=${t.banner_revision}" /> ${z.username().toUpperCase()}`, I("banner updated!"), dt()
                }, e => {
                    dt(), S(e)
                })
            }).catch(e => {
                console.error(e), dt(), T("string" == typeof e ? e : "sorry, that file cannot be uploaded")
            })
        })), e("config_account_banner_remove").addEventListener("click", (function(t) {
            qe() || D({
                title: "REMOVE BANNER",
                msg: "remove your banner?",
                classes: [],
                buttons: [{
                    label: "CANCEL",
                    classes: [],
                    callback: e => {
                        e()
                    }
                }, {
                    label: "REMOVE",
                    classes: ["sec"],
                    callback: t => {
                        t(), ct("removing banner…"), k.post("/api/users/removeBanner", {}, !0).then(t => {
                            e("config_account_banner").innerHTML = '<img class="banner" src="/res/banner.png" /> No banner set', I("banner removed!"), dt()
                        }, e => {
                            dt(), S(e)
                        })
                    }
                }]
            })
        })), e("config_account_bio_save").addEventListener("click", (function(t) {
            if (qe()) return;
            const s = (e("config_account_bio").value || "").trim();
            ct("saving new bio…"), k.post("/api/users/setBio", {
                bio: s
            }, !0).then(e => {
                I("bio changed!"), dt()
            }, e => {
                dt(), S(e)
            })
        })), e("config_account_delete").addEventListener("click", (function(t) {
            e("config_account_email_warning").classList.contains("hidden") ? He() : T("you must set an email before deleting your account.")
        })), e("config_account_totp_enable").addEventListener("click", (function(t) {
            ct("generating tokens…"), k.post("/api/users/initialize2fa", [], !0).then(t => {
                dt(), D({
                    title: "ENABLE TWO-FACTOR AUTHENTICATION",
                    msg: `scan the following QR code with your favourite authenticator app (like AUTHY or GOOGLE AUTHENTICATOR), then enter the six-digit code into the box below to enable two-factor authentication<br><br><center><img src="${t.qr.replace('"', "")}" /></center><br><br><input data-escape="totp_enable_cancel" data-enter="totp_enable_submit" id="totp_enable" placeholder="six digits" class="mono_input centered_input" autocomplete="off">`,
                    classes: ["wide_modal"],
                    buttons: [{
                        label: "CANCEL",
                        classes: [],
                        id: "totp_enable_cancel",
                        callback: e => {
                            e()
                        }
                    }, {
                        label: "SUBMIT",
                        classes: ["pri"],
                        id: "totp_enable_submit",
                        callback: t => {
                            t();
                            const s = e("totp_enable").value;
                            z.requestPassword(t => {
                                ct("saving…"), k.post("/api/users/enable2fa", {
                                    password: t,
                                    totp: s
                                }, !0).then(t => {
                                    dt(), I("two-factor authentication enabled!"), e("config_account_totp_label").innerHTML = "ENABLED", e("config_account_totp_tokens").innerHTML = "you have <b>8</b>/8 recovery codes remaining.", e("config_account_totp_enable").classList.add("hidden"), e("config_account_totp_resetrecovery").classList.remove("hidden"), e("config_account_totp_disable").classList.remove("hidden"), document.body.classList.add("uses2fa"), D({
                                        title: "TWO-FACTOR AUTHENTICATION ENABLED",
                                        msg: `you've successfully enabled two-factor authentication. now every time you log in, you'll be asked to enter one of those six-digit codes. if you don't have access to your device, you can use one of these codes in place of the 6-digit code:<br><center style="font-family: 'PFW'; font-size: 1.5em;">${t.recoveryTokens.join(" ")}</center><br>write these down! if you don't have them, and lose access to your device, you won't be able to log in. each of these tokens can only be used once, but you can create new ones at any time. keep them safe!!!`,
                                        classes: ["wide_modal"],
                                        buttons: [{
                                            label: "I'VE WRITTEN THEM DOWN!",
                                            classes: [],
                                            callback: e => {
                                                e()
                                            }
                                        }]
                                    })
                                }, e => {
                                    dt(), S(e)
                                })
                            })
                        }
                    }]
                }), e("request_password").focus()
            }, e => {
                dt(), S(e)
            })
        })), e("config_account_totp_resetrecovery").addEventListener("click", (function(t) {
            z.requestPassword((t, s) => {
                ct("resetting recovery codes…"), k.post("/api/users/reset2fa", {
                    password: t,
                    totp: s
                }, !0).then(t => {
                    dt(), e("config_account_totp_tokens").innerHTML = "you have <b>8</b>/8 recovery codes remaining.", D({
                        title: "RECOVERY CODES RESET",
                        msg: `here are your new recovery codes, which you may use in place of the 6-digit code:<br><center style="font-family: 'PFW'; font-size: 1.5em;">${t.recoveryTokens.join(" ")}</center><br>write these down! if you don't have them, and lose access to your device, you won't be able to log in. each of these tokens can only be used once, but you can create new ones at any time. keep them safe!!!`,
                        classes: ["wide_modal"],
                        buttons: [{
                            label: "I'VE WRITTEN THEM DOWN!",
                            classes: [],
                            callback: e => {
                                e()
                            }
                        }]
                    })
                }, e => {
                    dt(), S(e)
                })
            })
        })), e("config_account_totp_disable").addEventListener("click", (function(t) {
            z.requestPassword((t, s) => {
                ct("disabling two-factor authentication…"), k.post("/api/users/disable2fa", {
                    password: t,
                    totp: s
                }, !0).then(t => {
                    dt(), I("two-factor authentication disabled!"), e("config_account_totp_label").innerHTML = "NOT ENABLED", e("config_account_totp_tokens").innerHTML = "", e("config_account_totp_enable").classList.remove("hidden"), e("config_account_totp_resetrecovery").classList.add("hidden"), e("config_account_totp_disable").classList.add("hidden"), document.body.classList.remove("uses2fa")
                }, e => {
                    dt(), S(e)
                })
            })
        })), e("config_account_orders").addEventListener("click", (function(t) {
            ct("requesting orders…"), k.get("/api/orders/get", {}, !0).then(t => {
                let s = '<div class="centered_block np"><p id="extra_line"><b>Need help?</b> <a href="https://help.xsolla.com/" target="_blank">This page will guide you through the most common problems</a>.</p><p id="extra_line"><b>See something out of the ordinary?</b> <a href="https://refunds.xsolla.com/" target="_blank">Request a refund</a> or <a href="https://xsolla.com/refund-policy/flexible-policy" target="_blank">view our refund policy</a>.</p></div>';
                t.orders.forEach(e => {
                    s += `<div class="scroller_block order_listing_item ns">\n\t\t\t\t\t<table class="keypairs ns" style="font-family: 'C';">\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td>Status</td>\n\t\t\t\t\t\t\t<td><img style="height: 1em; vertical-align: -10%;" src="/res/orders/orders_${Lt[e.status]}.png" /> <b>${Et[e.status]}</b></td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td>Description</td>\n\t\t\t\t\t\t\t<td><i>${r(e.description)}</i></td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td>Price (excluding taxes and fees)</td>\n\t\t\t\t\t\t\t<td>${r(e.currency)} <b>${e.price.toLocaleString("en-US", { style: "currency", currency: "EUR" })}</b></td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td>Payment total (including taxes and fees)</td>\n\t\t\t\t\t\t\t<td>${e.payment && e.payment.amount ? `${r(e.payment.currency)} <b>${e.payment.amount.toLocaleString("en-US", { style: "currency", currency: e.payment.currency })}</b>` : "(unknown)"}</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td>Transaction number</td>\n\t\t\t\t\t\t\t<td>${e.providerid ? `<b>${r(e.providerid)}</b>` : "(not paid yet)"}</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td>Merchant</td>\n\t\t\t\t\t\t\t<td>${e.provider ? xt[e.provider] : "(not paid yet)"}</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td>Created</td>\n\t\t\t\t\t\t\t<td>${new Date(e.ts).toLocaleString()}, ${n(new Date(e.ts).getTime())} ago</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td>Last updated</td>\n\t\t\t\t\t\t\t<td>${new Date(e.updated).toLocaleString()}, ${n(new Date(e.updated).getTime())} ago</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</table>\n\t\t\t\t</div>`
                }), t.orders.length || (s = '<div class="scroller_block ns nothing">NO ORDERS</div>'), e("config_order_list").innerHTML = s, dt(), et("config_account_orders")
            }, e => {
                dt(), S(e)
            })
        })), e("account_connection_discord").addEventListener("click", (function(s) {
            if (e("account_connection_discord").classList.contains("linked")) return ct("unlinking…"), void k.post("/api/connect/discord/remove", [], !0).then(s => {
                dt(), I("unlinked!"), t("#account_connection_discord p").innerHTML = "Click to link", e("account_connection_discord").classList.remove("linked")
            }, e => {
                dt(), S(e)
            });
            ct("starting linking process…"), k.get("/api/connect/discord", [], !0).then(e => {
                dt(), window.open(e.link, "_blank")
            }, e => {
                dt(), S(e)
            })
        }))
    }));
    const Lt = {
            new: "new",
            pending: "pending",
            processing: "processing",
            complete: "complete",
            retrying: "retrying",
            refunding: "processing",
            refunded: "refunded",
            retrying_refund: "retrying"
        },
        Et = {
            new: "NEW",
            pending: "PENDING",
            processing: "PROCESSING",
            complete: "COMPLETE",
            retrying: "RETRYING",
            refunding: "REFUNDING",
            refunded: "REFUNDED",
            retrying_refund: "RETRYING REFUND"
        },
        xt = {
            xsolla: "Xsolla"
        };

    function Tt() {
        const t = wt.hasSupporter ? (wt.expires - Date.now()) / 2592e6 : 0;
        e("config_account_supporter_star").setAttribute("src", wt.hasSupporter ? "/res/supporter-tag-shiny.png" : "/res/supporter-tag-dead.png"), e("config_account_supporter_bar").setAttribute("style", `--progress: ${t / 3 * 100}%;`), e("config_account_supporter_bar").setAttribute("title", wt.expires ? `Expires ${new Date(wt.expires).toLocaleString()}` : ""), e("config_account_supporter_bar").classList.toggle("noglow", !wt.hasSupporter), e("config_account_supporter_bar").innerHTML = wt.hasSupporter ? `Your supporter status expires in <b>${n(wt.expires)}</b>.` : wt.expires ? `Your supporter status expired <b>${n(wt.expires)}</b> ago.` : "You are currently not a supporter.", e("config_account_supporter_details").innerHTML = wt.total ? `You have contributed <b>€${wt.total.toLocaleString("en-US")}</b> to TETR.IO development so far &mdash; thank you so much!` : "Become a supporter or gift supporter status today and directly support TETR.IO development!", e("config_account_supporter_support").innerHTML = wt.hasSupporter ? "ADD MONTHS OR GIFT" : "SUPPORT OR GIFT"
    }
    U.ready((function(t) {
        e("sig_channel").addEventListener("click", (function(e) {
            et("tetra")
        })), e("tetra_standalone").addEventListener("click", (function(e) {
            window.open("https://ch.tetr.io/", "_blank")
        })), e("tetra_leaderboards").addEventListener("click", (function(e) {
            et("tetra_records")
        })), e("tetra_me").addEventListener("click", (function(e) {
            et("tetra_me")
        })), e("tetra_players").addEventListener("click", (function(e) {
            et("tetra_players"), Xe.tetra_players.back = "tetra"
        })), e("tetra_jump_leaderboards").addEventListener("click", (function(t) {
            window.open(`https://ch.tetr.io/s/${e("tetra_records_40l").classList.contains("pressed") ? "40l_global" : "blitz_global"}`, "_blank")
        })), e("tetra_jump_mypage").addEventListener("click", (function(e) {
            window.open(`https://ch.tetr.io/u/${z.username()}`, "_blank")
        })), e("tetra_jump_players").addEventListener("click", (function(t) {
            window.open(`https://ch.tetr.io/players/${e("tetra_players_league").classList.contains("pressed") ? "" : "xp"}`, "_blank")
        })), e("tetra_jump_40l").addEventListener("click", (function(e) {
            window.open("https://ch.tetr.io/s/40l_global", "_blank")
        })), e("tetra_jump_blitz").addEventListener("click", (function(e) {
            window.open("https://ch.tetr.io/s/blitz_global", "_blank")
        })), e("tetra_jump_tl").addEventListener("click", (function(e) {
            window.open("https://ch.tetr.io/players/", "_blank")
        })), e("tetra_find").addEventListener("keydown", (function(t) {
            if (t.repeat) return;
            if ("Enter" !== t.code && "NumpadEnter" !== t.code) return;
            vs.play("menuclick"), t.target.blur();
            const s = e("tetra_find").value.replace("https://tetr.io/#", "").replace("tetrio://", "");
            s.startsWith("r:") ? ws.navigateToLongID(s) : ws.navigateToShortID(s), t.preventDefault(), t.stopPropagation()
        })), e("me").addEventListener("click", (function(e) {
            Ls({
                userID: z.id()
            })
        })), document.addEventListener("click", (function(t) {
            let s;
            if (t.target.closest(".tetra_pop")) Ls({
                username: (s = t.target.closest(".tetra_pop")).getAttribute("data-username")
            }), t.stopPropagation(), t.preventDefault();
            else if (t.target.closest(".dialog_pop")) D({
                title: (s = t.target.closest(".dialog_pop")).getAttribute("data-title"),
                msg: atob(s.getAttribute("data-content")),
                classes: ["patchnotes", "wide_modal"],
                buttons: [{
                    label: "OK",
                    classes: [],
                    callback: e => {
                        e()
                    }
                }]
            }), t.stopPropagation(), t.preventDefault();
            else if (t.target.closest(".supporter_pop")) Ke((s = t.target.closest(".supporter_pop")).getAttribute("data-title") || "SUPPORT TETR.IO"), t.stopPropagation(), t.preventDefault();
            else if (t.target.closest(".replay_pop")) s = t.target.closest(".replay_pop"), ws.navigateToShortID(s.getAttribute("data-replay")), t.stopPropagation(), t.preventDefault();
            else if (t.target.closest(".scroller_player") || t.target.closest(".playerresult") || t.target.closest(".chat_tag")) {
                const a = (s = t.target.closest(".scroller_player") || t.target.closest(".playerresult") || t.target.closest(".chat_tag")).getAttribute("data-id"),
                    n = [];
                a != z.id() && e("roomview").classList.contains("hosting") && (n.push({
                    label: "kick from room",
                    classes: [],
                    callback: e => {
                        ea.kickUser(a), e()
                    }
                }), e("room_players").querySelector(`.scroller_player[data-id="${a}"]`) && (e("room_players").querySelector(`.scroller_player[data-id="${a}"]`).classList.contains("spectator") ? n.push({
                    label: "move to players",
                    classes: [],
                    callback: e => {
                        ea.switchBracketHost(a, "player"), e()
                    }
                }) : n.push({
                    label: "move to spectators",
                    classes: [],
                    callback: e => {
                        ea.switchBracketHost(a, "spectator"), e()
                    }
                })), n.push({
                    label: "transfer ownership",
                    classes: [],
                    callback: e => {
                        ea.transferOwnership(a), e()
                    }
                })), Ls({
                    userID: a,
                    buttons: n
                }), t.stopPropagation(), t.preventDefault()
            }
        })), e("tetra_records_40l").addEventListener("click", (function(e) {
            ws.loadRecords("40l_global", "tetra_records")
        })), e("tetra_records_blitz").addEventListener("click", (function(e) {
            ws.loadRecords("blitz_global", "tetra_records")
        })), e("tetra_me_recent").addEventListener("click", (function(e) {
            ws.loadRecords("any_userrecent_CURRENTID", "tetra_me")
        })), e("tetra_me_40l").addEventListener("click", (function(e) {
            ws.loadRecords("40l_userbest_CURRENTID", "tetra_me")
        })), e("tetra_me_blitz").addEventListener("click", (function(e) {
            ws.loadRecords("blitz_userbest_CURRENTID", "tetra_me")
        })), e("tetra_me_league").addEventListener("click", (function(e) {
            ws.loadRecords("league_userrecent_CURRENTID", "tetra_me")
        })), e("tetra_players_league").addEventListener("click", (function(e) {
            ws.loadUserList("tetra_player_league_stream", "/api/users/by/league")
        })), e("tetra_players_xp").addEventListener("click", (function(e) {
            ws.loadUserList("tetra_player_xp_stream", "/api/users/by/xp")
        }))
    })), U.ready((function(t) {
        function a(t) {
            if (t.repeat || t.isComposing) return;
            if ("Enter" !== t.code && "NumpadEnter" !== t.code) return;
            const s = t.target.value;
            s.length && ea.sendChatMessage(s), e("chat_input").value = "", e("league_chat_input").value = "", e("ingame_chat_input").value = "", "ingame_chat_input" === t.target.id && t.target.blur()
        }

        function n() {
            s("#room_content_container .unsaved .room_config_item[data-index]").forEach(e => {
                e.closest(".room_config_row").classList.remove("unsaved")
            }), e("room_opts_save").classList.remove("unsaved"), e("startroom").classList.add("hidden"), ea.startRoom(), setTimeout(() => {
                e("startroom").classList.remove("hidden")
            }, 2e3)
        }

        function o(t) {
            document.body.classList.contains("chatfocus") || Object.keys(ae).forEach(s => {
                if (ae[s].includes(me(t) || t.detail.toUpperCase()) && "chat" === s) {
                    if ((document.body.classList.contains("inmulti") || document.body.classList.contains("inmultizen")) && 0 === ht && e("social").classList.contains("hidden")) e("ingame_chat_input").focus(), t.stopPropagation(), t.preventDefault();
                    else if ("lobby" === ze && 1 === ht && !e("menus").classList.contains("hidden") && e("social").classList.contains("hidden")) {
                        if (["input", "textarea"].includes(document.activeElement.tagName.toLowerCase())) return;
                        e("chat_input").focus(), t.stopPropagation(), t.preventDefault()
                    } else if ("endleague" === ze && 1 === ht && !e("menus").classList.contains("hidden") && e("social").classList.contains("hidden")) {
                        if (["input", "textarea"].includes(document.activeElement.tagName.toLowerCase())) return;
                        e("league_chat_input").focus(), t.stopPropagation(), t.preventDefault()
                    }
                } else;
            })
        }
        e("play_multi").addEventListener("click", (function(e) {
            ct("connecting to live servers…"), Ws.require().then(e => {
                dt(), et("playmulti"), e.maintenance && document.body.classList.add("maintenance")
            }).catch(e => {
                console.log(e), dt(), T("could not connect to live servers")
            })
        })), e("outdated_warning").addEventListener("click", (function(e) {
            U.update()
        })), e("mm_status").addEventListener("click", (function(t) {
            if (e("mm_status").classList.contains("room")) return Ft.stopNow(), e("mm_status").classList.remove("shown"), e("mm_status").classList.remove("room"), document.body.classList.remove("inmultizen"), st(!0), void et("lobby");
            Ws.isConnected() && (Ft.stopNow(), at(), setTimeout(() => {
                st(!0), et("league")
            }, 610))
        })), e("multi_listing").addEventListener("click", (function(e) {
            et("multilisting")
        })), e("multi_join").addEventListener("keydown", (function(t) {
            if (t.repeat) return;
            if ("Enter" !== t.code && "NumpadEnter" !== t.code) return;
            vs.play("menuclick");
            let s = e("multi_join").value.replace("#", "").replace("https://tetr.io/", "").replace("tetrio://", "");
            4 === s.length && (s = s.toUpperCase()), s.length && ea.joinRoom(s), e("multi_join").value = ""
        })), e("multi_quickplay").addEventListener("click", (function(e) {
            ea.joinRoom("X-QP")
        })), e("multi_league").addEventListener("click", (function(t) {
            ct("fetching TETRA LEAGUE data…");
            const s = `SESS-${Math.floor(Math.random() * Number.MAX_SAFE_INTEGER)}`;
            k.get("/api/server/environment", {}, !1, !1, !1, {
                "X-Session-ID": s
            }).then(async t => {
                k.get("/api/users/me", {}, !0, !1, !1, {
                    "X-Session-ID": s,
                    "X-Connection-ID": await z.esc(Uint8Array.from(atob(t.vx), e => e.charCodeAt(0)), Le.get())
                }).then(t => {
                    -1 === t.user.league.rating ? (e("league_rating").innerHTML = `${t.user.league.gamesplayed}<span>/10 rating games played</span>`, e("league_rating").title = "", e("leaguestanding_rating").innerHTML = `${t.user.league.gamesplayed}<span>/10 rating games played</span>`, e("league_ticker").innerHTML = "play rating games to receive a rating", e("league_rank").classList.add("hidden"), e("league_warning").classList.add("hidden"), e("me_leaguerank").classList.add("hidden")) : (Ne = Math.round(t.user.league.rating), Fe = t.user.league.rank, e("league_rating").innerHTML = `${Math.round(t.user.league.rating)}<span>TR</span>`, e("league_rating").title = t.user.league.rating, e("leaguestanding_rating").innerHTML = `${Math.round(t.user.league.rating)}<span>TR</span>`, e("league_ticker").innerHTML = `glicko: <span title="Your raw rating in the Glicko-2 system. Higher is better.">${t.user.league.glicko}</span>±<span title="How uncertain the Glicko-2 system is of your rating. Lower is better.">${t.user.league.rd}</span> - games won: <span>${t.user.league.gameswon}</span> / ${t.user.league.gamesplayed} (<span>${Math.floor(t.user.league.gameswon / t.user.league.gamesplayed * 1e4) / 100}</span>%)`, e("league_rank").src = `/res/league-ranks/${t.user.league.rank}.png`, e("leaguestanding_rank").src = `/res/league-ranks/${t.user.league.rank}.png`, e("league_rank").classList.remove("hidden"), e("league_warning").classList.toggle("hidden", "z" !== t.user.league.rank), e("me_leaguerank").classList.toggle("hidden", "z" === t.user.league.rank), e("me_leaguerank").src = `/res/league-ranks/${t.user.league.rank}.png`), -1 === t.user.league.standing ? e("league_placement").classList.add("hidden") : (Ue = t.user.league.standing, e("league_placement").classList.remove("hidden"), e("league_placement").innerHTML = `#<span>${t.user.league.standing}</span>`, e("league_placement").classList.toggle("t100", t.user.league.standing <= 100 && t.user.league.standing > 10), e("league_placement").classList.toggle("t10", t.user.league.standing <= 10 && t.user.league.standing > 1), e("league_placement").classList.toggle("t1", 1 === t.user.league.standing)), et("league"), dt(), 0 === t.user.league.gamesplayed && D({
                        title: "WELCOME TO TETRA LEAGUE",
                        msg: "TETRA LEAGUE is a competitive 1v1 mode. win duels against players of similar skill to rank up and conquer the leaderboards!</p><p>if you're new to stackers or are feeling rusty, it's a good idea to practice in other modes first.</p><p class=\"modal_warning\">make sure you have the time and connection to play! if you leave or disconnect early, you will be penalized.",
                        buttons: [{
                            label: "GOT IT!",
                            classes: [],
                            callback: e => {
                                e()
                            }
                        }]
                    })
                }, e => {
                    dt(), S(e)
                })
            }, e => {
                dt(), S(e)
            })
        })), e("enter_matchmaking").addEventListener("click", (function(t) {
            if (document.body.classList.contains("matchmaking")) ea.leaveMatchmaking();
            else {
                ea.enterMatchmaking();
                const t = e("enter_matchmaking").getBoundingClientRect();
                sn.play("button_ultra", {
                    x: t.left,
                    y: t.top,
                    w: t.width,
                    h: t.height,
                    color: [16711680, 16746632]
                })
            }
        })), e("multi_createroom").addEventListener("click", (function(e) {
            ot([{
                id: "public",
                name: "PUBLIC ROOM",
                description: "create a public room anyone can join",
                classes: ["block_anon", "block_silenced"],
                attributes: {
                    "data-block-reason": "ANONYMOUS USERS MAY NOT CREATE PUBLIC ROOMS"
                }
            }, {
                id: "private",
                name: "PRIVATE ROOM",
                description: "create a private room for you and friends"
            }], e => {
                ea.createRoom(e)
            }, !0)
        })), e("leaveroom").addEventListener("click", (function(e) {
            ea.leaveRoom()
        })), e("backtoroom").addEventListener("click", (function(e) {
            et("lobby"), ea.returnToRoom()
        })), e("victory_downloadreplay").addEventListener("click", (function(e) {
            const t = new Blob([JSON.stringify({
                    ismulti: !0,
                    data: Ys,
                    endcontext: Vs,
                    ts: (new Date).toISOString()
                })], {
                    type: "application/json"
                }),
                s = document.createElement("a");
            s.download = "replay.ttrm", s.href = (window.webkitURL || window.URL).createObjectURL(t), s.dataset.downloadurl = ["application/json", s.download, s.href].join(":"), document.body.appendChild(s), s.click(), document.body.removeChild(s)
        })), e("viewreplay_endleague").addEventListener("click", (function(t) {
            setTimeout(() => {
                e("leaguestanding_rating").classList.remove("pingraise"), e("leaguestanding_rating").classList.remove("pinglower"), e("leaguestanding_rating").classList.remove("pingfinal"), e("leaguestanding_rating").classList.remove("pingrating")
            }, 500), ct("fetching replay…");
            const s = e("replayid_endleague").innerHTML.replace("R:", "");
            k.get(`/api/games/${encodeURIComponent(s)}/short`, {}, !0).then(e => {
                dt(), Ft.showMultiLog({
                    ...e.game,
                    back: "endleague",
                    forcestyle: "endleague"
                })
            }, e => {
                dt(), S(e)
            })
        })), e("backtoleague").addEventListener("click", (function(t) {
            ea.leaveRoom(!0), et("league"), setTimeout(() => {
                e("leaguestanding_rating").classList.remove("pingraise"), e("leaguestanding_rating").classList.remove("pinglower"), e("leaguestanding_rating").classList.remove("pingfinal"), e("leaguestanding_rating").classList.remove("pingrating")
            }, 5e3), Va("online", "menus")
        })), e("chat_input").addEventListener("keydown", a), e("league_chat_input").addEventListener("keydown", a), e("ingame_chat_input").addEventListener("keydown", a), e("ingame_chat_input").addEventListener("keyup", t => {
            t.repeat || ("Escape" === t.code && (t.target.value = "", t.target.blur()), e("chat_input").value = t.target.value, e("league_chat_input").value = t.target.value)
        }), e("chat_input").addEventListener("keyup", t => {
            e("ingame_chat_input").value = t.target.value
        }), e("roomid_container").addEventListener("click", (function(t) {
            Ve(`https://tetr.io/${e("roomid").innerHTML}`, "link")
        })), e("roomid_change").addEventListener("click", (function(t) {
            t.stopPropagation(), qe() || je("EDIT ROOM ID", "pick a new room ID. alphanumeric characters only, please!", e("roomid").innerHTML.replace("#", ""), e => {
                ea.setRoomID(e.toUpperCase().trim())
            })
        })), e("startroom").addEventListener("click", (function(e) {
            s("#room_content_container .unsaved .room_config_item[data-index]").length ? D({
                title: "START GAME?",
                msg: "some settings have not yet been saved, if you start the game now, those changes will be lost!",
                buttons: [{
                    label: "CANCEL",
                    classes: [],
                    callback: e => {
                        e()
                    }
                }, {
                    label: "DISCARD and START GAME",
                    classes: ["sec"],
                    callback: e => {
                        n(), e()
                    }
                }]
            }) : n()
        })), setInterval(() => {
            We()
        }, 12e4), e("room_switchbracket").addEventListener("click", (function(t) {
            ea.switchBracket(e("roomview").classList.contains("spectating") ? "player" : "spectator")
        })), e("igw_zen").addEventListener("click", () => {
            Ft.playZen({
                inroom: !0,
                roomname: e("room_content_name").innerText
            }), fe(!0)
        }), e("igw_spectate").addEventListener("click", () => {
            ea.startMidgameSpectate()
        }), document.addEventListener("keydown", o, !0), document.addEventListener("gpdown", o, !0), s("#room_content_container .room_config_item[data-index]").forEach(t => {
            t.addEventListener("input", () => {
                t.closest(".room_config_row").classList.add("unsaved"), e("room_opts_save").classList.add("unsaved")
            })
        }), e("room_opts_save").addEventListener("click", () => {
            ea.saveRoomConfig(), s("#room_content_container .unsaved .room_config_item[data-index]").forEach(e => {
                e.closest(".room_config_row").classList.remove("unsaved")
            }), e("room_opts_save").classList.remove("unsaved")
        }), s(".room_config_spinner").forEach(e => {
            e.addEventListener("click", () => {
                const t = [];
                e.getAttribute("data-items").split(";").forEach(e => {
                    const s = e.split(",");
                    t.push({
                        id: s[0],
                        name: s[1],
                        description: s[2]
                    })
                }), ot(t, t => {
                    e.innerHTML = t, e.dispatchEvent(new Event("input"))
                }, !0)
            })
        })
    }));
    let It = 0,
        St = "Unknown";

    function Mt(e, t, s) {
        if (TETRIO_ENV.novault) return;
        let a = "",
            n = "???";
        switch (e) {
            case "supporter": {
                let e = "";
                e = t.isgift ? 1 === t.recipients.length ? `Supporter for ${t.recipients[0].toUpperCase()} - ${t.months} month${1 === t.months ? "" : "s"} (gift)` : `Supporter for ${t.recipients.length} recipients (mega gift)` : `Supporter for ${z.username().toUpperCase()} - ${t.months} month${1 === t.months ? "" : "s"}`, a += `<tr>\n\t\t\t\t<td>${e}</td>\n\t\t\t\t<td>1 unit</td>\n\t\t\t\t<td>€${t.price.toFixed(2)}</td>\n\t\t\t</tr>`, n = `€${t.price.toFixed(2)}`, It = t.price, St = t.isgift ? "Supporter Gift" : "Supporter";
                break
            }
        }
        ct("checking payment data…"), k.post("/api/orders/create", {
            type: e,
            dryrun: !0,
            data: t
        }, !0).then(o => {
            dt(), s && s();
            try {
                _paq.push(["trackEvent", "Vault", "Purchase Initialize", St, It])
            } catch (e) {}
            D({
                title: "Checkout",
                msg: `</p><div class="dialog_long">\n\t\t\t\t\t<table>${a}</table>\n\t\t\t\t\t<div class="vault_total"><span>TOTAL</span>${n}</div>\n\t\t\t\t\t<p class="vault_about">Your transaction will be completed using Xsolla.<br><b>Some of Xsolla's payment partners:</b><br><img src="/res/xsolla_methods.png" /><br>and many more.</p>\n\t\t\t\t</div><div class="xsolla_mark">Xsolla is an authorized global distributor of TETR.IO</div><p>`,
                classes: ["vault_modal"],
                buttons: [{
                    label: "Cancel",
                    classes: [],
                    callback: e => {
                        e()
                    }
                }, {
                    label: "Pay with Xsolla",
                    classes: ["pri", "xsolla_pay_button", "oob_button_arrow_right"],
                    callback: (s, a) => {
                        vs.play("purchase_start"), a.classList.add("oob_button_arrow_right_fly"), Ct(e, t, s, () => {
                            a.classList.remove("oob_button_arrow_right_fly")
                        })
                    }
                }]
            })
        }, e => {
            dt(), S(e)
        })
    }

    function Ct(e, t, s, a) {
        TETRIO_ENV.novault || (window.XPayStationWidget ? (ct("placing order…"), k.post("/api/orders/create", {
            type: e,
            dryrun: !1,
            data: t
        }, !0).then(a => {
            ct(""), Q(!1), s && s();
            let n = !1;
            XPayStationWidget.off(), XPayStationWidget.on("open", () => {
                dt();
                try {
                    _paq.push(["trackEvent", "Vault", "Purchase Start", St, It])
                } catch (e) {}
            }), XPayStationWidget.on("status-done", () => {
                n = !0;
                try {
                    _paq.push(["trackEvent", "Vault", "Purchase Complete", St, It])
                } catch (e) {}
            }), XPayStationWidget.on("status-troubled", () => {
                try {
                    _paq.push(["trackEvent", "Vault", "Purchase Troubled", St, It])
                } catch (e) {}
            }), XPayStationWidget.on("close", () => {
                if (Q(!0), n) Ye(e, t);
                else try {
                    _paq.push(["trackEvent", "Vault", "Purchase Cancel", St, It])
                } catch (e) {}
            }), XPayStationWidget.init({
                access_token: a.tokenid,
                sandbox: a.sandbox,
                lightbox: {
                    zIndex: 9999999999
                }
            }), XPayStationWidget.open()
        }, e => {
            dt(), a && a(), S(e)
        })) : T("a script is missing. please refresh the page or disable content blocking extensions."))
    }
    let At = "",
        Ht = !0;

    function Rt(t = !1, s = (() => {})) {
        !t && ("home" !== ze || e("menus").classList.contains("hidden") || ht < 1) || k.get("/about/homebanner.html", {}, !1, !0).then(t => {
            if (t == At) return;
            At = t, e("homebanner").innerHTML = t;
            const a = t.startsWith("\x3c!--Yes serve a ceriad at the top yes yes yes please cool cool--\x3e");
            a !== Ht && (Ht = a, a ? (e("homebanner").insertAdjacentElement("afterend", e("tetr-io_728x90_1")), e("tetr-io_728x90_1").classList.add("ceriad_bg_rb"), e("tetr-io_728x90_1").classList.remove("ceriad_bg_rt"), X.mountIfMounted("tetr-io_728x90_1"), e("homebanner").insertAdjacentElement("afterend", e("tetr-io_970X250_1")), e("tetr-io_970X250_1").classList.add("ceriad_bg_rb"), e("tetr-io_970X250_1").classList.remove("ceriad_bg_rt"), X.mountIfMounted("tetr-io_970X250_1")) : (e("home_menu").insertAdjacentElement("beforeend", e("tetr-io_728x90_1")), e("tetr-io_728x90_1").classList.add("ceriad_bg_rt"), e("tetr-io_728x90_1").classList.remove("ceriad_bg_rb"), X.mountIfMounted("tetr-io_728x90_1"), e("home_menu").insertAdjacentElement("beforeend", e("tetr-io_970X250_1")), e("tetr-io_970X250_1").classList.add("ceriad_bg_rt"), e("tetr-io_970X250_1").classList.remove("ceriad_bg_rb"), X.mountIfMounted("tetr-io_970X250_1"))), s()
        }, e => {
            s()
        })
    }
    g(() => {
        Rt(!0, () => {
            U.finishLoad("homebanner")
        })
    }), U.ready(e => {
        setInterval(() => {
            Rt()
        }, 6e5)
    }), U.ready((function(e) {
        G.newacc() || k.get("/about/patchnotes/notes.json", {}, !1, !1, !0).then(e => {
            const t = localStorage.getItem("lastPatch"),
                s = Object.keys(e)[0];
            if (s !== t) {
                localStorage.setItem("lastPatch", s);
                let t = "";
                t += `<h1>${s}</h1><h6>${e[s].ts}</h6>`, e[s].contents.forEach(e => {
                    e.header && (t += `<h2 style="color: ${e.color};" data-content="${e.header}">${e.header}</h2>`), t += `<p>${e.items.join("</p><p>")}</p>`
                }), D({
                    title: "WHAT'S NEW",
                    msg: `<div class="dialog_long">${t}<p class="dlf">Like this update? Please consider <a href="javascript:void();" class="lna" onclick="SHOW_SUPPORTER_DIALOG();">supporting the sole developer behind TETR.IO</a>!</p></div>`,
                    classes: ["patchnotes", "wide_modal"],
                    buttons: [{
                        label: "ALL PATCH NOTES",
                        classes: [],
                        callback: e => {
                            window.open("/about/patchnotes/", "_blank"), e()
                        }
                    }, {
                        label: "COOL!",
                        classes: ["pri"],
                        callback: e => {
                            e()
                        }
                    }]
                })
            }
        }, () => {})
    }));
    let $t = [];

    function Ot(e = !1) {
        "undefined" != typeof Notification ? "granted" === Notification.permission || "denied" === Notification.permission && !e || Notification.requestPermission() : console.warn("Notifications are not available on this device.")
    }

    function Pt(e, t, s = !1, a = "/res/tetriox256.png", n, o = null) {
        if ("undefined" == typeof Notification) return;
        if (!1 === te.video.desktopnotifications) return;
        if (!document.body.classList.contains("nofocus") && !s) return;
        const i = new Notification(e, {
            body: t,
            icon: a,
            badge: "/res/tetriox256.png",
            tag: n
        });
        i.onclick = o || (() => {
            window.focus(), i.close()
        }), $t.push(i), window.IS_ELECTRON && J()
    }
    U.ready((function(e) {
        Ot(!1), window.addEventListener("focus", (function(e) {
            for (const e of $t) e.close();
            $t = []
        }))
    }));
    const Dt = (() => {
        "production" === TETRIO_ENV.mode ? g(() => {
            e("performancemeter_header").innerHTML = "PRODUCTION BUILD - F8 for stats", e("sb").remove(), e("sbt").remove()
        }) : g(() => {
            e("performancemeter").classList.remove("production"), e("performancemeter_header").innerHTML = "DEVELOPMENT BUILD - F8 for stats"
        });
        let t = !1,
            s = [],
            a = [],
            n = [],
            o = 0,
            i = 0,
            r = 0,
            l = 0,
            c = 0,
            d = 0,
            p = 0,
            u = 0,
            m = 0,
            h = 0,
            f = [],
            _ = [],
            b = [],
            y = [],
            v = [],
            k = [],
            w = [],
            L = [];
        const E = 1e3 / 60;
        let x = null;

        function T() {
            const e = window.performance.now();
            s.push(e),
                function() {
                    const e = window.performance.now();
                    v = v.filter(t => !(e - t > 1e3)), k = k.filter(t => !(e - t > 6e4)), w = w.filter(t => !(e - t > 1e3)), L = L.filter(t => !(e - t > 6e4)), s = s.filter(t => !(e - t > 1e3)), f = f.filter(t => !(e - t.ts > 1e3)), _ = _.filter(t => !(e - t.ts > 6e4)), b = b.filter(t => !(e - t.ts > 1e3)), y = y.filter(t => !(e - t.ts > 1e3))
                }(), p = v.length, u = k.length, m = w.length, h = L.length, o = s.length, a.push({
                    ts: e,
                    fps: o
                }), a = a.filter(t => !(e - t.ts > 5e3)), r = Math.max(1e-6, f.reduce((e, t) => Math.max(e, t.fill), 0)), l = Math.max(1e-6, _.reduce((e, t) => Math.max(e, t.fill), 0)), c = y.reduce((e, t) => Math.max(e, t.fill), 0), d = b.reduce((e, t) => Math.max(e, t.fill), 0), i = a.reduce((e, t) => Math.min(e || t.fps, t.fps), 0), I("fps", o), S("fps", i), M("fps", o < 40), I("f", Math.round(r / E * 1e4) / 100), S("f", Math.round(l / E * 1e4) / 100), M("f", r / E > .8), I("gamef", Math.round(c / r * 1e4) / 100), S("gamef", Math.round(c / E * 1e4) / 100), I("drawf", Math.round(d / r * 1e4) / 100), S("drawf", Math.round(d / E * 1e4) / 100), I("gamem", p), S("gamem", u), I("drawm", m), S("drawm", h), M("gamem", p > 9), M("drawm", m > 9), I("ping", n.length ? n[n.length - 1] : "-"), S("ping", n.length ? n.reduce((e, t) => Math.max(e, t)) : "-"), M("ping", !!n.length && n[n.length - 1] > 500)
        }

        function I(e, t) {
            x.querySelector(`#perf_${e} h1 span`).innerHTML = t
        }

        function S(e, t) {
            x.querySelector(`#perf_${e} h2 span`).innerHTML = t
        }

        function M(e, t) {
            t ? x.querySelector(`#perf_${e}`).classList.add("warning") : x.querySelector(`#perf_${e}`).classList.remove("warning")
        }
        return g(() => {
            x = e("performancemeter"), document.addEventListener("keydown", e => {
                119 === e.which && (t ? (t = !1, PIXI.Ticker.shared.remove(T, this), x.classList.add("off")) : (t = !0, PIXI.Ticker.shared.add(T, this), x.classList.remove("off")))
            }, !1), e("devbuildid").innerHTML = `v${TETRIO_ENV.version}-${TETRIO_ENV.mode} | commit ${TETRIO_ENV.commit.id} (${new Date(TETRIO_ENV.commit.time).toLocaleString()}) | server cycle ${TETRIO_ENV.serverCycle} | build ${TETRIO_ENV.build.id} (${new Date(TETRIO_ENV.build.time).toLocaleString()})<br>\n\t\t\t\t\t\t\t\t\t${window.IS_ELECTRON ? "desktop" : "browser"} | ${navigator.userAgent}<br>\n\t\t\t\t\t\t\t\t\t${te.video.graphics || "high"} | ${te.electron.anglecompat ? "COMPAT ON" : "compat off"} | <span id="rendererinfo">(no renderer)</span><br>\n\t\t\t\t\t\t\t\t\tgfx <span id="dirtyflag_gfx">OK</span> | net <span id="dirtyflag_net">OK</span> | state <span id="dirtyflag_state">OK</span> | client <span id="dirtyflag_client">OK</span> | gl <span id="dirtyflag_gl">OK</span><br>\n\t\t\t\t\t\t\t\t\tserver: <span id="serverdebuginfo">(not connected)</span>`, e("version_line").innerHTML = `version ${TETRIO_ENV.version}-${TETRIO_ENV.mode.toUpperCase()} (press F8 for more info)`
        }), {
            addGameF: e => {
                t && (f.push({
                    fill: e,
                    ts: window.performance.now()
                }), _.push({
                    fill: e,
                    ts: window.performance.now()
                }), y.push({
                    fill: e,
                    ts: window.performance.now()
                }))
            },
            addDrawF: e => {
                t && (f.push({
                    fill: e,
                    ts: window.performance.now()
                }), _.push({
                    fill: e,
                    ts: window.performance.now()
                }), b.push({
                    fill: e,
                    ts: window.performance.now()
                }))
            },
            addGameM: e => {
                if (t)
                    for (; e-- > 0;) v.push(window.performance.now()), k.push(window.performance.now())
            },
            addDrawM: e => {
                if (t)
                    for (; e-- > 0;) w.push(window.performance.now()), L.push(window.performance.now())
            },
            addPing: e => {
                n.push(e), n.splice(0, Math.max(0, n.length - 12))
            }
        }
    })();

    function Nt(e, t, s) {
        const a = new ti,
            n = new fo;
        n.import(e.export()), a.bindEventSource(new _o({
            type: "replay",
            replay: n
        }));
        const o = [],
            i = [],
            r = [],
            l = [],
            c = [],
            d = [],
            p = [],
            u = [],
            m = [];
        let g = 0,
            h = 0;
        const f = [];
        (t = JSON.parse(JSON.stringify(t))).onstart = () => {}, t.onend = () => {}, t.onframe = (e, t) => {
            e % 30 == 0 && d.push([e, a.export().aggregatestats.vsscore])
        }, t.onpiece = e => {
            o.includes(e) || o.push(e), i.push(e), i.length > 10 && i.shift(), r.push([e, e ? 600 / (e - i[0]) : 0]);
            const t = a.export(),
                s = t.stats.score - g;
            if (g = t.stats.score, l.push(s / t.stats.level), l.length > 30 && l.shift(), c.push([e, l.reduce((e, t) => e + t, 0) / l.length]), t.stats.finesse.faults !== h && (h = t.stats.finesse.faults, p.includes(e) || p.push(e)), u.length > 11) {
                const t = (u[u.length - 1] - u[u.length - 10]) / 10,
                    s = e - o[o.length - 2];
                s > 3 * t ? m.push([o[o.length - 2] + t, s - t]) : u.includes(e) || u.push(e)
            } else u.includes(e) || u.push(e)
        }, t.headless = !0, a.setGame(t), a.startGame();
        const _ = n.getEndEvent();
        let b = 0;
        for (; a.export().game.playing && b <= _.frame + 1;) {
            if (a.doFrame(), b % 300 == 0) {
                const e = a.ejectState();
                e.setoptions.headless = !1, e.started = !0, f.push(e)
            }
            b++
        }
        if (r.length > 7)
            for (let e = 0; e < 7; e++) r[e][1] = r[7][1];
        return {
            frames: _.frame,
            pieceFrames: o,
            localPPSFrames: r,
            localSPPFrames: c,
            vsFrames: d,
            finesseFaultFrames: p,
            chokeFrames: m,
            states: f,
            gametype: s
        }
    }
    const Ft = (() => {
        let o = null,
            i = null,
            l = null,
            c = !1,
            d = {},
            p = [],
            u = Date.now(),
            m = 0;
        U.ready(() => {
            e("watchreplay_results").addEventListener("click", (function(t) {
                let s = void 0;
                e("results").classList.contains("isreplay") || (s = ks.playing()), y(o.data, o.user.username.toUpperCase(), o.endcontext.gametype, s)
            })), e("downloadreplay_results").addEventListener("click", (function(e) {
                const t = new Blob([JSON.stringify(o)], {
                        type: "application/json"
                    }),
                    s = document.createElement("a");
                s.download = `${o.shortid || "replay"}.ttr`, s.href = (window.webkitURL || window.URL).createObjectURL(t), s.dataset.downloadurl = ["application/json", s.download, s.href].join(":"), document.body.appendChild(s), s.click(), document.body.removeChild(s)
            })), e("downloadreplay_multilog").addEventListener("click", (function(e) {
                const t = new Blob([JSON.stringify(o)], {
                        type: "application/json"
                    }),
                    s = document.createElement("a");
                s.download = `${o.shortid || "replay"}.ttrm`, s.href = (window.webkitURL || window.URL).createObjectURL(t), s.dataset.downloadurl = ["application/json", s.download, s.href].join(":"), document.body.appendChild(s), s.click(), document.body.removeChild(s)
            })), e("tweetreplay_results").addEventListener("click", (function(t) {
                let s = "",
                    n = "";
                switch (o.gametype) {
                    case "40l":
                        const e = a(o.endcontext.finalTime);
                        n = `time of ${e.m}:${e.s}.${e.ms}`;
                        break;
                    case "blitz":
                        n = `score of ${o.endcontext.score.toLocaleString("en-US")}`
                }
                s = e("results").classList.contains("isreplay") ? `Check out ${o.user._id === z.id() ? "my" : `${o.user.username.toUpperCase()}'s`} ` : "I just achieved a ", s += `${n} playing TETR.IO ${io.longTypeNames[o.gametype]}!\n\nhttps://tetr.io/#R:${o.shortid}`, window.open(`https://twitter.com/intent/tweet?text=${encodeURIComponent(s)}`, "_blank", "menubar=0,toolbar=0,location=0,personalbar=0,status=0,noopener=1,width=640,height=480")
            })), e("resubmitreplay_results").addEventListener("click", (function(t) {
                i && (ct("resubmitting…"), f(...i).then(t => {
                    x("game submitted!"), e("results").classList.remove("error"), dt()
                }, t => {
                    e("dirtyflag_state").innerHTML = "SUBMISSION", S(t), dt()
                }))
            })), e("custom_export").addEventListener("click", (function(e) {
                const t = new Blob([JSON.stringify(M())], {
                        type: "application/json"
                    }),
                    s = document.createElement("a");
                s.download = "custom-game.ttp", s.href = (window.webkitURL || window.URL).createObjectURL(t), s.dataset.downloadurl = ["application/json", s.download, s.href].join(":"), document.body.appendChild(s), s.click(), document.body.removeChild(s)
            }))
        });
        let g = `SESS-${Math.floor(Math.random() * Number.MAX_SAFE_INTEGER)}`,
            h = 0;

        function f(e, t, s) {
            const a = k.post("/api/games/submit", {
                type: e,
                replay: t,
                assumptions: s,
                aborted: h,
                i: U.i(),
                serverCycle: TETRIO_ENV.serverCycle,
                commitId: TETRIO_ENV.commit.id
            }, !0, !1, !1, {
                "X-Session-ID": g
            });
            return h = 0, a
        }

        function _() {
            h = Math.min(10, h + 1)
        }

        function b(e, t, s, a) {
            qt(e, t, s, a)
        }

        function y(e, t, s, a) {
            const n = new fo;
            n.import(e), b(n, t, s, a)
        }

        function v(t) {
            l = "40l", st(!1), et("none"), ks.stop(), c || z.anon() || document.body.classList.contains("banstatus_restrict") ? e("noreplay").classList.remove("hidden") : e("noreplay").classList.add("hidden"), document.body.classList.contains("inpair") || document.body.classList.contains("matchmaking") || Va("online", "40l"), (De = new ti).bindEventSource(new _o({
                type: "keyboard"
            })), De.setGame({
                version: Zo,
                seed_random: !0,
                anchorseed: !0,
                g: .02,
                allow180: !0,
                countdown: !0,
                countdown_interval: 1e3,
                precountdown: 5e3,
                prestart: 1e3,
                mission: io.gameMissions["40l"],
                zoominto: "slow",
                slot_counter1: te.gameoptions.slot_40l_counter1 || "stopwatch",
                slot_counter2: te.gameoptions.slot_40l_counter2 || "lines",
                slot_counter3: te.gameoptions.slot_40l_counter3 || "pieces",
                slot_counter4: te.gameoptions.slot_40l_counter4 || (te.gameoptions.pro_40l ? "keys" : void 0),
                slot_counter5: te.gameoptions.slot_40l_counter5 || (te.gameoptions.pro_40l ? "finesse" : void 0),
                slot_bar2: "progress",
                pro: !!te.gameoptions.pro_40l,
                pro_alert: !!te.gameoptions.pro_40l_alert,
                pro_retry: !!te.gameoptions.pro_40l_retry,
                stride: !!te.gameoptions.stride_40l,
                no_szo: !!te.gameoptions.stride_40l,
                objective: {
                    type: "lines",
                    count: 40
                },
                can_retry: !0,
                bgmnoreset: !1 !== te.volume.noreset,
                onstart: () => {
                    ks.playSmoothOrRandom(t.song || "RANDOM")
                },
                onfinish: t => {
                    const s = t.stats;
                    s.finalTime = t.assumptions.finalTime;
                    const a = t.replay.getFrame() * (1e3 / 60);
                    let n = s.finalTime;
                    Math.abs(n - a) >= 50 && (n = a);
                    const o = performance.now();
                    c || z.anon() ? p.push(setTimeout(() => {
                        s.finalTime = n, s.gametype = "40l", T(t.stats, {
                            gametype: "40l",
                            replay: {
                                user: {
                                    _id: z.id(),
                                    username: z.username()
                                },
                                endcontext: s,
                                ts: new Date,
                                data: t.replay.export(),
                                gametype: "40l",
                                customtype: "40l"
                            }
                        })
                    }, te.gameoptions.stride_40l ? 500 : 2e3)) : (i = ["40l", t.replay.export(), t.assumptions], f(...i).then(e => {
                        x("game submitted!");
                        const t = performance.now() - o;
                        p.push(setTimeout(() => {
                            s.finalTime = n, T(s, {
                                gametype: "40l",
                                username: e.game.user.username,
                                ts: e.game.ts,
                                replay: e.game,
                                hasranks: !0,
                                globalrank: -1 === e.globalrecord.rank ? void 0 : e.globalrecord.rank,
                                personalrank: -1 === e.userbestrecord.rank ? void 0 : e.userbestrecord.rank
                            }), Ps(e.xp)
                        }, Math.max(0, (te.gameoptions.stride_40l ? 500 : 2e3) - t)))
                    }, a => {
                        e("dirtyflag_state").innerHTML = "SUBMISSION", S(a);
                        const i = performance.now() - o;
                        p.push(setTimeout(() => {
                            s.finalTime = n, s.gametype = "40l", T(t.stats, {
                                gametype: "40l",
                                error: a.errors[0].msg,
                                replay: {
                                    user: {
                                        _id: z.id(),
                                        username: z.username()
                                    },
                                    endcontext: s,
                                    ts: new Date,
                                    data: t.replay.export(),
                                    gametype: "40l",
                                    customtype: "40l"
                                }
                            })
                        }, Math.max(0, (te.gameoptions.stride_40l ? 500 : 2e3) - i)))
                    }))
                },
                onfail: () => {
                    _(), p.push(setTimeout(() => {
                        vs.play("failure"), rt(e => {
                            "retry" === e ? v({
                                song: t.song
                            }) : (st(!0), et("home"))
                        })
                    }, te.gameoptions.stride_40l ? 500 : 3e3))
                },
                onquit: () => {
                    _(), p.push(setTimeout(() => {
                        st(!0), et("home")
                    }, 600))
                }
            }), De.createGameHolder(), De.startGame()
        }

        function w(t) {
            l = "blitz", st(!1), et("none"), ks.stop(), c || z.anon() || document.body.classList.contains("banstatus_restrict") ? e("noreplay").classList.remove("hidden") : e("noreplay").classList.add("hidden"), document.body.classList.contains("inpair") || document.body.classList.contains("matchmaking") || Va("online", "blitz"), (De = new ti).bindEventSource(new _o({
                type: "keyboard"
            })), De.setGame({
                version: Zo,
                seed_random: !0,
                anchorseed: !0,
                allow180: !0,
                countdown: !0,
                countdown_interval: 1e3,
                precountdown: 5e3,
                prestart: 1e3,
                mission: io.gameMissions.blitz,
                zoominto: "slow",
                slot_counter1: te.gameoptions.slot_blitz_counter1 || "timer",
                slot_counter2: te.gameoptions.slot_blitz_counter2 || "lines",
                slot_counter3: te.gameoptions.slot_blitz_counter3 || "level",
                slot_counter4: te.gameoptions.slot_blitz_counter4 || (te.gameoptions.pro_blitz ? "finesse_l" : void 0),
                slot_counter5: te.gameoptions.slot_blitz_counter5 || "score",
                slot_bar2: "progress",
                pro: !!te.gameoptions.pro_blitz,
                pro_alert: !!te.gameoptions.pro_blitz_alert,
                pro_retry: !!te.gameoptions.pro_blitz_retry,
                stride: !!te.gameoptions.stride_blitz,
                no_szo: !!te.gameoptions.stride_blitz,
                objective: {
                    type: "timed",
                    time: 12e4
                },
                can_retry: !0,
                bgmnoreset: !1,
                levels: !0,
                levelspeed: .42,
                gbase: .65,
                onstart: () => {
                    ks.playSmoothOrRandom(t.song || "RANDOM")
                },
                onfinish: t => {
                    const s = t.stats;
                    s.finalTime = t.assumptions.finalTime;
                    const a = performance.now();
                    c || z.anon() ? p.push(setTimeout(() => {
                        s.finalTime = 12e4, s.gametype = "blitz", T(t.stats, {
                            gametype: "blitz",
                            replay: {
                                user: {
                                    _id: z.id(),
                                    username: z.username()
                                },
                                endcontext: s,
                                ts: new Date,
                                data: t.replay.export(),
                                gametype: "blitz",
                                customtype: "blitz"
                            }
                        })
                    }, te.gameoptions.stride_blitz ? 500 : 2e3)) : (i = ["blitz", t.replay.export(), t.assumptions], f(...i).then(e => {
                        x("game submitted!");
                        const t = performance.now() - a;
                        p.push(setTimeout(() => {
                            s.finalTime = 12e4, T(s, {
                                gametype: "blitz",
                                username: e.game.user.username,
                                ts: e.game.ts,
                                replay: e.game,
                                hasranks: !0,
                                globalrank: -1 === e.globalrecord.rank ? void 0 : e.globalrecord.rank,
                                personalrank: -1 === e.userbestrecord.rank ? void 0 : e.userbestrecord.rank
                            }), Ps(e.xp)
                        }, Math.max(0, (te.gameoptions.stride_blitz ? 500 : 2e3) - t)))
                    }, n => {
                        e("dirtyflag_state").innerHTML = "SUBMISSION", S(n);
                        const o = performance.now() - a;
                        p.push(setTimeout(() => {
                            s.finalTime = 12e4, s.gametype = "blitz", T(t.stats, {
                                gametype: "blitz",
                                error: n.errors[0].msg,
                                replay: {
                                    user: {
                                        _id: z.id(),
                                        username: z.username()
                                    },
                                    endcontext: s,
                                    ts: new Date,
                                    data: t.replay.export(),
                                    gametype: "blitz",
                                    customtype: "blitz"
                                }
                            })
                        }, Math.max(0, (te.gameoptions.stride_blitz ? 500 : 2e3) - o)))
                    }))
                },
                onfail: () => {
                    _(), p.push(setTimeout(() => {
                        vs.play("failure"), rt(e => {
                            "retry" === e ? w({
                                song: t.song
                            }) : (st(!0), et("home"))
                        })
                    }, te.gameoptions.stride_blitz ? 500 : 3e3))
                },
                onquit: () => {
                    _(), p.push(setTimeout(() => {
                        st(!0), et("home")
                    }, 600))
                }
            }), De.createGameHolder(), De.startGame()
        }
        let L = {
            map: `${"_".repeat(400)}?`,
            level: 1,
            progress: 0,
            score: 0
        };
        if (localStorage.getItem("zenProgression")) {
            const e = JSON.parse(localStorage.getItem("zenProgression"));
            e.level + e.progress >= L.level + L.progress && (L = e)
        }

        function E(e) {
            l = "custom", st(!1), et("none"), ks.stop(), document.body.classList.contains("inpair") || document.body.classList.contains("matchmaking") || Va("online", "custom"), (De = new ti).bindEventSource(new _o({
                type: "keyboard"
            }));
            const t = M();
            t.version = Zo, t.objective = {
                type: t.objective_type,
                count: t.objective_count,
                time: t.objective_time
            }, t.mission_type = "mission_free", t.bgmnoreset = !1 !== te.volume.noreset, t.onstart = () => {
                ks.playSmoothOrRandom(e.song || "RANDOM")
            }, t.onfinish = e => {
                const s = e.stats;
                s.finalTime = e.assumptions.finalTime, s.gametype = "custom";
                const a = e.replay.getFrame() * (1e3 / 60);
                let n = s.finalTime;
                Math.abs(n - a) >= 50 && (n = a), p.push(setTimeout(() => {
                    s.finalTime = n, T(e.stats, {
                        gametype: "custom",
                        customtype: t.x_resulttype,
                        replay: {
                            user: {
                                _id: z.id(),
                                username: z.username()
                            },
                            endcontext: s,
                            ts: new Date,
                            data: e.replay.export(),
                            gametype: "custom",
                            customtype: t.x_resulttype
                        }
                    })
                }, 2e3))
            }, t.onfail = () => {
                p.push(setTimeout(() => {
                    vs.play("failure"), rt(t => {
                        "retry" === t ? E({
                            song: e.song
                        }) : (st(!0), et("home"))
                    })
                }, 3e3))
            }, t.onquit = () => {
                p.push(setTimeout(() => {
                    st(!0), et("home")
                }, 600))
            }, De.setGame(t), De.createGameHolder(), De.startGame()
        }

        function T(t, s) {
            const i = a(t.finalTime),
                l = t.finalTime / 6e4 || 1,
                p = t.finalTime / 1e3 || 1,
                u = e("results_stats_overview"),
                m = e("results_stats_full");
            let g = {};
            if (s.replay) {
                const e = new fo;
                e.import(s.replay.data), g = e.getStarter().options
            }
            switch (u.innerHTML = "", m.innerHTML = "", "blitz" !== s.gametype && "custom" !== s.gametype || I(u, "LEVEL", t.level), I(u, "PIECES PLACED", t.piecesplaced.toLocaleString("en-US")), I(u, "PIECES per SECOND", (t.piecesplaced / p).toFixed(2)), t.inputs && (I(u, "KEYS PRESSED", t.inputs), I(u, "KEYS per PIECE", (t.inputs / t.piecesplaced).toFixed(3)), I(u, "KEYS per SECOND", (t.inputs / p).toFixed(3))), I(u, "SCORE", t.score.toLocaleString("en-US")), "40l" !== s.gametype && "custom" !== s.gametype || I(u, "TIME", `${i.m}:${i.s}.${i.ms}`), I(u, "LINES", t.lines.toLocaleString("en-US")), I(u, "LINES per MINUTE", (t.lines / l).toFixed(2)), "none" !== g.spinbonuses && I(u, `${"T-spins" !== g.spinbonuses && g.spinbonuses ? "s" : "T-s"}pins`, t.tspins), I(u, "maximum COMBO", Math.max(0, t.topcombo - 1)), I(u, "maximum back-to-back chain", Math.max(0, t.topbtb - 1)), I(u, "ALL CLEARS", t.clears.allclear.toLocaleString("en-US")), t.finesse && (I(u, "finesse %", `${(t.finesse.perfectpieces / Math.max(1, t.piecesplaced) * 100).toFixed(2)}%`), I(u, "finesse faults", t.finesse.faults.toLocaleString("en-US"))), I(m, "SINGLES", t.clears.singles.toLocaleString("en-US")), I(m, "DOUBLES", t.clears.doubles.toLocaleString("en-US")), I(m, "TRIPLES", t.clears.triples.toLocaleString("en-US")), I(m, "QUADS", t.clears.quads.toLocaleString("en-US")), "none" !== g.spinbonuses && (I(m, `${"T-spins" !== g.spinbonuses && g.spinbonuses ? "s" : "T-s"}pins`, t.clears.realtspins.toLocaleString("en-US")), I(m, `${"T-spins" !== g.spinbonuses && g.spinbonuses ? "s" : "T-s"}pin MINIS`, t.clears.minitspins.toLocaleString("en-US")), I(m, `${"T-spins" !== g.spinbonuses && g.spinbonuses ? "s" : "T-s"}pin MINI SINGLES`, t.clears.minitspinsingles.toLocaleString("en-US")), I(m, `${"T-spins" !== g.spinbonuses && g.spinbonuses ? "s" : "T-s"}pin SINGLES`, t.clears.tspinsingles.toLocaleString("en-US")), I(m, `${"T-spins" !== g.spinbonuses && g.spinbonuses ? "s" : "T-s"}pin MINI DOUBLES`, t.clears.minitspindoubles.toLocaleString("en-US")), I(m, `${"T-spins" !== g.spinbonuses && g.spinbonuses ? "s" : "T-s"}pin DOUBLES`, t.clears.tspindoubles.toLocaleString("en-US")), I(m, `${"T-spins" !== g.spinbonuses && g.spinbonuses ? "s" : "T-s"}pin TRIPLES`, t.clears.tspintriples.toLocaleString("en-US")), "T-spins" !== g.spinbonuses && void 0 !== g.spinbonuses && I(m, "spin QUADS", t.clears.tspinquads || 0)), I(m, "ALL CLEARS", t.clears.allclear.toLocaleString("en-US")), s.gametype) {
                case "40l":
                    e("results").classList.remove("nomusicpicker"), e("result_header").innerHTML = "FINAL TIME", e("result_result").innerHTML = `${i.m}:${i.s}<span class="ms">.${i.ms}</span>`, s.isreplay || (vs.play("showscore"), ks.playSmooth("success-story"));
                    break;
                case "blitz":
                    e("results").classList.add("nomusicpicker"), e("result_header").innerHTML = "FINAL SCORE", e("result_result").textContent = t.score.toLocaleString("en-US"), s.isreplay || (vs.play("showscore"), ks.playSmooth("philosophy"));
                    break;
                case "custom":
                    switch (e("results").classList.remove("nomusicpicker"), s.customtype || s.replay.customtype) {
                        case "score":
                            e("result_header").innerHTML = "FINAL SCORE", e("result_result").textContent = t.score.toLocaleString("en-US");
                            break;
                        case "time":
                            e("result_header").innerHTML = "FINAL TIME", e("result_result").innerHTML = `${i.m}:${i.s}<span class="ms">.${i.ms}</span>`;
                            break;
                        case "lines":
                            e("result_header").innerHTML = "FINAL LINE COUNT", e("result_result").textContent = t.lines
                    }
                    s.isreplay || (vs.play("showscore"), ks.playSmooth("kaiser-hige-na-neko"))
            }
            const h = s.username || z.username();
            if (Xe.results.footer = `${io.longTypeNames[s.gametype]} played by <a class="tetra_pop" data-hover="tap" data-hit="click" data-username="${r(h.replace('"', ""))}">${r(h.toUpperCase())}</a> on ${new Date(s.ts || Date.now()).toLocaleString()}`, Xe.results.back = s.back || "home", st(!0), et("results"), e("results").classList.toggle("fakereplay", !s.replay.shortid), s.isreplay) Qe(s.replay.shortid ? "tetra" : "custom"), e("results").classList.add("isreplay");
            else {
                switch (s.gametype) {
                    case "40l":
                        Qe("40l");
                        break;
                    case "blitz":
                        Qe("blitz");
                        break;
                    case "custom":
                        Qe("custom")
                }
                e("results").classList.remove("isreplay")
            }
            if (s.replay ? (e("results").classList.remove("noreplay"), e("replayid_results").textContent = `R:${s.replay.shortid}`, o = s.replay) : e("results").classList.add("noreplay"), s.hasranks) {
                if (e("results").classList.add("hasranks"), s.globalrank ? (e("globalrank_results").classList.toggle("textual", 1 === s.globalrank), e("globalrank_results_data").innerHTML = 1 === s.globalrank ? "WORLD RECORD" : s.globalrank, e("globalrank_results").classList.remove("hidden")) : e("globalrank_results").classList.add("hidden"), s.personalrank)
                    if (e("personalrank_results").classList.toggle("textual", 1 === s.personalrank), e("personalrank_results_data").innerHTML = 1 === s.personalrank ? "PERSONAL BEST" : s.personalrank, e("personalrank_results").classList.remove("hidden"), d[s.gametype]) {
                        let o = null;
                        switch (s.gametype) {
                            case "40l":
                                const e = a(Math.abs(d[s.gametype].endcontext.finalTime - t.finalTime));
                                o = `${e.m}:${e.s}.${e.ms}`;
                                break;
                            case "blitz":
                                o = `${Math.abs(d[s.gametype].endcontext.score - t.score).toLocaleString("en-US")} points`
                        }
                        e("personalrank_results_sub").innerHTML = `${o || ""}${o ? ` ${1 === s.personalrank ? "improvement" : "behind"} &bull; ` : ""}last PB was ${n(Date.parse(d[s.gametype].ts)).toUpperCase()} ago`
                    } else e("personalrank_results_sub").innerHTML = "this is your first game, play more to track your improvement";
                else e("personalrank_results").classList.add("hidden");
                1 == s.globalrank ? (vs.play("worldrecord"), Ze("globalbest", "WORLD RECORD!")) : 1 == s.personalrank && (vs.play("personalbest"), Ze("personalbest", "PERSONAL BEST!")), 1 == s.globalrank ? e("globalrank_results").classList.add("best") : e("globalrank_results").classList.remove("best"), 1 == s.personalrank ? (e("personalrank_results").classList.add("best"), d[s.gametype] = {
                    endcontext: t,
                    ts: (new Date).toISOString()
                }, C()) : e("personalrank_results").classList.remove("best")
            } else e("results").classList.remove("hasranks");
            const f = new fo;
            f.import(s.replay.data);
            const _ = f.getStarter().options.handling;
            e("handling_item_arr").textContent = _.arr, e("handling_item_das").textContent = _.das, e("handling_item_sdf").textContent = 41 == _.sdf ? "∞" : _.sdf, s.error && (s.error.includes("hacked") || s.error.includes("suspicious") || s.error.includes("already submitted")) && (s.error.includes("hacked") && (c = !0), s.error = void 0), e("results").classList.toggle("error", !!s.error), e("results").classList.toggle("disputed", !!(s.replay && s.replay.disputed_until > Date.now())), s.error && (e("submissionerror_results").textContent = s.error)
        }

        function I(e, t, s) {
            const a = document.createElement("tr");
            e.appendChild(a);
            const n = document.createElement("td");
            n.textContent = t, a.appendChild(n);
            const o = document.createElement("td");
            o.textContent = s, a.appendChild(o)
        }

        function M() {
            const e = {};
            return s("#custom_content_container .room_config_item[data-index]").forEach(t => {
                const s = t.getAttribute("data-index");
                let a;
                switch (t.getAttribute("type")) {
                    case "number":
                        a = parseFloat(t.value);
                        break;
                    case "checkbox":
                        a = !!t.checked;
                        break;
                    case "text":
                    default:
                        a = t.value
                }
                t.classList.contains("room_config_spinner") && (a = t.innerHTML), e[s] = a
            }), e
        }

        function C() {
            if (d["40l"]) {
                const t = a(d["40l"].endcontext.finalTime);
                e("pbdisplay_40l_inner").innerHTML = `${t.m}:${t.s}<span>.${t.ms}</span>`, e("pbdisplay_40l_inner").classList.remove("hidden"), e("pbdisplay_40l").classList.remove("hidden")
            } else e("pbdisplay_40l").classList.add("hidden"), e("pbdisplay_40l_inner").classList.add("hidden");
            d.blitz ? (e("pbdisplay_blitz_inner").innerHTML = d.blitz.endcontext.score.toLocaleString("en-US"), e("pbdisplay_blitz_inner").classList.remove("hidden"), e("pbdisplay_blitz").classList.remove("hidden")) : (e("pbdisplay_blitz").classList.add("hidden"), e("pbdisplay_blitz_inner").classList.add("hidden"))
        }
        return {
            playReplay: b,
            playReplayObject: y,
            playReplayByID: function(e, t) {
                ct("fetching replay…"), k.get(`/api/games/${encodeURIComponent(e)}`, {}, !0).then(e => {
                    dt(), y(e.game.data, e.game.user.username, e.game.gametype, t)
                }, e => {
                    dt(), S(e)
                })
            },
            playAgain: function(e) {
                switch (l) {
                    case "40l":
                        v(e);
                        break;
                    case "blitz":
                        e.song = "hyper-velocity", w(e);
                        break;
                    case "custom":
                        E(e)
                }
            },
            play40L: v,
            playBlitz: w,
            playZen: function(t) {
                l = "zen", st(!1), et("none"), ks.stop(), t.inroom || document.body.classList.contains("inpair") || document.body.classList.contains("matchmaking") || Va("online", "zen"), t.inroom && (e("mm_status").classList.add("room"), e("mm_status").classList.add("shown"), e("mm_status_header").innerHTML = "ZEN WHILE WAITING", e("mm_status_sub").textContent = t.roomname, document.body.classList.add("inmultizen")), (De = new ti).bindEventSource(new _o({
                    type: "keyboard"
                })), De.setGame({
                    version: Zo,
                    seed_random: !0,
                    allow180: !0,
                    countdown: !0,
                    countdown_interval: 1e3,
                    precountdown: t.inroom ? 0 : 3e3,
                    prestart: t.inroom ? 500 : 1e3,
                    zoominto: t.inroom ? "fast" : "slow",
                    display_zen: !0,
                    slot_bar2: "progress",
                    mission: t.inroom ? void 0 : io.gameMissions.zen,
                    mission_type: "mission_free",
                    objective: {
                        type: "none"
                    },
                    bgmnoreset: !0,
                    nosiren: !0,
                    infinitestock: !0,
                    zenlevels: !0,
                    zenlevel: L.level,
                    zenprogress: L.progress,
                    score: L.score,
                    map: L.map,
                    forfeit_time: t.inroom ? 1 : 30,
                    can_retry: !0,
                    retryisclear: !0,
                    usezenconfig: !0,
                    noreplay: !0,
                    garbagemultiplier: 1,
                    pro: !0,
                    b2bchaining: !0,
                    onstart: () => {
                        ks.playSmoothOrRandom("RANDOMcalm")
                    },
                    onquit: () => {
                        if (t.inroom) return e("mm_status").classList.remove("shown"), e("mm_status").classList.remove("room"), document.body.classList.remove("inmultizen"), st(!0), void et("lobby");
                        p.push(setTimeout(() => {
                            st(!0), et("home")
                        }, 600))
                    }
                }), De.createGameHolder(), De.startGame(), u = Date.now()
            },
            playCustom: E,
            testControls: function() {
                st(!1), (De = new ti).bindEventSource(new _o({
                    type: "keyboard"
                })), De.setGame({
                    version: Zo,
                    seed_random: !0,
                    g: .02,
                    allow180: !0,
                    countdown: !1,
                    precountdown: 0,
                    prestart: 250,
                    zoominto: "fast",
                    objective: {
                        type: "none"
                    },
                    can_retry: !1,
                    forfeit_time: 1,
                    display_username: !0,
                    username: `arr ${te.handling.arr}F,das ${te.handling.das}F,sdf ${41 == te.handling.sdf ? "∞" : `${te.handling.sdf}X`}`,
                    neverstopbgm: !0,
                    onend: () => {
                        p.push(setTimeout(() => {
                            st(!0)
                        }, 200))
                    }
                }), De.createGameHolder(), De.startGame()
            },
            showResults: T,
            showMultiLog: function(n) {
                n.endcontext[1].user._id === z.id() && n.endcontext.reverse();
                const i = n.endcontext[0].user,
                    l = n.endcontext[1].user;
                Xe.multilog.footer = `<a class="tetra_pop" data-hover="tap" data-hit="click" data-username="${r(i.username.replace('"', ""))}">${r(i.username.toUpperCase().toUpperCase())}</a> versus <a class="tetra_pop" data-hover="tap" data-hit="click" data-username="${r(l.username.replace('"', ""))}">${r(l.username.toUpperCase().toUpperCase())}</a> played on ${new Date(n.ts || Date.now()).toLocaleString()}`, Xe.multilog.back = n.back || "home", st(!0), et("multilog"), Qe(n.forcestyle || (n.shortid ? "tetra" : "victory")), n.shortid ? (e("multilogview").classList.remove("noreplay"), e("replayid_multilog").textContent = `R:${n.shortid}`) : e("multilogview").classList.add("noreplay"), o = n, e("multilog").innerHTML = "";
                let c = [],
                    d = [],
                    p = [],
                    u = [],
                    m = [],
                    g = [],
                    h = 0,
                    f = 0;
                n.data.forEach((t, s) => {
                    t.board[1].user._id === i._id && t.board.reverse();
                    const o = new fo;
                    if (o.import(t.replays[1]), !o.getStarter()) return;
                    o.getStarter().options.username === i.username && t.replays.reverse();
                    const r = document.createElement("div");
                    r.classList.add("multilog_result"), r.classList.add("scroller_block"), r.classList.add("zero"), r.setAttribute("data-hover", "tap"), r.setAttribute("data-hit", "click"), e("multilog").appendChild(r);
                    const _ = new fo;
                    _.import(t.replays[0]), _.amendTargets([l._id]);
                    const b = _.getEndEvent().data.export,
                        y = document.createElement("div");
                    y.classList.add("multilog_result_self"), t.board[0].success && (y.classList.add("success"), h++), t.replays[0].frames <= 5 && r.classList.add("multilog_result_unavailable"), y.innerHTML = t.replays[0].frames <= 5 ? "REPLAY UNAVAILABLE" : `${"disconnect" === _.getEndEvent().data.reason ? "forfeit - " : ""}<span>${b.aggregatestats.pps.toFixed(2)}</span> PPS - <span>${b.aggregatestats.apm.toFixed(2)}</span> APM - <span>${b.aggregatestats.vsscore.toFixed(2)}</span> VS`, r.appendChild(y), c.push(b.aggregatestats.pps), d.push(b.aggregatestats.apm), p.push(b.aggregatestats.vsscore);
                    const v = a(1e3 / 60 * Math.min(t.replays[0].frames || 0, t.replays[1].frames || 0)),
                        k = document.createElement("div");
                    k.classList.add("multilog_result_time"), k.classList.toggle("focusedround", n.context == s + 1), k.innerHTML = t.replays[0].frames <= 5 || t.replays[1].frames <= 5 ? "-:--" : `${v.m}:${v.s}`, r.appendChild(k);
                    const w = new fo;
                    w.import(t.replays[1]), w.amendTargets([i._id]);
                    const L = w.getEndEvent().data.export,
                        E = document.createElement("div");
                    E.classList.add("multilog_result_opponent"), t.board[1].success && (E.classList.add("success"), f++), t.replays[1].frames <= 5 && r.classList.add("multilog_result_unavailable"), E.innerHTML = t.replays[1].frames <= 5 ? "REPLAY UNAVAILABLE" : `<span>${L.aggregatestats.pps.toFixed(2)}</span> PPS - <span>${L.aggregatestats.apm.toFixed(2)}</span> APM - <span>${L.aggregatestats.vsscore.toFixed(2)}</span> VS${"disconnect" === w.getEndEvent().data.reason ? " - forfeit" : ""}`, r.appendChild(E), u.push(L.aggregatestats.pps), m.push(L.aggregatestats.apm), g.push(L.aggregatestats.vsscore), r.__replays__ = [_, w], r.__users__ = [i, l], r.__success__ = t.board[0].success, r.__roundid__ = s + 1, r.__datalength__ = n.data.length
                }), s("#multilog .multilog_result").forEach(e => {
                    let t = void 0,
                        s = void 0;
                    e.__roundid__ > 0 && e.previousElementSibling && !e.previousElementSibling.classList.contains("multilog_result_unavailable") && (t = () => {
                        e.previousElementSibling.click()
                    }), e.__roundid__ < n.data.length && e.nextElementSibling && !e.nextElementSibling.classList.contains("multilog_result_unavailable") && (s = () => {
                        e.nextElementSibling.click()
                    }), e.addEventListener("click", () => {
                        Kt(e.__replays__, e.__users__, e.__success__, ks.playing(), t, s, e.__roundid__, e.__datalength__)
                    })
                }), t("#multilog_self").setAttribute("data-username", i.username), t("#multilog_self .leagueplayer_name").textContent = i.username.toUpperCase(), t("#multilog_self .leagueplayer_count").textContent = h, t("#multilog_self .leagueplayer_extra").innerHTML = `<span>${(c.reduce((e, t) => e + t) / c.length).toFixed(2)}</span> PPS - <span>${(d.reduce((e, t) => e + t) / d.length).toFixed(2)}</span> APM - <span>${(p.reduce((e, t) => e + t) / p.length).toFixed(2)}</span> VS`, t("#multilog_self").classList.toggle("disconnected", !n.endcontext[0].active), t("#multilog_opponent").setAttribute("data-username", l.username), t("#multilog_opponent .leagueplayer_name").textContent = l.username.toUpperCase(), t("#multilog_opponent .leagueplayer_count").textContent = f, t("#multilog_opponent .leagueplayer_extra").innerHTML = `<span>${(u.reduce((e, t) => e + t) / u.length).toFixed(2)}</span> PPS - <span>${(m.reduce((e, t) => e + t) / m.length).toFixed(2)}</span> APM - <span>${(g.reduce((e, t) => e + t) / g.length).toFixed(2)}</span> VS`, t("#multilog_opponent").classList.toggle("disconnected", !n.endcontext[1].active)
            },
            setGameOpts: function(e) {
                s("#custom_content_container .room_config_item[data-index]").forEach(t => {
                    const s = t.getAttribute("data-index"),
                        a = getSetDescendantProp(e, s);
                    switch (t.getAttribute("type")) {
                        case "number":
                            t.value = a;
                            break;
                        case "checkbox":
                            t.checked = !!a;
                            break;
                        case "text":
                        default:
                            t.value = a
                    }
                    t.classList.contains("room_config_spinner") && (t.textContent = a)
                })
            },
            reportAbortedGame: _,
            anchorSeed: function(e) {
                g = `SESS-${Math.floor(Math.random() * Number.MAX_SAFE_INTEGER)}`, k.post("/api/games/anchor", {
                    seed: e
                }, !0, !1, !1, {
                    "X-Session-ID": g
                })
            },
            loadZen: function(e) {
                if (e)
                    if (localStorage.getItem("zenProgression")) {
                        const t = JSON.parse(localStorage.getItem("zenProgression"));
                        t.level + t.progress < e.level + e.progress && (L = e)
                    } else L = e
            },
            saveZen: function(e, t = 0) {
                L = e, localStorage.setItem("zenProgression", JSON.stringify(e)), z.anon() || (k.post("/api/games/zen", {
                    ...e,
                    timeplayed: Math.floor((Date.now() - u) / 1e3)
                }, !0).then(e => {
                    e.xp && (m += e.xp, t && p.push(setTimeout(() => {
                        Ps(m), m = 0
                    }, t)))
                }), u = Date.now())
            },
            getZen: () => L,
            resetZen: () => {
                L = {
                    map: `${"_".repeat(400)}?`,
                    level: 1,
                    progress: 0,
                    score: 0
                }, localStorage.removeItem("zenProgression")
            },
            stopNow: () => {
                De && De.endNow(), Qo.forEach(e => {
                    e.endNow()
                }), e("replay").classList.add("hidden"), e("replaytools").classList.add("disabled"), e("replaytools").classList.add("hidden"), p.forEach(e => {
                    clearTimeout(e)
                }), p = []
            },
            setRecords: e => {
                d = e, C()
            },
            setUnsafeTimeout: (...e) => {
                p.push(setTimeout(...e))
            }
        }
    })();
    let Ut = [],
        Bt = null,
        Xt = 0,
        zt = !1,
        Gt = !1,
        jt = "normal",
        Wt = null;

    function qt(t, n, o, i) {
        st(!1), ks.stop(), e("data_replay").innerHTML = `watching <span>${r(n)}</span> play <span>${r(io.longTypeNames[o] || o)}</span>`, e("replay").classList.remove("hidden"), e("replaytools").classList.remove("hidden"), e("replaytools").classList.remove("multi"), e("replaytools").classList.add("disabled"), s('.tab[data-scope="replaytools_secondary_right"]').forEach(e => {
            e.classList.remove("active")
        }), e("replaytools_button_1x").classList.add("active"), e("replaytools_button_playpause").innerHTML = "Ǥ", e("replaytools_timestamp").innerHTML = "0:00.000<span>frame 0</span>", e("replaytools_seekbar").setAttribute("style", "--progress: 0%;"), e("replaytools_seekbar_tip").setAttribute("style", ""), e("replaytools_button_playpause").classList.remove("disabled"), e("replaytools_button_nextround").classList.contains("active") && e("replaytools_button_end").click(), (De = new ti).bindEventSource(new _o({
            type: "replay",
            replay: t
        })), Ut = [], Bt = null, Xt = 0, zt = !1;
        const l = t.getStarter().options;
        l.display_replay = !0, l.display_username = !0, l.username = n, "custom" !== o && (l.countdown_interval = 1e3, l.precountdown = 5e3, l.prestart = 1e3, l.mission = io.gameMissions[o], l.zoominto = "slow", l.pro = !!te.gameoptions[`pro_${o}`], l.pro_alert = !!te.gameoptions[`pro_${o}_alert`], l.pro_retry = !!te.gameoptions[`pro_${o}_retry`], l.slot_counter1 = te.gameoptions[`slot_${o}_counter1`] || l.slot_counter1, l.slot_counter2 = te.gameoptions[`slot_${o}_counter2`] || l.slot_counter2, l.slot_counter3 = te.gameoptions[`slot_${o}_counter3`] || l.slot_counter3, l.slot_counter4 = te.gameoptions[`slot_${o}_counter4`] || l.slot_counter4, l.slot_counter5 = te.gameoptions[`slot_${o}_counter5`] || l.slot_counter5), l.onstart = () => {
            ks.playSmoothOrRandom("shiroi-hyoutan"), e("replaytools").classList.remove("disabled")
        }, l.onend = () => {
            e("replaytools").classList.add("disabled"), Ft.setUnsafeTimeout(() => {
                st(!0), ks.playSmooth(document.body.classList.contains("inpair") || document.body.classList.contains("matchmaking") ? "touhoudaiensei" : i || "shikiichi-made-mousukoshi"), e("replay").classList.add("hidden"), e("replaytools").classList.add("hidden")
            }, 500)
        };
        let c = 30;
        l.onframe = (t, s) => {
            if (!s) {
                const s = a(1e3 * (t + 1) / 60);
                e("replaytools_timestamp").innerHTML = `${s.m}:${s.s}.${s.ms}<span>frame ${t}</span>`, e("replaytools_seekbar").setAttribute("style", `--progress: ${t / Yt.frames * 100}%;`)
            }
            if (t === Yt.frames) {
                if (e("replaytools_button_stop").classList.contains("active")) return De.playbackSpeed() && (e("replaytools_button_playpause").innerHTML = "ǣ", De.playbackSpeed(0)), !0;
                if (e("replaytools_button_loop").classList.contains("active")) return !(--c <= 0) || (c = 30, void De.injectState(Yt.states[0]))
            }
        }, Yt = Nt(t, l, o);
        let d = [],
            p = 15;
        if ("40l" === o || "custom" === o ? (d = Yt.localPPSFrames, p = 15) : "blitz" === o && (d = Yt.localSPPFrames, p = 40), d.length <= 1e3) {
            let t = 0,
                s = 999;
            d.forEach(e => {
                t = Math.max(t, e[1]), s = Math.min(s, e[1])
            });
            let a = "clip-path: polygon(100% 100%, 0% 100%";
            d.forEach(e => {
                a += s / t < .1 ? `, ${e[0] / Yt.frames * 100}% ${100 - e[1] / t * 100}%` : `, ${e[0] / Yt.frames * 100}% ${90 - (e[1] - s) / (t - s) * 90}%`
            }), a += "); ", d.length > p && (a += `background: linear-gradient(to right, #FFF0 0%, #FF780022 ${d[p][0] / Yt.frames * 100}%, #FF780022 100%);`), e("replaytools_graph").setAttribute("style", a)
        } else e("replaytools_graph").setAttribute("style", "");
        let u = "";
        "40l" === o && (Yt.finesseFaultFrames.length <= 30 && Yt.finesseFaultFrames.forEach(e => {
            u += `<div class="replaytools_marker_finesse" style="left: ${e / Yt.frames * 100}%;"></div>`
        }), Yt.chokeFrames.length <= 5 && Yt.chokeFrames.forEach(e => {
            u += `<div class="replaytools_marker_choke" style="left: ${e[0] / Yt.frames * 100}%; width: ${e[1] / Yt.frames * 100}%;"></div>`
        })), e("replaytools_markers").innerHTML = u, De.setGame(l), De.createGameHolder(), De.location(0, -.1, 1), De.startGame()
    }

    function Kt(t, n, o, i, l, c, d, p) {
        st(!1), zt = !0, Gt = !1, jt = "normal", i && "shiroi-hyoutan" !== i && (ks.stop(), Wt = i), e("data_replay").innerHTML = `watching <span>${r(n[0].username.toUpperCase())}</span> VS <span>${r(n[1].username.toUpperCase())}</span>${c || l ? `, round <span>${d}</span>${Un(`/${p}`)}` : ""}`, e("replay").classList.remove("hidden"), e("replaytools").classList.remove("hidden"), e("replaytools").classList.add("disabled"), e("replaytools").classList.add("multi"), s('.tab[data-scope="replaytools_secondary_right"]').forEach(e => {
            e.classList.remove("active")
        }), e("replaytools_button_1x").classList.add("active"), e("replaytools_button_playpause").innerHTML = "Ǥ", e("replaytools_timestamp").innerHTML = "0:00.000<span>frame 0</span>", e("replaytools_seekbar").setAttribute("style", "--progress: 0%;"), e("replaytools_seekbar_tip").setAttribute("style", ""), e("replaytools").classList.toggle("multiround", l || c), e("replaytools_button_backward_round").classList.toggle("disabled", void 0 === l), e("replaytools_button_forward_round").classList.toggle("disabled", void 0 === c), e("replaytools_button_playpause").classList.remove("disabled"), !e("replaytools_button_nextround").classList.contains("active") || l || c || e("replaytools_button_end").click(), qs = Xs();
        const u = new ti;
        u.bindEventSource(new _o({
            type: "replay",
            replay: t[0]
        })), qs.attachFake(u, {
            listenID: n[0]._id,
            user: {
                _id: n[0]._id,
                username: n[0].username
            }
        });
        const m = new ti;
        m.bindEventSource(new _o({
            type: "replay",
            replay: t[1]
        })), qs.attachFake(m, {
            listenID: n[1]._id,
            user: {
                _id: n[1]._id,
                username: n[1].username
            }
        });
        const g = t[0].getStarter().options;
        g.display_replay = !0, g.countdown_interval = 1e3, g.countdown_count = 3, g.precountdown = 500, g.prestart = 1e3, g.mission = null, g.force_mission = !0, g.zoominto = "slow", g.physical = !1, g.noscope = !1, g.neverstopbgm = !0;
        const h = t[1].getStarter().options;
        h.display_replay = !0, h.countdown_interval = 1e3, h.countdown_count = 3, h.precountdown = 500, h.prestart = 1e3, h.mission = null, h.zoominto = "slow", h.physical = !1, h.noscope = !1, h.neverstopbgm = !0, g.onstart = () => {
            i && "shiroi-hyoutan" !== i && ks.playSmoothOrRandom("shiroi-hyoutan"), e("replaytools").classList.remove("disabled")
        };
        let f = !1;
        g.onend = () => {
            if (!f) {
                if (f = !0, e("replaytools").classList.add("disabled"), e("replaytools_button_backward_round").classList.add("disabled"), e("replaytools_button_forward_round").classList.add("disabled"), e("replaytools_button_playpause").classList.add("disabled"), Gt ? Gt = !1 : o ? m.queueEnd("topout", !0) : m.endWin(), ("next" === jt || "normal" === jt && e("replaytools_button_nextround").classList.contains("active")) && c) return Ft.setUnsafeTimeout(() => {
                    Ut = [], Bt = null, zt = !1, qs.detachFakes()
                }, "next" === jt ? 50 : 500), void Ft.setUnsafeTimeout(() => {
                    m.endNow(), c()
                }, "next" === jt ? 100 : 1e3);
                if ("prev" === jt && l) return Ft.setUnsafeTimeout(() => {
                    Ut = [], Bt = null, zt = !1, qs.detachFakes()
                }, "prev" === jt ? 50 : 500), void Ft.setUnsafeTimeout(() => {
                    m.endNow(), l()
                }, "prev" === jt ? 100 : 1e3);
                ks.stop(200), Ft.setUnsafeTimeout(() => {
                    st(!0), ks.playSmooth(document.body.classList.contains("inpair") || document.body.classList.contains("matchmaking") ? "touhoudaiensei" : Wt || i || "shikiichi-made-mousukoshi"), e("replay").classList.add("hidden"), e("replaytools").classList.add("hidden"), Ut = [], Bt = null, zt = !1, qs.detachFakes()
                }, 500), Ft.setUnsafeTimeout(() => {
                    m.endNow()
                }, 1e3)
            }
        }, h.onend = () => {
            if (!f) {
                if (f = !0, e("replaytools").classList.add("disabled"), e("replaytools_button_backward_round").classList.add("disabled"), e("replaytools_button_forward_round").classList.add("disabled"), e("replaytools_button_playpause").classList.add("disabled"), Gt ? Gt = !1 : o ? u.endWin() : u.queueEnd("topout", !0), ("next" === jt || "normal" === jt && e("replaytools_button_nextround").classList.contains("active")) && c) return Ft.setUnsafeTimeout(() => {
                    Ut = [], Bt = null, zt = !1, qs.detachFakes()
                }, "next" === jt ? 50 : 500), void Ft.setUnsafeTimeout(() => {
                    u.endNow(), c()
                }, "next" === jt ? 100 : 1e3);
                if ("prev" === jt && l) return Ft.setUnsafeTimeout(() => {
                    Ut = [], Bt = null, zt = !1, qs.detachFakes()
                }, "prev" === jt ? 50 : 500), void Ft.setUnsafeTimeout(() => {
                    u.endNow(), l()
                }, "prev" === jt ? 100 : 1e3);
                ks.stop(200), Ft.setUnsafeTimeout(() => {
                    st(!0), ks.playSmooth(document.body.classList.contains("inpair") || document.body.classList.contains("matchmaking") ? "touhoudaiensei" : Wt || i || "shikiichi-made-mousukoshi"), e("replay").classList.add("hidden"), e("replaytools").classList.add("hidden"), Ut = [], Bt = null, zt = !1, qs.detachFakes()
                }, 500), Ft.setUnsafeTimeout(() => {
                    u.endNow()
                }, 1e3)
            }
        };
        let _ = 30,
            b = 0;
        g.onframe = (t, s) => {
            if (!f) {
                if (!s) {
                    const s = a(1e3 * (t + 1) / 60);
                    e("replaytools_timestamp").innerHTML = `${s.m}:${s.s}.${s.ms}<span>frame ${t}</span>`, e("replaytools_seekbar").setAttribute("style", `--progress: ${t / Xt * 100}%;`)
                }
                if (t === Xt) {
                    if (2 === b) return !0;
                    if (e("replaytools_button_stop").classList.contains("active")) return u.playbackSpeed() && (e("replaytools_button_playpause").innerHTML = "ǣ", u.playbackSpeed(0), m.playbackSpeed(0)), !0;
                    if (e("replaytools_button_loop").classList.contains("active")) return !(--_ <= 0) || (_ = 30, u.injectState(Ut[0].states[0]), m.injectState(Ut[1].states[0]), void(b = 1))
                } else b = 0
            }
        }, h.onframe = (t, s) => {
            if (!f)
                if (t === Ut[1].frames) {
                    if (1 === b) return !0;
                    if (e("replaytools_button_stop").classList.contains("active")) return u.playbackSpeed() && (e("replaytools_button_playpause").innerHTML = "ǣ", u.playbackSpeed(0), m.playbackSpeed(0)), !0;
                    if (e("replaytools_button_loop").classList.contains("active")) return !(--_ <= 0) || (_ = 30, u.injectState(Ut[0].states[0]), m.injectState(Ut[1].states[0]), void(b = 2))
                } else b = 0
        }, Ut[0] = Nt(t[0], g, "multi"), Ut[1] = Nt(t[1], h, "multi"), Xt = Math.min(Ut[0].frames, Ut[1].frames), (Bt = [...Ut[0].pieceFrames, ...Ut[1].pieceFrames]).push(Xt), (Bt = Bt.filter((function(e, t) {
            return Bt.indexOf(e) == t && e <= Xt
        }))).sort((e, t) => e - t);
        let y = Ut[0].vsFrames,
            v = Ut[1].vsFrames;
        v.splice(y.length), y.splice(v.length);
        let k = [];
        y.forEach((e, t) => {
            k.push([e[0], y[t][1] - v[t][1]])
        });
        if (k.length <= 1e3) {
            let t = 1,
                s = -1;
            k.forEach(e => {
                t = Math.max(t, e[1]), s = Math.min(s, e[1])
            }), t = Math.max(t, -.5 * s), s = Math.min(s, -.5 * t);
            let a = "clip-path: polygon(100% 50%, 0% 50%";
            k.forEach(e => {
                e[1] >= 0 ? a += `, ${e[0] / Xt * 100}% ${50 - e[1] / t * 50}%` : a += `, ${e[0] / Xt * 100}% ${50 + e[1] / s * 50}%`
            }), a += ");", e("replaytools_graph").setAttribute("style", a)
        } else e("replaytools_graph").setAttribute("style", "");
        e("replaytools_markers").innerHTML = "", u.setGame(g), u.createGameHolder(), u.location(-.35, -.1, 1), u.startGame(), m.setGame(h), m.createGameHolder(), m.location(.45, -.1, 1), m.startGame()
    }
    let Yt = null;
    U.ready(() => {
        document.addEventListener("keydown", t => {
            e("replay").classList.contains("hidden") || document.body.classList.contains("chatfocus") || ht >= 1 || (["ARROWLEFT", "LEFT"].includes(me(t)) ? t.shiftKey ? e("replaytools_button_backward_frame").click() : t.ctrlKey ? e("replaytools_button_backward_large").click() : e("replaytools_button_backward_piece").click() : ["ARROWRIGHT", "RIGHT"].includes(me(t)) ? t.shiftKey ? e("replaytools_button_forward_frame").click() : t.ctrlKey ? e("replaytools_button_forward_large").click() : e("replaytools_button_forward_piece").click() : [",", "COMMA"].includes(me(t)) ? e("replaytools_button_backward_frame").click() : [".", "PERIOD"].includes(me(t)) ? e("replaytools_button_forward_frame").click() : ["J", "KEYJ"].includes(me(t)) ? e("replaytools_button_backward_large").click() : ["L", "KEYL"].includes(me(t)) ? e("replaytools_button_forward_large").click() : ["K", "KEYK", "SPACE", " "].includes(me(t)) ? e("replaytools_button_playpause").click() : ["ARROWUP", "UP"].includes(me(t)) ? e("replaytools_button_5x").classList.contains("active") ? e("replaytools_button_10x").click() : e("replaytools_button_2x").classList.contains("active") ? e("replaytools_button_5x").click() : e("replaytools_button_1x").classList.contains("active") ? e("replaytools_button_2x").click() : e("replaytools_button_50x").classList.contains("active") ? e("replaytools_button_1x").click() : e("replaytools_button_25x").classList.contains("active") && e("replaytools_button_50x").click() : ["ARROWDOWN", "DOWN"].includes(me(t)) && (e("replaytools_button_10x").classList.contains("active") ? e("replaytools_button_5x").click() : e("replaytools_button_5x").classList.contains("active") ? e("replaytools_button_2x").click() : e("replaytools_button_2x").classList.contains("active") ? e("replaytools_button_1x").click() : e("replaytools_button_1x").classList.contains("active") ? e("replaytools_button_50x").click() : e("replaytools_button_50x").classList.contains("active") && e("replaytools_button_25x").click()), t.repeat || Object.keys(ae).forEach(s => {
                if (ae[s].includes(me(t) || t.detail.toUpperCase())) switch (s) {
                    case "exit":
                        e("exit_replay").click()
                }
            }))
        }, !1), e("exit_replay").addEventListener("click", (function(e) {
            zt || De.end()
        })), e("replaytools_button_25x").addEventListener("click", (function(e) {
            zt || De.playbackSpeed() && De.playbackSpeed(.25)
        })), e("replaytools_button_50x").addEventListener("click", (function(e) {
            zt || De.playbackSpeed() && De.playbackSpeed(.5)
        })), e("replaytools_button_1x").addEventListener("click", (function(e) {
            zt || De.playbackSpeed() && De.playbackSpeed(1)
        })), e("replaytools_button_2x").addEventListener("click", (function(e) {
            zt || De.playbackSpeed() && De.playbackSpeed(2)
        })), e("replaytools_button_5x").addEventListener("click", (function(e) {
            zt || De.playbackSpeed() && De.playbackSpeed(5)
        })), e("replaytools_button_10x").addEventListener("click", (function(e) {
            zt || De.playbackSpeed() && De.playbackSpeed(10)
        })), e("replaytools_button_playpause").addEventListener("click", (function(t) {
            if (!zt) {
                if (De.playbackSpeed()) return e("replaytools_button_playpause").innerHTML = "ǣ", void De.playbackSpeed(0);
                e("replaytools_button_25x").classList.contains("active") ? De.playbackSpeed(.25) : e("replaytools_button_50x").classList.contains("active") ? De.playbackSpeed(.5) : e("replaytools_button_1x").classList.contains("active") ? De.playbackSpeed(1) : e("replaytools_button_2x").classList.contains("active") ? De.playbackSpeed(2) : e("replaytools_button_5x").classList.contains("active") ? De.playbackSpeed(5) : e("replaytools_button_10x").classList.contains("active") && De.playbackSpeed(10), e("replaytools_button_playpause").innerHTML = "Ǥ"
            }
        })), e("replaytools_button_forward_frame").addEventListener("click", (function(t) {
            if (zt) return;
            if (e("replaytools").classList.contains("disabled")) return;
            De.export().source.getFrame() >= Yt.frames || De.advanceFrames(1)
        })), e("replaytools_button_forward_piece").addEventListener("click", (function(t) {
            if (zt) return;
            if (e("replaytools").classList.contains("disabled")) return;
            const s = De.export().source.getFrame();
            for (let e = 0; e < Yt.pieceFrames.length; e++)
                if (Yt.pieceFrames[e] > s) return void De.advanceFrames(Yt.pieceFrames[e] - s)
        })), e("replaytools_button_forward_large").addEventListener("click", (function(t) {
            if (zt) return;
            if (e("replaytools").classList.contains("disabled")) return;
            const s = De.export().source.getFrame();
            s >= Yt.frames || De.advanceFrames(Math.min(Yt.frames - s, 300), !0)
        })), e("replaytools_button_backward_frame").addEventListener("click", (function(t) {
            zt || e("replaytools").classList.contains("disabled") || o(De, Yt, 1)
        })), e("replaytools_button_backward_piece").addEventListener("click", (function(t) {
            if (zt) return;
            if (e("replaytools").classList.contains("disabled")) return;
            const s = De.export().source.getFrame();
            for (let e = Yt.pieceFrames.length - 1; e >= 0; e--)
                if (Yt.pieceFrames[e] < s) return void o(De, Yt, s - Yt.pieceFrames[e])
        })), e("replaytools_button_backward_large").addEventListener("click", (function(t) {
            zt || e("replaytools").classList.contains("disabled") || o(De, Yt, 300)
        }));
        let t = !1,
            s = !1;

        function n(e, t, s) {
            const a = Math.max(0, s - 1),
                n = Math.floor(a / 300),
                o = a - 300 * n;
            e.injectState(t.states[n]), e.advanceFrames(o, !0), e.export().options.onframe(a, !1)
        }

        function o(e, t, s) {
            const a = e.export().source.getFrame();
            n(e, t, a - s)
        }
        e("replaytools_seekbar").addEventListener("mouseover", e => {
            s = !0
        }), e("replaytools_seekbar").addEventListener("mouseout", e => {
            s = !1
        }), e("replaytools_seekbar").addEventListener("mousedown", (function(s) {
            if (zt) return;
            if (e("replaytools").classList.contains("disabled")) return;
            t = !0;
            const a = De.export().source.getFrame(),
                o = Math.floor(Math.min(1, Math.max(0, (s.clientX - 16) / (window.innerWidth - 32))) * Yt.frames);
            a !== o && n(De, Yt, o)
        })), document.addEventListener("mouseup", e => {
            zt || (t = !1)
        }), document.addEventListener("mousemove", o => {
            if (!zt) {
                if (t) {
                    const e = De.export().source.getFrame(),
                        t = Math.floor(Math.min(1, Math.max(0, (event.clientX - 16) / (window.innerWidth - 32))) * Yt.frames);
                    e !== t && n(De, Yt, t)
                }
                if (s) {
                    const t = Math.floor(Math.min(1, Math.max(0, (event.clientX - 16) / (window.innerWidth - 32))) * Yt.frames),
                        s = t / Yt.frames * 100;
                    e("replaytools_seekbar_tip").setAttribute("style", `--progress: ${s}%;`), e("replaytools_seekbar").setAttribute("data-border-snapped", s <= 10 ? "left" : s >= 90 ? "right" : "none");
                    const n = a(1e3 * t / 60);
                    let o = "",
                        i = "",
                        r = "";
                    if ("40l" === Yt.gametype || "custom" === Yt.gametype) {
                        for (let e = Yt.localPPSFrames.length - 1; e >= 0; e--)
                            if (Yt.localPPSFrames[e][0] <= t) {
                                o = `<div class="seekbar_tip_stat"><span>${Yt.localPPSFrames[e][1].toFixed(2)}</span> ${Un("L")}PPS</div>`;
                                break
                            }
                    } else if ("blitz" === Yt.gametype)
                        for (let e = Yt.localSPPFrames.length - 1; e >= 0; e--)
                            if (Yt.localSPPFrames[e][0] <= t) {
                                o = `<div class="seekbar_tip_stat"><span>${Yt.localSPPFrames[e][1].toFixed(2)}</span> ${Un("L")}SPP</div>`;
                                break
                            } if ("40l" === Yt.gametype) {
                        let e = 0;
                        for (let s = t - 30; s < t + 30; s++) Yt.finesseFaultFrames.includes(s) && e++;
                        e && (i = `<div class="seekbar_tip_issue"><b>${e}</b> finesse piece${1 === e ? "" : "s"}</div>`);
                        for (let e = 0; e < Yt.chokeFrames.length; e++)
                            if (Yt.chokeFrames[e][0] - 30 <= t && Yt.chokeFrames[e][0] + Yt.chokeFrames[e][1] + 30 >= t) {
                                r = `<div class="seekbar_tip_issue_severe">±<b>${Math.round(1e3 * Yt.chokeFrames[e][1] / 60)}</b>${Un("MS")} choke</div>`;
                                break
                            }
                    }
                    e("replaytools_seekbar_tip").innerHTML = `\n\t\t\t\t<div class="seekbar_tip_time">${n.m}:${n.s}.${n.ms}</div>\n\t\t\t\t${o}\n\t\t\t\t${i}\n\t\t\t\t${r}\n\t\t\t`
                }
            }
        }), e("exit_replay").addEventListener("click", (function(e) {
            zt && (Gt = !0, jt = "exit", qs.games.others.forEach((e, t) => {
                e.game.end()
            }))
        })), e("replaytools_button_backward_round").addEventListener("click", (function(e) {
            zt && (Gt = !0, jt = "prev", qs.games.others.forEach((e, t) => {
                e.game.end()
            }))
        })), e("replaytools_button_forward_round").addEventListener("click", (function(e) {
            zt && (Gt = !0, jt = "next", qs.games.others.forEach((e, t) => {
                e.game.end()
            }))
        })), e("replaytools_button_25x").addEventListener("click", (function(e) {
            zt && qs.games.others[0].game.playbackSpeed() && qs.games.others.forEach((e, t) => {
                e.game.playbackSpeed(.25)
            })
        })), e("replaytools_button_50x").addEventListener("click", (function(e) {
            zt && qs.games.others[0].game.playbackSpeed() && qs.games.others.forEach((e, t) => {
                e.game.playbackSpeed(.5)
            })
        })), e("replaytools_button_1x").addEventListener("click", (function(e) {
            zt && qs.games.others[0].game.playbackSpeed() && qs.games.others.forEach((e, t) => {
                e.game.playbackSpeed(1)
            })
        })), e("replaytools_button_2x").addEventListener("click", (function(e) {
            zt && qs.games.others[0].game.playbackSpeed() && qs.games.others.forEach((e, t) => {
                e.game.playbackSpeed(2)
            })
        })), e("replaytools_button_5x").addEventListener("click", (function(e) {
            zt && qs.games.others[0].game.playbackSpeed() && qs.games.others.forEach((e, t) => {
                e.game.playbackSpeed(5)
            })
        })), e("replaytools_button_10x").addEventListener("click", (function(e) {
            zt && qs.games.others[0].game.playbackSpeed() && qs.games.others.forEach((e, t) => {
                e.game.playbackSpeed(10)
            })
        })), e("replaytools_button_playpause").addEventListener("click", (function(t) {
            if (zt) {
                if (qs.games.others[0].game.playbackSpeed()) return e("replaytools_button_playpause").innerHTML = "ǣ", void qs.games.others.forEach((e, t) => {
                    e.game.playbackSpeed(0)
                });
                e("replaytools_button_25x").classList.contains("active") ? qs.games.others.forEach((e, t) => {
                    e.game.playbackSpeed(.25)
                }) : e("replaytools_button_50x").classList.contains("active") ? qs.games.others.forEach((e, t) => {
                    e.game.playbackSpeed(.5)
                }) : e("replaytools_button_1x").classList.contains("active") ? qs.games.others.forEach((e, t) => {
                    e.game.playbackSpeed(1)
                }) : e("replaytools_button_2x").classList.contains("active") ? qs.games.others.forEach((e, t) => {
                    e.game.playbackSpeed(2)
                }) : e("replaytools_button_5x").classList.contains("active") ? qs.games.others.forEach((e, t) => {
                    e.game.playbackSpeed(5)
                }) : e("replaytools_button_10x").classList.contains("active") && qs.games.others.forEach((e, t) => {
                    e.game.playbackSpeed(10)
                }), e("replaytools_button_playpause").innerHTML = "Ǥ"
            }
        })), e("replaytools_button_forward_frame").addEventListener("click", (function(t) {
            if (!zt) return;
            if (e("replaytools").classList.contains("disabled")) return;
            qs.games.others[0].game.export().source.getFrame() >= Xt || qs.games.others.forEach((e, t) => {
                e.game.advanceFrames(1)
            })
        })), e("replaytools_button_forward_piece").addEventListener("click", (function(t) {
            if (!zt) return;
            if (e("replaytools").classList.contains("disabled")) return;
            const s = qs.games.others[0].game.export().source.getFrame();
            for (let e = 0; e < Bt.length; e++)
                if (Bt[e] > s) return void qs.games.others.forEach((t, a) => {
                    t.game.advanceFrames(Bt[e] - s)
                })
        })), e("replaytools_button_forward_large").addEventListener("click", (function(t) {
            if (!zt) return;
            if (e("replaytools").classList.contains("disabled")) return;
            const s = qs.games.others[0].game.export().source.getFrame();
            s >= Xt || qs.games.others.forEach((e, t) => {
                e.game.advanceFrames(Math.min(Xt - s, 300), !0)
            })
        })), e("replaytools_button_backward_frame").addEventListener("click", (function(t) {
            zt && (e("replaytools").classList.contains("disabled") || qs.games.others.forEach((e, t) => {
                o(e.game, Ut[t], 1)
            }))
        })), e("replaytools_button_backward_piece").addEventListener("click", (function(t) {
            if (!zt) return;
            if (e("replaytools").classList.contains("disabled")) return;
            const s = qs.games.others[0].game.export().source.getFrame();
            for (let e = Bt.length - 1; e >= 0; e--)
                if (Bt[e] < s) return void qs.games.others.forEach((t, a) => {
                    o(t.game, Ut[a], s - Bt[e])
                })
        })), e("replaytools_button_backward_large").addEventListener("click", (function(t) {
            zt && (e("replaytools").classList.contains("disabled") || qs.games.others.forEach((e, t) => {
                o(e.game, Ut[t], 300)
            }))
        })), e("replaytools_seekbar").addEventListener("mousedown", (function(s) {
            if (!zt) return;
            if (e("replaytools").classList.contains("disabled")) return;
            t = !0;
            const a = qs.games.others[0].game.export().source.getFrame(),
                o = Math.floor(Math.min(1, Math.max(0, (s.clientX - 16) / (window.innerWidth - 32))) * Xt);
            a !== o && qs.games.others.forEach((e, t) => {
                n(e.game, Ut[t], o)
            })
        })), document.addEventListener("mouseup", e => {
            zt && (t = !1)
        }), document.addEventListener("mousemove", o => {
            if (zt) {
                if (t) {
                    const e = qs.games.others[0].game.export().source.getFrame(),
                        t = Math.floor(Math.min(1, Math.max(0, (event.clientX - 16) / (window.innerWidth - 32))) * Xt);
                    e !== t && qs.games.others.forEach((e, s) => {
                        n(e.game, Ut[s], t)
                    })
                }
                if (s) {
                    const t = Math.floor(Math.min(1, Math.max(0, (event.clientX - 16) / (window.innerWidth - 32))) * Xt),
                        s = t / Xt * 100;
                    e("replaytools_seekbar_tip").setAttribute("style", `--progress: ${s}%;`), e("replaytools_seekbar").setAttribute("data-border-snapped", s <= 10 ? "left" : s >= 90 ? "right" : "none");
                    const n = a(1e3 * t / 60);
                    let o = 0,
                        i = 0;
                    for (let e = Ut[0].vsFrames.length - 1; e >= 0; e--)
                        if (Ut[0].vsFrames[e][0] <= t) {
                            o = Ut[0].vsFrames[e][1];
                            break
                        } for (let e = Ut[1].vsFrames.length - 1; e >= 0; e--)
                        if (Ut[1].vsFrames[e][0] <= t) {
                            i = Ut[1].vsFrames[e][1];
                            break
                        } e("replaytools_seekbar_tip").innerHTML = `\n\t\t\t\t<div class="seekbar_tip_time">${n.m}:${n.s}.${n.ms}</div>\n\t\t\t\t<div class="seekbar_tip_stat"><span class="sl">${o.toFixed(2)}</span> VS --- <span class="sr">${i.toFixed(2)}</span> VS</div>\n\t\t\t`
                }
            }
        })
    }), U.ready((function(e) {
        is(!0), window.addEventListener("resize", () => {
            is(!0)
        }, !1), setTimeout(() => {
            is(!0)
        }, 10)
    }));
    let Vt = 0,
        Zt = 1,
        Jt = 0;
    const Qt = 30;
    let es = 0,
        ts = 0;
    const ss = 1600,
        as = 800;
    let ns = 1,
        os = !0;

    function is(e) {
        (e || os) && (e || (os = !1), Vt = window.innerWidth, Zt = window.innerHeight, Jt = Vt / Math.max(1, Zt), cz = te.video.zoom || 1, Jt < 2 ? (es = Vt - 2 * Qt, ts = (Vt - 2 * Qt) / 2) : (es = 2 * (Zt - 2 * Qt), ts = Zt - 2 * Qt), ns = es / ss * cz, s('canvas[data-fit="screen"]').forEach(e => {
            e.width = Vt, e.height = Zt
        }), s('canvas[data-fit="contain"]').forEach(e => {
            e.width = es, e.height = ts
        }), s('canvas[data-fit="constrain"]').forEach(e => {
            e.width = e.getAttribute("data-w") * ns, e.height = e.getAttribute("data-h") * ns
        }), document.documentElement.style.setProperty("--r", ns), wn && (Cn(), wn.position.set((Vt - es * cz) / 2, (Zt - ts * cz) / 2), hn && hn.fit()), Qo && e && Qo.forEach(e => {
            e.flushCanvases()
        }))
    }

    function rs() {
        Qo && Qo.forEach(e => {
            "tiny" !== e.getDisplayMode() && e.flushCanvases()
        })
    }

    function ls(e) {
        return e * ns
    }

    function cs(e) {
        return e / ns
    }

    function ds(e) {
        return e * (30 / 92)
    }

    function ps(e) {
        return e / (30 / 92)
    }

    function us(e) {
        return ls(ds(e))
    }

    function ms(e) {
        return cs(ps(e))
    }
    const gs = new Howl({
            src: `/sfx/tetrio.ogg${window.HARD_VER ? `?hv=${window.HARD_VER}` : ""}`,
            sprite: TETRIO_SE_SHEET,
            preload: !1,
            pool: 5,
            volume: 0,
            onload: () => {
                U.finishLoad("sfx")
            },
            onloaderror: (e, t) => {
                console.error(`Could not load sounds [${e}]: ${t}`)
            }
        }),
        hs = new Howl({
            src: "/res/silence.ogg",
            loop: !0
        }),
        fs = ["mission", "mission_free", "mission_versus", "mission_league", "cutin_superlobby", "victory", "failure", "matchintro"],
        _s = ["social_dm", "social_invite", "social_notify_major", "social_notify_minor", "social_offline", "social_online"];
    g(() => {
        gs.load()
    }), U.ready((function(e) {
        hs.play()
    }));
    let bs = 0,
        ys = null;
    const vs = {
            play: function(e, t = 1, s = 0, a = !1) {
                if (!0 === te.volume.disable) return;
                if (["o", "l", "j", "z", "s", "t", "i"].includes(e) && !1 === te.volume.next && !a) return;
                if (["garbage_out_small", "garbage_in_small", "garbage_out_medium", "garbage_in_medium", "garbage_out_large", "garbage_in_large", "counter", "offset", "damage_small", "damage_medium", "damage_large", "impact", "damage_alert"].includes(e) && ("minimal" === te.video.graphics || !1 === te.volume.attacks) && !a) return;
                let n = 1;
                if ((n = fs.includes(e) ? Math.min(t * te.volume.music, 1) : te.notifications.forcesound && _s.includes(e) ? 1 : Math.min(t * te.volume.sfx, 1)) <= 0) return;
                const o = gs.play(e);
                return gs.volume(n, o), "minimal" !== te.video.graphics && 0 !== s && gs.stereo(s, o), "minimal" !== te.video.graphics && "elim" === e && (ys && (clearTimeout(ys), ys = null), gs.rate(Math.min(2, Math.pow(1.05946, bs++)), o), ys = setTimeout(() => {
                    bs = 0, ys = null
                }, 1e4)), o
            },
            playIngame: function(e, t, s, a, n, o, i = 1) {
                if (!0 === te.volume.disable) return;
                if (!o && ("minimal" === te.video.graphics || !1 === te.volume.others)) return;
                if ("full" !== t) {
                    if ("tiny" === t) return;
                    a *= n ? .2 : .05
                }
                if (n && 0 !== i || (a *= i), 0 === a) return;
                const r = Math.max(-1, Math.min(1, s * (void 0 === te.volume.stereo ? .5 : te.volume.stereo)));
                return this.play(e, a, r)
            },
            stop: function(e) {
                !0 !== te.volume.disable && gs.stop(e)
            }
        },
        ks = function() {
            let e, t = 0,
                s = null;
            const a = {
                    "kuchu-toshi": {
                        name: "aerial city",
                        jpname: "空中都市",
                        artist: "CHIKA",
                        jpartist: "ちか",
                        genre: "INTERFACE",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 11831,
                        loopLength: 80748
                    },
                    "shikiichi-made-mousukoshi": {
                        name: "to the limit",
                        jpname: "閾値までもうすこし",
                        artist: "KAMIYA",
                        jpartist: "守已",
                        genre: "INTERFACE",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 3719,
                        loopLength: 89312
                    },
                    touhoudaiensei: {
                        name: "the great eastern expedition",
                        jpname: "東方大遠征",
                        artist: "TAKAYUKI",
                        jpartist: "たかゆき",
                        genre: "INTERFACE",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 10694,
                        loopLength: 205986
                    },
                    "asayake-no-taiyou": {
                        name: "morning sun",
                        jpname: "朝焼けの太陽",
                        artist: "KAMOKING",
                        jpartist: "カモキング",
                        genre: "INTERFACE",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 3009,
                        loopLength: 63999
                    },
                    "in-sorrow-and-pains": {
                        name: "in sorrow and pains",
                        jpname: "in sorrow and pains",
                        artist: "MIRERA",
                        jpartist: "ミレラ",
                        genre: "INTERFACE",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 4503,
                        loopLength: 94030
                    },
                    "honemi-ni-shimiiru-karasukaze": {
                        name: "piercing wind",
                        jpname: "骨身に染み入るカラス風",
                        artist: "KVK",
                        jpartist: "KVK",
                        genre: "CALM",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 7432,
                        loopLength: 142958
                    },
                    inorimichite: {
                        name: "inorimichite",
                        jpname: "イノリミチテ",
                        artist: "CHIKA",
                        jpartist: "ちか",
                        genre: "CALM",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 15670,
                        loopLength: 181685
                    },
                    "kaze-no-sanpomichi": {
                        name: "wind trail",
                        jpname: "風の散歩道",
                        artist: "CHIKA",
                        jpartist: "ちか",
                        genre: "CALM",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 12865,
                        loopLength: 214284
                    },
                    "muscat-to-shiroi-osara": {
                        name: "muscat and white dishes",
                        jpname: "マスカットと白いお皿",
                        artist: "TAKAHASHI TAKASHI",
                        jpartist: "高橋岳",
                        genre: "CALM",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 8853,
                        loopLength: 184e3
                    },
                    "natsuzora-to-syukudai": {
                        name: "summer sky and homework",
                        jpname: "夏空と宿題",
                        artist: "TAKAHASHI TAKASHI",
                        jpartist: "高橋岳",
                        genre: "CALM",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 20885,
                        loopLength: 111997
                    },
                    "success-story": {
                        name: "success story",
                        jpname: "success story",
                        artist: "AKIKO SHIOYAMA",
                        jpartist: "AKIKO SHIOYAMA",
                        genre: "INTERFACE",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 25342,
                        loopLength: 78407
                    },
                    "kaiser-hige-na-neko": {
                        name: "classy cat",
                        jpname: "カイゼルヒゲなネコ",
                        artist: "KAMOKING",
                        jpartist: "カモキング",
                        genre: "INTERFACE",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 0,
                        loopLength: 104002
                    },
                    akindo: {
                        name: "akindo",
                        jpname: "AKINDO",
                        artist: "CHIKA",
                        jpartist: "ちか",
                        genre: "CALM",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 7864,
                        loopLength: 112166
                    },
                    "hyper-velocity": {
                        name: "hyper velocity",
                        jpname: "ハイパー・ベロシティ",
                        artist: "KAMOKING",
                        jpartist: "カモキング",
                        genre: "SPECIAL",
                        source: "HURT RECORD",
                        loop: !1,
                        loopStart: 121011,
                        loopLength: 0,
                        hidden: !0
                    },
                    philosophy: {
                        name: "philosophy",
                        jpname: "philosophy",
                        artist: "L-side",
                        jpartist: "L-side",
                        genre: "INTERFACE",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 9324,
                        loopLength: 113450
                    },
                    "yoru-no-niji": {
                        name: "rainbow of the night",
                        jpname: "夜の虹",
                        artist: "AIBA MAKOTO",
                        jpartist: "相葉　慎",
                        genre: "CALM",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 3651,
                        loopLength: 140385
                    },
                    "shiroi-hyoutan": {
                        name: "white calabash",
                        jpname: "白いひょうたん",
                        artist: "CHIKA",
                        jpartist: "ちか",
                        genre: "SPECIAL",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 17430,
                        loopLength: 122264
                    },
                    smoke: {
                        name: "smoke",
                        jpname: "smoke",
                        artist: "FUJINAWA KAZUHIKO",
                        jpartist: "藤縄　和彦",
                        genre: "INTERFACE",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 5099,
                        loopLength: 134400
                    },
                    "aijin-sanka": {
                        name: "lover's song",
                        jpname: "愛人讃歌",
                        artist: "OMEGANE",
                        jpartist: "おメガネ",
                        genre: "INTERFACE",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 3835,
                        loopLength: 44657
                    },
                    "akai-tsuchi-wo-funde": {
                        name: "step on the scarlet soil",
                        jpname: "紅い土を踏んで",
                        artist: "KAMOKING",
                        jpartist: "カモキング",
                        genre: "CALM",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 2783,
                        loopLength: 123433
                    },
                    "burari-tokyo": {
                        name: "hanging out in tokyo",
                        jpname: "ぶらりTOKYO",
                        artist: "MEESAN",
                        jpartist: "自称芸術家みーさん",
                        genre: "CALM",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 9680,
                        loopLength: 134359
                    },
                    "back-water": {
                        name: "backwater",
                        jpname: "バックウォーター",
                        artist: "KAMOKING",
                        jpartist: "カモキング",
                        genre: "BATTLE",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 1497,
                        loopLength: 112006
                    },
                    "burning-heart": {
                        name: "burning heart",
                        jpname: "burning heart",
                        artist: "KAMOKING",
                        jpartist: "カモキング",
                        genre: "BATTLE",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 0,
                        loopLength: 76803
                    },
                    "hayate-no-sei": {
                        name: "storm spirit",
                        jpname: "疾風の精",
                        artist: "KAMOKING",
                        jpartist: "カモキング",
                        genre: "BATTLE",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 24815,
                        loopLength: 95937
                    },
                    "ice-eyes": {
                        name: "ice eyes",
                        jpname: "アイス・アイズ",
                        artist: "KAMOKING",
                        jpartist: "カモキング",
                        genre: "BATTLE",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 6867,
                        loopLength: 89146
                    },
                    "ima-koso": {
                        name: "the time is now",
                        jpname: "いまこそ…",
                        artist: "TOMOKI",
                        jpartist: "TOMOKI",
                        genre: "BATTLE",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 5489,
                        loopLength: 106635
                    },
                    prism: {
                        name: "prism",
                        jpname: "プリズム",
                        artist: "AIBA MAKOTO",
                        jpartist: "相葉　慎",
                        genre: "CALM",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 0,
                        loopLength: 92130
                    },
                    "risky-area": {
                        name: "risky area",
                        jpname: "risky area",
                        artist: "MIKIYA KOMABA",
                        jpartist: "MIKIYA KOMABA",
                        genre: "BATTLE",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 31480,
                        loopLength: 291144
                    },
                    "fuyu-no-jinkoueisei": {
                        name: "winter satellite",
                        jpname: "冬の人工衛星",
                        artist: "SUDO MIKADUKI",
                        jpartist: "周藤三日月",
                        genre: "CALM",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 25956,
                        loopLength: 149172
                    },
                    hatsuyuki: {
                        name: "first snow",
                        jpname: "初雪",
                        artist: "YOSHI",
                        jpartist: "YOSHI",
                        genre: "CALM",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 21974,
                        loopLength: 122850
                    },
                    "kansen-gairo": {
                        name: "main street",
                        jpname: "幹線街路",
                        artist: "CHIKA",
                        jpartist: "ちか",
                        genre: "CALM",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 17757,
                        loopLength: 183218
                    },
                    "chiheisen-wo-koete": {
                        name: "over the horizon",
                        jpname: "地平線を越えて",
                        artist: "KAMOKING",
                        jpartist: "カモキング",
                        genre: "BATTLE",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 2423,
                        loopLength: 63979
                    },
                    "moyase-toushi-yobisamase-tamashii": {
                        name: "burning spirit, awakening soul",
                        jpname: "燃やせ闘志、呼び覚ませ魂",
                        artist: "KAMOKING",
                        jpartist: "カモキング",
                        genre: "BATTLE",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 15380,
                        loopLength: 54858
                    },
                    "naraku-heno-abyssmaze": {
                        name: "maze of the abyss",
                        jpname: "奈落へのアビスメイズ",
                        artist: "KAMOKING",
                        jpartist: "カモキング",
                        genre: "BATTLE",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 5133,
                        loopLength: 117961
                    },
                    "samurai-sword": {
                        name: "samurai sword",
                        jpname: "SAMURAI SWORD",
                        artist: "KAMOKING",
                        jpartist: "カモキング",
                        genre: "BATTLE",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 6587,
                        loopLength: 105597
                    },
                    "super-machine-soul": {
                        name: "super machine soul",
                        jpname: "スーパーマシンソウル",
                        artist: "KAMOKING",
                        jpartist: "カモキング",
                        genre: "BATTLE",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 22335,
                        loopLength: 96e3
                    },
                    "uchuu-5239": {
                        name: "universe 5239",
                        jpname: "宇宙5239",
                        artist: "KAMOKING",
                        jpartist: "カモキング",
                        genre: "BATTLE",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 15555,
                        loopLength: 83117
                    },
                    "ultra-super-heros": {
                        name: "ultra super heroes",
                        jpname: "ウルトラスーパーヒーローズ",
                        artist: "KAMOKING",
                        jpartist: "カモキング",
                        genre: "BATTLE",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 1315,
                        loopLength: 104958
                    },
                    "21seiki-no-hitobito": {
                        name: "twenty-first century people",
                        jpname: "21世紀の人々",
                        artist: "OMEGANE",
                        jpartist: "おメガネ",
                        genre: "CALM",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 0,
                        loopLength: 131311
                    },
                    "haru-wo-machinagara": {
                        name: "waiting for spring to come",
                        jpname: "春を待ちながら",
                        artist: "OMEGANE",
                        jpartist: "おメガネ",
                        genre: "CALM",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 5780,
                        loopLength: 160015
                    },
                    "go-go-go-summer": {
                        name: "go go go summer",
                        jpname: "go go go summer",
                        artist: "NOBUHAMU",
                        jpartist: "NOBUHAMU",
                        genre: "CALM",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 838,
                        loopLength: 74661
                    },
                    "sasurai-no-hitoritabi": {
                        name: "lonely journey",
                        jpname: "流離いの独り旅",
                        artist: "NAOKI HIRAI",
                        jpartist: "NAOKI HIRAI",
                        genre: "CALM",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 4044,
                        loopLength: 145154
                    },
                    wakana: {
                        name: "young leaves",
                        jpname: "若菜",
                        artist: "CHIKA",
                        jpartist: "ちか",
                        genre: "CALM",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 14819,
                        loopLength: 178883
                    },
                    "zange-no-ma": {
                        name: "confession",
                        jpname: "懺悔の間",
                        artist: "OMEGANE",
                        jpartist: "おメガネ",
                        genre: "CALM",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 0,
                        loopLength: 80533
                    },
                    "subarashii-nichijou": {
                        name: "amazing everyday",
                        jpname: "素晴らしい日常",
                        artist: "TSUTOMU",
                        jpartist: "TSUTOMU",
                        genre: "CALM",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 12399,
                        loopLength: 128e3
                    },
                    asphalt: {
                        name: "asphalt",
                        jpname: "asphalt",
                        artist: "CHIKA",
                        jpartist: "ちか",
                        genre: "CALM",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 5624,
                        loopLength: 69711
                    },
                    "madobe-no-hidamari": {
                        name: "by the sunlit window",
                        jpname: "窓辺の日だまり",
                        artist: "CHIKA",
                        jpartist: "ちか",
                        genre: "CALM",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 26203,
                        loopLength: 65572
                    },
                    minamoto: {
                        name: "origin",
                        jpname: "源",
                        artist: "CHIKA",
                        jpartist: "ちか",
                        genre: "CALM",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 135024,
                        loopLength: 187926
                    },
                    "sora-no-sakura": {
                        name: "cherry blossom season",
                        jpname: "ソラノサクラ",
                        artist: "CHIKA",
                        jpartist: "ちか",
                        genre: "CALM",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 0,
                        loopLength: 336018
                    },
                    suiu: {
                        name: "raindrops",
                        jpname: "翠雨",
                        artist: "CHIKA",
                        jpartist: "ちか",
                        genre: "CALM",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 15058,
                        loopLength: 106578
                    },
                    "freshherb-wreath-wo-genkan-ni": {
                        name: "entrance wreath",
                        jpname: "フレッシュハーブリースを玄関に",
                        artist: "CHIKA",
                        jpartist: "ちか",
                        genre: "CALM",
                        source: "HURT RECORD",
                        loop: !0,
                        loopStart: 5169,
                        loopLength: 84335
                    }
                },
                n = {
                    random: ["kaze-no-sanpomichi", "honemi-ni-shimiiru-karasukaze", "inorimichite", "muscat-to-shiroi-osara", "natsuzora-to-syukudai", "akindo", "yoru-no-niji", "akai-tsuchi-wo-funde", "burari-tokyo", "prism", "back-water", "burning-heart", "hayate-no-sei", "ice-eyes", "ima-koso", "risky-area", "fuyu-no-jinkoueisei", "hatsuyuki", "kansen-gairo", "chiheisen-wo-koete", "moyase-toushi-yobisamase-tamashii", "naraku-heno-abyssmaze", "samurai-sword", "super-machine-soul", "uchuu-5239", "ultra-super-heros", "21seiki-no-hitobito", "haru-wo-machinagara", "go-go-go-summer", "sasurai-no-hitoritabi", "wakana", "zange-no-ma", "subarashii-nichijou", "asphalt", "madobe-no-hidamari", "minamoto", "sora-no-sakura", "suiu", "freshherb-wreath-wo-genkan-ni"],
                    calm: ["kaze-no-sanpomichi", "honemi-ni-shimiiru-karasukaze", "inorimichite", "muscat-to-shiroi-osara", "natsuzora-to-syukudai", "akindo", "yoru-no-niji", "akai-tsuchi-wo-funde", "burari-tokyo", "prism", "fuyu-no-jinkoueisei", "hatsuyuki", "kansen-gairo", "21seiki-no-hitobito", "haru-wo-machinagara", "go-go-go-summer", "sasurai-no-hitoritabi", "wakana", "zange-no-ma", "subarashii-nichijou", "asphalt", "madobe-no-hidamari", "minamoto", "sora-no-sakura", "suiu", "freshherb-wreath-wo-genkan-ni"],
                    battle: ["back-water", "burning-heart", "hayate-no-sei", "ice-eyes", "ima-koso", "risky-area", "chiheisen-wo-koete", "moyase-toushi-yobisamase-tamashii", "naraku-heno-abyssmaze", "samurai-sword", "super-machine-soul", "uchuu-5239", "ultra-super-heros"]
                };

            function o(n) {
                if (!0 === te.volume.disable) return;
                const o = a[n],
                    i = ++t;
                e = new Howl({
                    src: `res/bgm/${n}.mp3`,
                    sprite: {
                        start: [0, o.loopStart, !o.loopLength && o.loop],
                        loop: [o.loopStart, o.loopLength, o.loop]
                    },
                    volume: te.volume.music,
                    autoplay: !1,
                    onload: () => {
                        t === i && (e.play("start"), s = n, o.loopLength && setTimeout(() => {
                            t === i && e.play("loop")
                        }, o.loopStart))
                    }
                })
            }

            function i(e, t = 1e3) {
                !0 !== te.volume.disable && s !== e && r(t, () => {
                    o(e)
                })
            }

            function r(a, n = (() => {})) {
                if (!0 === te.volume.disable) return;
                const o = ++t;
                e && e.fade(e.volume(), 0, a), s = null, setTimeout(() => {
                    t === o && (e && e.stop(), n())
                }, a)
            }

            function l(e) {
                let t = [];
                return n[e].forEach(e => {
                    let s = 0;
                    switch ((te.volume.bgmtweak || {})[e] || "base") {
                        case "ban":
                            s = 0;
                            break;
                        case "minmin":
                            s = 1;
                            break;
                        case "min":
                            s = 2;
                            break;
                        case "base":
                            s = 4;
                            break;
                        case "plus":
                            s = 8;
                            break;
                        case "plusplus":
                            s = 16
                    }
                    for (let a = 0; a < s; a++) t.push(e)
                }), 0 === t.length && (t = n[e]), t[Math.floor(Math.random() * t.length)]
            }
            return {
                ost: a,
                randomOstPools: n,
                playing: function() {
                    return s
                },
                play: function(e) {
                    o(e)
                },
                playSmooth: function(e, t = 1e3) {
                    i(e, t)
                },
                stop: function(e = 1e3) {
                    r(e)
                },
                setVolume: function(t) {
                    ! function(t) {
                        !0 !== te.volume.disable && e && e.volume(t)
                    }(t)
                },
                playSmoothOrRandom: function(e) {
                    if (!0 !== te.volume.disable)
                        if ("RANDOM" === e) {
                            const e = l("random");
                            i(e), Je(e)
                        } else if ("RANDOM" === e.substring(0, 6)) {
                        if (!n[e.substring(6)]) return void T("invalid song selected. will not play!");
                        const t = l(e.substring(6));
                        i(t), Je(t)
                    } else {
                        if (!a[e]) return void T("invalid song selected. will not play!");
                        i(e), Je(e)
                    }
                }
            }
        }(),
        ws = (() => {
            function t(e, t) {
                if (/(^[Rr]:.+$)/.test(e)) {
                    const s = e.replace("R:", "").replace("r:", "").split("@")[0],
                        a = e.replace("R:", "").replace("r:", "").split("@")[1];
                    ct("fetching replay…"), k.get(`/api/games/${encodeURIComponent(s)}${t ? "/short" : ""}`, {}, !0).then(e => {
                        dt(), ks.playSmooth(document.body.classList.contains("inpair") || document.body.classList.contains("matchmaking") ? "touhoudaiensei" : "shikiichi-made-mousukoshi"), e.game.ismulti ? Ft.showMultiLog({
                            ...e.game,
                            back: "tetra",
                            context: a
                        }) : Ft.showResults(e.game.endcontext, {
                            gametype: e.game.endcontext.gametype,
                            back: "tetra",
                            isreplay: !0,
                            username: e.game.user.username,
                            ts: e.game.ts,
                            replay: e.game
                        })
                    }, e => {
                        dt(), S(e)
                    })
                } else Ls({
                    username: e.toLowerCase()
                })
            }
            return {
                loadSpecialThanks: function() {
                    k.get("/api/tetra/specialthanks", {}, !0).then(t => {
                        let s = "";
                        t.supporters.forEach(e => {
                            s += `<div class="flex-item"><a class="credit_st ${e.username ? `tetra_pop" data-hover="tap" data-hit="click" data-username="${e.username}"` : 'noclick"'}>${e.flip ? e.username.toUpperCase() : e.name}</a><span class="jp_kana">${e.username && e.username.toUpperCase() !== e.name ? e.flip ? e.name : e.username.toUpperCase() : "　"}</span></div>`
                        }), e("specialthanks").innerHTML = s
                    }, t => {
                        e("specialthanks").innerHTML = '<div class="flex-item">error fetching special thanks</div>'
                    })
                },
                loadNews: function() {
                    k.get("/api/tetra/news", {}, !0).then(t => {
                        let s = "";
                        t.news.forEach(e => {
                            if (s += '<div class="tetra_news_item">', "leaderboard" === e.type) {
                                let t = e.data.rank <= 3 ? `leaderboard${e.data.rank}` : "improvement",
                                    n = "";
                                switch (e.data.gametype) {
                                    case "40l":
                                        const t = a(e.data.result);
                                        n = `time of <a class="replay_pop" data-hover="tap" data-hit="click" data-replay="R:${e.data.replayid}">${t.m}:${t.s}.${t.ms}</a>`;
                                        break;
                                    case "blitz":
                                        n = `score of <a class="replay_pop" data-hover="tap" data-hit="click" data-replay="R:${e.data.replayid}">${e.data.result.toLocaleString("en-US")}</a>`
                                }
                                s += `<img class="ns" src="/res/badges/${t}.png" /><a class="tetra_pop" data-hover="tap" data-hit="click" data-username="${e.data.username}">${e.data.username.toUpperCase()}</a> reached #${e.data.rank} in ${io.longTypeNames[e.data.gametype]} with a ${n}`
                            } else "badge" === e.type && (s += `<img class="ns" src="/res/badges/${e.data.type}.png" /><a class="tetra_pop" data-hover="tap" data-hit="click" data-username="${e.data.username}">${e.data.username.toUpperCase()}</a> received the <span>"${r(e.data.label.toLowerCase())}"</span> badge`);
                            s += `<div class="tetra_news_ts" title="${new Date(e.ts).toLocaleString()}">${n(Date.parse(e.ts))} ago</div></div>`
                        }), "" === s && (s = '<div class="tetra_news_empty">NO NEWS</div>'), e("tetra_news_content").innerHTML = s
                    }, t => {
                        e("tetra_news_content").innerHTML = '<div class="tetra_news_empty">ERROR FETCHING NEWS</div>'
                    })
                },
                loadTwitch: function() {
                    k.get("/api/tetra/twitch", {}, !0).then(t => {
                        let s = "";
                        t.live.forEach(e => {
                            s += `<a class="tetra_live_item" data-hover="tap" data-hit="click" href="https://www.twitch.tv/${r(e.login.replace('"', ""))}" target="_blank" data-title="${r(e.title.replace('"', ""))}">${r(e.username)}<span>${r(e.viewers)}</span><img src="${r(e.thumbnail.replace('"', ""))}" /></a>`
                        }), e("tetra_live").classList.toggle("hidden", "" === s), e("tetra_live_content").innerHTML = s
                    }, () => {})
                },
                loadRecords: function(t, s) {
                    return new Promise((n, o) => {
                        ct("fetching records…"), k.get(`/api/records/${encodeURIComponent(t.replace("CURRENTID", z.id()))}`, {}, !0).then(o => {
                            dt(),
                                function(t, s, n) {
                                    const o = e(`tetra_stream__${t}`);
                                    if (!o) throw "there is no holder?";
                                    o.innerHTML = "";
                                    let i = 1;
                                    if (s.forEach(e => {
                                            const s = a(e.endcontext.finalTime),
                                                r = e.endcontext.finalTime / 1e3 || 1;
                                            t.startsWith("league_") && e.endcontext[1].user._id === z.id() && e.endcontext.reverse();
                                            const l = document.createElement("div");
                                            l.classList.add("scroller_block"), l.classList.add("record_item"), l.classList.toggle("record_disputed", e.disputed_until > Date.now()), l.classList.add("ns"), l.setAttribute("data-hover", "hover"), l.setAttribute("data-hit", "hit3"), 1 === i && l.classList.add("record_first"), o.appendChild(l);
                                            const c = document.createElement("div");
                                            c.classList.add("record_grade"), c.classList.add("ns"), c.innerHTML = i, l.appendChild(c);
                                            const d = document.createElement("div");
                                            d.classList.add("record_owner"), t.startsWith("any_") ? d.innerHTML = io.longTypeNames[e.endcontext.gametype] : t.startsWith("league_") ? d.innerHTML = `${Un("VS")} ${e.endcontext[1].user.username.toUpperCase()}` : d.innerHTML = e.user.username.toUpperCase(), l.appendChild(d);
                                            const p = document.createElement("div");
                                            p.classList.add("record_ts"), p.innerHTML = new Date(e.ts).toLocaleString(), l.appendChild(p);
                                            const u = document.createElement("div");
                                            if (u.classList.add("record_result"), l.appendChild(u), t.startsWith("league_")) e.endcontext[0].active ? e.endcontext[1].active ? e.endcontext[0].points.primary > e.endcontext[1].points.primary ? u.innerHTML = `${Un("VICTORY")} ${e.endcontext[0].points.primary}-${e.endcontext[1].points.primary}` : e.endcontext[0].points.primary < e.endcontext[1].points.primary ? u.innerHTML = `${Un("DEFEAT")} ${e.endcontext[0].points.primary}-${e.endcontext[1].points.primary}` : u.innerHTML = `${Un("TIE")} ${e.endcontext[0].points.primary}-${e.endcontext[1].points.primary}` : u.innerHTML = "opponent forfeited" : u.innerHTML = "you forfeited";
                                            else switch (e.endcontext.gametype) {
                                                case "40l":
                                                    u.innerHTML = `${s.m}:${s.s}<span class="ms">.${s.ms}</span>`;
                                                    break;
                                                case "blitz":
                                                    u.innerHTML = `${e.endcontext.score.toLocaleString("en-US")}`
                                            }
                                            const m = document.createElement("div");
                                            m.classList.add("record_extra"), t.startsWith("league_") ? m.innerHTML = `<span>${e.endcontext[0].points.tertiary.toFixed(2)}</span> PPS - <span>${e.endcontext[0].points.secondary.toFixed(2)}</span> APM - <span>${e.endcontext[0].points.extra.vs.toFixed(2)}</span> VS` : m.innerHTML = `<span>${e.endcontext.piecesplaced}</span> PCS - <span>${(e.endcontext.piecesplaced / r).toFixed(2)}</span> PPS`, l.appendChild(m), l.addEventListener("click", () => {
                                                ct("fetching replay…"), k.get(`/api/games/${encodeURIComponent(e.replayid)}`, {}, !0).then(e => {
                                                    dt(), e.game.ismulti ? Ft.showMultiLog({
                                                        ...e.game,
                                                        back: "tetra_me"
                                                    }) : Ft.showResults(e.game.endcontext, {
                                                        gametype: e.game.endcontext.gametype,
                                                        back: n,
                                                        isreplay: !0,
                                                        username: e.game.user.username,
                                                        ts: e.game.ts,
                                                        replay: e.game
                                                    })
                                                }, e => {
                                                    dt(), S(e)
                                                })
                                            }), i++
                                        }), !s.length) {
                                        const e = document.createElement("div");
                                        e.classList.add("scroller_block"), e.classList.add("ns"), e.classList.add("nothing"), e.innerHTML = "NO RECORDS", o.appendChild(e)
                                    }
                                }(t, o.records.slice(0, 100), s), n(o)
                        }, e => {
                            dt(), S(e), o()
                        })
                    })
                },
                loadUserList: function(t, s) {
                    return new Promise((a, n) => {
                        ct("fetching players…"), k.get(s, {}, !0).then(n => {
                            dt(),
                                function(t, s, a) {
                                    const n = e(t);
                                    if (!n) throw "there is no holder?";
                                    n.innerHTML = "";
                                    let o = 1;
                                    if (s.forEach(e => {
                                            if ("/api/users/by/xp" === a && (!e.xp || "anon" === e.role || "bot" === e.role)) return;
                                            const t = document.createElement("div");
                                            t.classList.add("scroller_block"), t.classList.add("ns"), t.classList.add("record_item"), t.setAttribute("data-hover", "hover"), t.setAttribute("data-hit", "hit3"), 1 === o && t.classList.add("record_first"), n.appendChild(t);
                                            const s = document.createElement("div");
                                            s.classList.add("record_grade"), s.classList.add("ns"), s.innerHTML = o, t.appendChild(s);
                                            const i = document.createElement("div");
                                            if (i.classList.add("record_owner"), i.innerHTML = `${e.username.toUpperCase()}${e.supporter ? '<img src="/res/supporter-tag.png" title="This person is supporting TETR.IO ♥" />' : ""}${e.country ? `<img class="flag" src="/res/flags/${e.country.toLowerCase()}.png" title="${ro[e.country]}" />` : ""}`, t.appendChild(i), "/api/users/by/xp" === a) {
                                                const s = document.createElement("div");
                                                s.classList.add("record_ts"), s.innerHTML = `${Ms(e.xp)}% TOWARDS NEXT LEVEL`, t.appendChild(s);
                                                const a = document.createElement("div");
                                                a.classList.add("record_result"), t.appendChild(a), a.innerHTML = Cs(Ss(e.xp));
                                                const n = document.createElement("div");
                                                n.classList.add("record_extra"), n.innerHTML = `<span>${Math.floor(e.xp)}</span> XP`, t.appendChild(n)
                                            } else if ("/api/users/by/league" === a) {
                                                const s = document.createElement("div");
                                                s.classList.add("record_ts"), s.innerHTML = `<span>${e.league.gameswon}</span> / ${e.league.gamesplayed} games won (<span>${Math.floor(e.league.gameswon / e.league.gamesplayed * 1e4) / 100}</span>%)`, t.appendChild(s);
                                                const a = document.createElement("div");
                                                a.classList.add("record_result"), t.appendChild(a), a.innerHTML = `${Math.round(e.league.rating)}<span>TR</span> <img src="/res/league-ranks/${e.league.rank}.png" />`, a.title = e.league.rating;
                                                const n = document.createElement("div");
                                                n.classList.add("record_extra"), n.innerHTML = `glicko: <span>${e.league.glicko}</span>±<span>${e.league.rd}</span>`, t.appendChild(n)
                                            }
                                            t.addEventListener("click", () => {
                                                Ls({
                                                    userID: e._id
                                                })
                                            }), o++
                                        }), !s.length) {
                                        const e = document.createElement("div");
                                        e.classList.add("scroller_block"), e.classList.add("ns"), e.classList.add("nothing"), e.innerHTML = "NO PLAYERS", n.appendChild(e)
                                    }
                                }(t, n.users, s), a(n)
                        }, e => {
                            dt(), S(e), n()
                        })
                    })
                },
                navigateToShortID: e => t(e, !0),
                navigateToLongID: e => t(e, !1)
            }
        })();

    function Ls(t) {
        const s = document.createElement("div");
        s.classList.add("oob_modal"), s.classList.add("tetra_modal"), s.classList.add("hidden"), s.classList.add("busy"), e("dialogs").appendChild(s), setTimeout(() => {
            s.classList.remove("hidden"), Ce.push(), Ce.bindGuide(Ae.tetra_dialog)
        }, 1);
        const i = () => {
            k.get(`/api/users/${encodeURIComponent(t.userID)}`, {}, !0).then(i => {
                const r = Da(i.user._id);
                let l = !1;
                if (r && ("friend" === r.type ? (s.classList.add("tm_friend"), l = !0) : "block" === r.type && s.classList.add("tm_blocked")), (i.user.supporter || ["admin", "mod"].includes(i.user.role)) && i.user.banner_revision) {
                    const e = document.createElement("img");
                    e.classList.add("tetra_modal_banner"), e.classList.add("ns"), e.src = `/user-content/banners/${i.user._id}.jpg?rv=${i.user.banner_revision}`, s.classList.add("has_banner"), s.appendChild(e);
                    const t = document.createElement("div");
                    t.classList.add("tetra_modal_banner_sep"), t.classList.add("ns"), s.appendChild(t)
                }
                const c = document.createElement("img");
                c.classList.add("avatar"), i.user.avatar_revision ? c.src = `/user-content/avatars/${i.user._id}.jpg?rv=${i.user.avatar_revision}` : "banned" === i.user.role ? c.src = "/res/avatar-banned.png" : "anon" === i.user.role ? c.src = "/res/avatar.png" : c.src = u(i.user._id), s.appendChild(c);
                const d = document.createElement("h2");
                if (d.innerHTML = `${i.user.username.toUpperCase()}${i.user.verified ? `<img src="/res/verified${(i.user.supporter || ["admin", "mod"].includes(i.user.role)) && i.user.banner_revision ? "-light" : ""}.png" title="Verified" />` : ""}${i.user.country ? `<img class="flag" src="/res/flags/${i.user.country.toLowerCase()}.png" title="${ro[i.user.country]}" />` : ""}`, s.appendChild(d), !["anon", "bot", "banned"].includes(i.user.role)) {
                    const e = document.createElement("h3");
                    e.innerHTML = `${i.user.ts ? `JOINED ${n(Date.parse(i.user.ts)).toUpperCase()} AGO` : "HERE SINCE THE BEGINNING"}${i.user.friendCount ? ` - <span title="Amount of players who have friended this person"><img src="/res/icon/friends${(i.user.supporter || ["admin", "mod"].includes(i.user.role)) && i.user.banner_revision ? "" : "-green"}.svg" />${i.user.friendCount}</span>` : ""}${i.user.friendedYou ? l ? " - MUTUAL FRIENDS" : " - FRIENDED YOU" : ""}`, s.appendChild(e)
                }
                const p = document.createElement("div");
                if (p.classList.add("tetra_modal_close"), p.classList.add("ns"), p.innerHTML = "CLOSE", p.setAttribute("data-hover", "tap"), p.setAttribute("data-hit", "click"), s.appendChild(p), p.addEventListener("click", () => {
                        N(s)
                    }), i.user._id == z.id() && Os !== i.user.xp && (As(Ss(i.user.xp), e("me_level")), Ps(i.user.xp - Os, !0)), t.topbuttons = t.topbuttons || [], t.topbuttons.push(...xs(i.user)), t.topbuttons.length) {
                    const e = document.createElement("div");
                    e.classList.add("tetra_topbutton_holder"), e.classList.add("ns"), s.appendChild(e), t.topbuttons.forEach(t => {
                        const a = document.createElement("div");
                        a.classList.add("tetra_topbutton"), a.innerHTML = `${t.icon ? `<img src="/res/icon/${t.icon}.svg" />` : ""}${t.label}`, a.title = t.title || "", t.classes.forEach(e => {
                            a.classList.add(e)
                        }), a.addEventListener("click", () => {
                            t.callback(() => {
                                N(s)
                            }, a, s)
                        }), a.addEventListener("mouseout", () => {
                            a.classList.remove("tb_unfriending")
                        }), e.appendChild(a)
                    })
                }
                let m, g;
                if (m = i.user.gameswon > -1 && i.user.gamesplayed > -1 ? `<div class="tetra_tag_record" title="Online games won / online games played"><span>${i.user.gameswon}</span> / ${i.user.gamesplayed}</div>` : i.user.gameswon > -1 ? `<div class="tetra_tag_record" title="Online games won"><span>${i.user.gameswon}</span></div>` : i.user.gamesplayed > -1 ? `<div class="tetra_tag_record" title="Online games played">${i.user.gamesplayed}</div>` : "", g = i.user.gametime > -1 ? `<div class="tetra_tag_gametime" title="Total time played">${o(i.user.gametime)}</div>` : "", !["anon", "bot", "banned"].includes(i.user.role)) {
                    const e = document.createElement("div");
                    e.classList.add("tetra_tag_holder"), e.classList.add("ns"), e.innerHTML = `${"admin" === i.user.role ? '<img class="mod_badge" src="/res/administrator.png" title="This person is a TETR.IO Administrator." alt="Administrator" />' : ""}${"mod" === i.user.role ? '<img class="mod_badge" src="/res/moderator.png" title="This person is a TETR.IO Moderator." alt="Moderator" />' : ""}${Cs(Ss(i.user.xp))}${g}${m}${i.user.supporter ? `<img class="supporter_badge" src="/res/supporter${i.user.supporter_tier}.png" title="This person is supporting TETR.IO ♥" alt="Supporter" />` : ""}`, s.appendChild(e)
                }
                if (i.user.badstanding) {
                    const e = document.createElement("div");
                    e.classList.add("tetra_badstanding"), e.classList.add("ns"), e.innerHTML = "<h1>BAD STANDING</h1><p>one or more recent bans on record</p>", s.appendChild(e)
                }
                if (i.user.badges && i.user.badges.length) {
                    const e = document.createElement("div");
                    e.classList.add("tetra_badge_holder"), e.classList.add("ns"), s.appendChild(e), i.user.badges.forEach(t => {
                        const s = document.createElement("img");
                        s.classList.add("tetra_badge"), s.src = `/res/badges/${t.id}.png`, t.ts ? s.title = `${t.label}\n\nAchieved on ${new Date(t.ts).toLocaleString()}` : s.title = t.label, e.appendChild(s)
                    })
                }
                if ("anon" === i.user.role) {
                    const e = document.createElement("div");
                    e.classList.add("tetra_modal_warning"), e.innerHTML = "this user is playing anonymously", s.appendChild(e)
                } else if ("banned" === i.user.role) {
                    const e = document.createElement("div");
                    e.classList.add("tetra_modal_warning"), e.innerHTML = "<h1>BANNED</h1>this user is currently banned. bans are placed when TETR.IO rules or terms of service are broken.", s.appendChild(e), s.classList.add("banned")
                } else if ("bot" === i.user.role) {
                    const e = document.createElement("div");
                    e.classList.add("tetra_modal_warning"), e.innerHTML = `<h1>BOT</h1><br><br>this is a known bot. all bots must have this tag, or it and its owners will be permanently banned.${i.user.botmaster ? `<br><br>this bot is operated by <b>${i.user.botmaster}</b>` : ""}`, s.appendChild(e)
                } else {
                    const e = document.createElement("div");
                    if (e.classList.add("tetra_modal_records"), e.classList.add("flex-row"), s.appendChild(e), 0 !== i.user.league.gamesplayed) {
                        const t = document.createElement("div");
                        t.classList.add("tetra_modal_record"), t.classList.add("flex-item"), t.classList.add("tetra_modal_record_league"), i.user.league.gamesplayed >= 10 ? (t.innerHTML = `<h6>TETRA LEAGUE</h6><h5 title="${i.user.league.rating}"><img src="/res/league-ranks/${i.user.league.rank}.png" />${Math.round(i.user.league.rating)}<span class="ms">TR</span><div class="standingset">${-1 !== i.user.league.standing ? `<div class="${1 === i.user.league.standing ? "t1" : i.user.league.standing <= 10 ? "t10" : i.user.league.standing <= 100 ? "t100" : ""}"><h1>GLOBAL</h1><p><span>#</span>${i.user.league.standing}</p></div>` : ""}${-1 !== i.user.league.standing_local ? `<div class="${1 === i.user.league.standing_local ? "t1" : i.user.league.standing_local <= 10 ? "t10" : i.user.league.standing_local <= 100 ? "t100" : ""}"><h1>COUNTRY</h1><p><span>#</span>${i.user.league.standing_local}</p></div>` : ""}</div></h5><h3><span>${i.user.league.apm || "---"}</span> apm <span>${i.user.league.pps || "---"}</span> pps <span>${i.user.league.vs || "---"}</span> vs</h3>`, t.classList.add("tetra_modal_record_league_active")) : t.innerHTML = `<h6>TETRA LEAGUE</h6><h5>${i.user.league.gamesplayed}<span class="ms">/10 rating games</span></h5><h3><span>${i.user.league.gameswon}</span> game${1 === i.user.league.gameswon ? "" : "s"} won</h3>`, e.appendChild(t)
                    }
                    if (i.user.records["40l"].record) {
                        const t = a(i.user.records["40l"].record.endcontext.finalTime),
                            s = document.createElement("div");
                        s.classList.add("tetra_modal_record"), s.classList.add("flex-item"), s.innerHTML = `<h6>${io.longTypeNames["40l"]}</h6><h5>${t.m}:${t.s}<span class="ms">.${t.ms}</span><div class="standingset">${i.user.records["40l"].rank ? `<div class="${1 === i.user.records["40l"].rank ? "t1" : i.user.records["40l"].rank <= 10 ? "t10" : i.user.records["40l"].rank <= 100 ? "t100" : ""}"><h1>GLOBAL</h1><p><span>#</span>${i.user.records["40l"].rank}</p></div>` : ""}</div></h5><h3><span>${n(Date.parse(i.user.records["40l"].record.ts)).toUpperCase()}</span> ago</h3>`, e.appendChild(s)
                    }
                    if (i.user.records.blitz.record) {
                        const t = document.createElement("div");
                        t.classList.add("tetra_modal_record"), t.classList.add("flex-item"), t.innerHTML = `<h6>${io.longTypeNames.blitz}</h6><h5>${i.user.records.blitz.record.endcontext.score}<div class="standingset">${i.user.records.blitz.rank ? `<div class="${1 === i.user.records.blitz.rank ? "t1" : i.user.records.blitz.rank <= 10 ? "t10" : i.user.records.blitz.rank <= 100 ? "t100" : ""}"><h1>GLOBAL</h1><p><span>#</span>${i.user.records.blitz.rank}</p></div>` : ""}</div></h5><h3><span>${n(Date.parse(i.user.records.blitz.record.ts)).toUpperCase()}</span> ago</h3>`, e.appendChild(t)
                    }
                }
                if (!["anon", "bot", "banned"].includes(i.user.role)) {
                    const e = document.createElement("div");
                    e.classList.add("tetra_modal_jump"), e.classList.add("ns"), e.setAttribute("data-hover", "tap"), e.setAttribute("data-hit", "click"), e.innerHTML = "VIEW FULL PROFILE", e.addEventListener("click", () => {
                        N(s), window.open(`https://ch.tetr.io/u/${i.user.username}`, "_blank")
                    }), e.addEventListener("auxclick", e => {
                        1 === e.button && window.open(`https://ch.tetr.io/u/${i.user.username}`, "_blank")
                    }), s.appendChild(e)
                }
                if (t.buttons = t.buttons || [], t.buttons.push(...Es(i.user)), t.buttons.length) {
                    const e = document.createElement("div");
                    e.classList.add("tetra_button_holder"), e.classList.add("flex-row"), e.classList.add("ns"), s.appendChild(e), t.buttons.forEach(t => {
                        const a = document.createElement("div");
                        a.classList.add("tetra_button"), a.classList.add("flex-item"), a.innerHTML = t.label, t.classes.forEach(e => {
                            a.classList.add(e)
                        }), a.addEventListener("click", () => {
                            t.callback(() => {
                                N(s)
                            })
                        }), e.appendChild(a)
                    })
                }
                s.classList.remove("busy"), Ce.rebind()
            }, e => {
                S(e), N(s)
            })
        };
        return t.userID ? i() : k.get(`/api/users/${encodeURIComponent(t.username)}/resolve`, {}, !0).then(e => {
            t.userID = e._id, i()
        }, e => {
            S(e), N(s)
        }), e("dialogs").classList.remove("hidden"), bt(), s
    }

    function Es(e) {
        return e._id != z.id() && !z.anon() && e.role, []
    }

    function xs(e) {
        const t = [];
        if (e._id != z.id() && !z.anon()) {
            if ("banned" === e.role) return t.push({
                label: "",
                icon: "block",
                title: "Block user",
                classes: ["notext", "tb_danger", "tb_notblockedonly"],
                callback: (t, s, a) => {
                    s.classList.add("busy"), k.post("/api/relationships/block", {
                        user: e._id
                    }, !0).then(e => {
                        s.classList.remove("busy"), a.classList.add("tm_blocked")
                    }, e => {
                        s.classList.remove("busy"), S(e)
                    })
                }
            }), t.push({
                label: "UNBLOCK",
                icon: "block",
                title: "Unblock user",
                classes: ["tb_blockedonly"],
                callback: (t, s, a) => {
                    s.classList.add("busy"), k.post("/api/relationships/remove", {
                        user: e._id
                    }, !0).then(e => {
                        s.classList.remove("busy"), a.classList.remove("tm_blocked")
                    }, e => {
                        s.classList.remove("busy"), S(e)
                    })
                }
            }), t.push({
                label: "",
                icon: "friends",
                title: "Unfriend? (click twice)",
                classes: ["notext", "tb_friendonly", "tb_unfriendbutton", "tb_notblockedonly"],
                callback: (t, s, a) => {
                    s.classList.contains("tb_unfriending") ? (s.classList.add("busy"), k.post("/api/relationships/remove", {
                        user: e._id
                    }, !0).then(e => {
                        s.classList.remove("busy"), a.classList.remove("tm_friend")
                    }, e => {
                        s.classList.remove("busy"), S(e)
                    })) : s.classList.add("tb_unfriending")
                }
            }), t;
            if (["anon"].includes(e.role)) return t.push({
                label: "",
                icon: "report",
                title: "Report user",
                classes: ["notext", "tb_danger"],
                callback: (t, s, a) => {
                    t(), Ts(e, () => {
                        s.classList.add("busy"), k.post("/api/relationships/block", {
                            user: e._id
                        }, !0).then(e => {
                            s.classList.remove("busy"), a.classList.add("tm_blocked")
                        }, e => {
                            s.classList.remove("busy"), S(e)
                        })
                    })
                }
            }), t.push({
                label: "",
                icon: "block",
                title: "Block user",
                classes: ["notext", "tb_danger", "tb_notblockedonly"],
                callback: (t, s, a) => {
                    s.classList.add("busy"), k.post("/api/relationships/block", {
                        user: e._id
                    }, !0).then(e => {
                        s.classList.remove("busy"), a.classList.add("tm_blocked")
                    }, e => {
                        s.classList.remove("busy"), S(e)
                    })
                }
            }), t.push({
                label: "UNBLOCK",
                icon: "block",
                title: "Unblock user",
                classes: ["tb_blockedonly"],
                callback: (t, s, a) => {
                    s.classList.add("busy"), k.post("/api/relationships/remove", {
                        user: e._id
                    }, !0).then(e => {
                        s.classList.remove("busy"), a.classList.remove("tm_blocked")
                    }, e => {
                        s.classList.remove("busy"), S(e)
                    })
                }
            }), t;
            t.push({
                label: "",
                icon: "report",
                title: "Report user",
                classes: ["notext", "hidden", "tb_overflow", "tb_danger", "tb_notfriendonly", "tb_notblockedonly"],
                callback: (t, s, a) => {
                    t(), Ts(e, () => {
                        s.classList.add("busy"), k.post("/api/relationships/block", {
                            user: e._id
                        }, !0).then(e => {
                            s.classList.remove("busy"), a.classList.add("tm_blocked")
                        }, e => {
                            s.classList.remove("busy"), S(e)
                        })
                    })
                }
            }), t.push({
                label: "",
                icon: "block",
                title: "Block user",
                classes: ["notext", "hidden", "tb_overflow", "tb_danger", "tb_notfriendonly", "tb_notblockedonly"],
                callback: (t, s, a) => {
                    s.classList.add("busy"), k.post("/api/relationships/block", {
                        user: e._id
                    }, !0).then(e => {
                        s.classList.remove("busy"), a.classList.add("tm_blocked")
                    }, e => {
                        s.classList.remove("busy"), S(e)
                    })
                }
            }), t.push({
                label: "",
                icon: "more",
                title: "More options...",
                classes: ["notext", "tb_more", "tb_notfriendonly", "tb_notblockedonly"],
                callback: (e, t, s) => {
                    t.parentNode.querySelectorAll(".tb_overflow").forEach(e => {
                        e.classList.remove("hidden")
                    }), t.classList.add("hidden")
                }
            }), t.push({
                label: "",
                icon: "gift",
                title: "Gift TETR.IO Supporter",
                classes: ["notext", "tb_notblockedonly"],
                callback: (t, s, a) => {
                    t(), Ke(void 0, e.username)
                }
            }), t.push({
                label: "MESSAGE",
                icon: "message",
                title: "Send a direct message",
                classes: ["tb_friendonly", "tb_notblockedonly"],
                callback: (t, s, a) => {
                    t(), ya(e._id)
                }
            }), t.push({
                label: "FRIEND",
                icon: "friend",
                title: "Add as friend",
                classes: ["tb_notfriendonly", "tb_friendbutton", "tb_notblockedonly"],
                callback: (t, s, a) => {
                    s.classList.add("busy"), k.post("/api/relationships/friend", {
                        user: e._id
                    }, !0).then(e => {
                        s.classList.remove("busy"), a.classList.add("tm_friend")
                    }, e => {
                        s.classList.remove("busy"), S(e)
                    })
                }
            }), t.push({
                label: "",
                icon: "friends",
                title: "Unfriend? (click twice)",
                classes: ["notext", "tb_friendonly", "tb_unfriendbutton", "tb_notblockedonly"],
                callback: (t, s, a) => {
                    s.classList.contains("tb_unfriending") ? (s.classList.add("busy"), k.post("/api/relationships/remove", {
                        user: e._id
                    }, !0).then(e => {
                        s.classList.remove("busy"), a.classList.remove("tm_friend")
                    }, e => {
                        s.classList.remove("busy"), S(e)
                    })) : s.classList.add("tb_unfriending")
                }
            }), t.push({
                label: "",
                icon: "report",
                title: "Report user",
                classes: ["notext", "tb_danger", "tb_blockedonly"],
                callback: (t, s, a) => {
                    t(), Ts(e, () => {})
                }
            }), t.push({
                label: "UNBLOCK",
                icon: "block",
                title: "Unblock user",
                classes: ["tb_blockedonly"],
                callback: (t, s, a) => {
                    s.classList.add("busy"), k.post("/api/relationships/remove", {
                        user: e._id
                    }, !0).then(e => {
                        s.classList.remove("busy"), a.classList.remove("tm_blocked")
                    }, e => {
                        s.classList.remove("busy"), S(e)
                    })
                }
            })
        }
        return t
    }

    function Ts(e, t) {
        D({
            title: `REPORT ${e.username.toUpperCase()}`,
            msg: `please choose a category to report ${e.username.toUpperCase()} to the TETR.IO moderators for. repeatedly placing false reports may result in a ban.`,
            classes: ["ban_modal"],
            buttons: [{
                label: "TOXICITY<span>including, but not limited to toxicity, harassment, unsolicited direct messages, offensive content or bad language</span>",
                classes: ["pri", "layercake_button"],
                callback: s => {
                    s(), Is(e, "toxic", "TOXICITY", t)
                }
            }, {
                label: "CHEATING<span>including, but not limited to cheating, botting, hacking or otherwise breaking the game or getting an unfair advantage</span>",
                classes: ["pri", "layercake_button"],
                callback: s => {
                    s(), Is(e, "cheating", "CHEATING", t)
                }
            }, {
                label: "MULTIACCOUNTING<span>including, but not limited to smurfing, multiaccounting, boosting accounts, throwing games</span>",
                classes: ["pri", "layercake_button"],
                callback: s => {
                    s(), Is(e, "alting", "MULTIACCOUNTING", t)
                }
            }, {
                label: "NSFW/18+ CONTENT<span>including, but not limited to NSFW (not safe for work) avatars, banners, messages, etc.</span>",
                classes: ["pri", "layercake_button"],
                callback: s => {
                    s(), Is(e, "nsfw", "NSFW CONTENT", t)
                }
            }, {
                label: "SPAM<span>including, but not limited to advertising, message flood, etc.</span>",
                classes: ["pri", "layercake_button"],
                callback: s => {
                    s(), Is(e, "spam", "SPAM", t)
                }
            }, {
                label: "OTHER<span>otherwise not listed abuse against the TETR.IO terms of service or rules</span>",
                classes: ["pri", "layercake_button"],
                callback: s => {
                    s(), Is(e, "other", "OTHER", t)
                }
            }, {
                label: "CANCEL",
                classes: [],
                callback: e => {
                    e()
                }
            }]
        })
    }

    function Is(t, s, a, n) {
        D({
            title: `REPORT ${t.username.toUpperCase()} for ${a}`,
            msg: `please explain briefly why you are reporting ${t.username.toUpperCase()} for ${a} to the TETR.IO moderators below. repeatedly placing false reports may result in a ban.<br><textarea data-escape="request_report_cancel" data-enter="request_report_submit" id="request_report" placeholder="REASON"></textarea>`,
            classes: ["ban_modal"],
            buttons: [{
                label: "CANCEL",
                classes: [],
                id: "request_report_cancel",
                callback: e => {
                    e()
                }
            }, {
                label: "SUBMIT",
                classes: ["pri"],
                id: "request_report_submit",
                callback: a => {
                    a(), k.post("/api/reports/submit", {
                        target: t.username,
                        type: s,
                        reason: e("request_report").value
                    }, !0).then(e => {
                        I("report sent! thank you for your help in keeping TETR.IO safe."), n()
                    }, e => {
                        S(e)
                    })
                }
            }]
        }), e("request_report").focus()
    }

    function Ss(e) {
        return Math.pow(e / 500, .6) + e / (5e3 + Math.max(0, e - 4e6) / 5e3) + 1
    }

    function Ms(e) {
        return Math.floor(Ss(e) % 1 * 100)
    }

    function Cs(e, t = "") {
        const s = Math.floor(e),
            a = s - 1,
            n = e % 1;
        if (a >= 5e3) return `<div class="leveltag ns lt_golden">${s}</div>`;
        const o = Math.floor(a / 10) % 10,
            i = Math.floor(a / 100) % 5,
            r = Math.floor(a / 500) % 10;
        return `<div ${t} title="${Math.floor(100 * n)}% towards next level" class="leveltag ns lt_shape_${i} lt_badge_color_${r} lt_shape_color_${o}">${s}</div>`
    }

    function As(e, t) {
        const s = Math.floor(e),
            a = s - 1,
            n = e % 1;
        if (t.innerHTML = s, a >= 5e3) return void(t.className = "leveltag ns lt_golden");
        const o = Math.floor(a / 10) % 10,
            i = Math.floor(a / 100) % 5,
            r = Math.floor(a / 500) % 10;
        t.className = `leveltag ns lt_shape_${i} lt_badge_color_${r} lt_shape_color_${o}`, t.title = `${Math.floor(100 * n)}% towards next level`
    }

    function Hs(e) {
        const t = Math.floor(e) - 1;
        if (5e3 == t) return vs.play("level500"), void setTimeout(() => {
            vs.play("levelup"), vs.play("allclear"), vs.play("worldrecord")
        }, 750);
        t >= 5e3 ? vs.play("level1") : t % 500 != 0 ? t % 100 != 0 ? t % 10 != 0 ? vs.play("level1") : vs.play("level10") : vs.play("level100") : vs.play("level500")
    }

    function Rs(e) {
        const t = Math.floor(e) - 1;
        return 5e3 == t ? "MAX LEVEL!" : t >= 5e3 ? "LEVEL UP!" : t % 500 == 0 ? "DISTINGUISHED!" : t % 100 == 0 ? "PROMOTED!" : t % 10 == 0 ? "NEW BADGE!" : "LEVEL UP!"
    }

    function $s(t, s) {
        if (document.body.classList.contains("anon")) return;
        const a = Ss(t),
            n = Ss(s),
            o = Math.floor(a) !== Math.floor(n),
            i = a % 1,
            r = o ? 1 : n % 1;
        As(a, e("me_leveling_current")), e("me_leveling").classList.remove("levelingup"), e("me_leveling_amt").innerHTML = `+${s - t} xp`, e("me_leveling_message").classList.add("hidden"), e("me_leveling_fg").style.right = `calc(${.4 * i - .2}em + ${100 - 100 * i}%)`, e("me_leveling").getBoundingClientRect(), e("me_leveling").classList.remove("hidden"), setTimeout(() => {
            e("me_leveling_fg").style.right = `calc(${.4 * r - .2}em + ${100 - 100 * r}%)`, As(n, e("me_level"))
        }, 750), o ? (e("me_leveling_message").innerHTML = Rs(n), setTimeout(() => {
            e("me_leveling_message").classList.remove("hidden"), e("me_leveling").classList.add(5001 === Math.floor(n) ? "maxlevel" : "levelingup"), Hs(n)
        }, 1750), setTimeout(() => {
            As(n, e("me_leveling_current"));
            const t = e("me_leveling").getBoundingClientRect();
            sn.play("xp_ultra", {
                x: t.left,
                y: t.top,
                w: t.width,
                h: t.height
            })
        }, 2500), setTimeout(() => {
            e("me_leveling").classList.add("hidden"), e("me_leveling").classList.remove(5001 === Math.floor(n) ? "maxlevel" : "levelingup")
        }, 5001 === Math.floor(n) ? 16750 : 6750)) : setTimeout(() => {
            e("me_leveling").classList.add("hidden")
        }, 3e3)
    }
    let Os = 0;

    function Ps(e, t = !1) {
        e = Math.floor(e), !t && e && $s(Os, Os + e), Os += e
    }
    const Ds = function() {
        let t, s;
        const a = [];
        let n = !1,
            o = !0,
            i = !1,
            r = !1,
            l = !1,
            c = Date.now(),
            d = null,
            p = !1,
            u = null,
            m = null,
            g = !1;

        function h() {
            s = void 0, t = new Ribbon(`${"https:" === location.protocol ? "wss:" : "ws:"}//${location.host}/ribbon`), p = !1, r = !0, m && (clearTimeout(m), m = null), a.forEach(e => {
                t.on(e[0], e[1])
            }), t.on("replay", () => {
                c = Math.max(c, Date.now())
            }), t.on("startmulti", () => {
                l = !0, c = Math.max(c, Date.now() + 8e3), d && clearInterval(d), d = setInterval(() => {
                    l && Date.now() - c > 6e3 && Ns("silence")
                }, 200)
            }), t.on("endmulti", () => {
                l = !1, c = Math.max(c, Date.now()), d && clearInterval(d)
            }), t.onopen(() => {
                i = !0, document.body.classList.remove("socket_offline"), s = t.getId(), p || t.emit("authorize", {
                    token: z.token(),
                    handling: te.handling,
                    signature: TETRIO_ENV,
                    i: U.i()
                })
            }), t.onresume(t => {
                e("dirtyflag_net").innerHTML = "RIBBON'D", Ns("disconnect", 2e3 + 5 * t)
            }), t.on("kick", t => {
                if (i = !1, r = !1, e("dirtyflag_net").innerHTML = "LOST", document.body.classList.add("socket_offline"), g = !0, f(), "OUTDATED" === t.reason) return document.body.classList.add("socket_outdated"), void(o || (D({
                    title: "UPDATE REQUIRED",
                    classes: ["noclickout"],
                    msg: `an update is required to connect to multiplayer servers. click below to update!</p><p class="modal_also">SOCKET ID: ${s || "UNASSIGNED"}`,
                    buttons: [{
                        label: "UPDATE NOW",
                        classes: [],
                        callback: e => {
                            e(), U.update()
                        }
                    }]
                }), ut(), et("home", !0)));
                "BANNED" === t.reason ? (document.body.classList.add("trapped"), localStorage.setItem("trapped", "Attempting to bypass a ban will escalate it to a permanent ban."), D({
                    title: "KICKED BY MODERATOR",
                    msg: `a TETR.IO moderator or administrator has kicked you from the server. please reload to see the status of your account.</p><p class="modal_also">SOCKET ID: ${s || "UNASSIGNED"}`,
                    classes: ["ban_modal", "noclickout"],
                    buttons: [{
                        label: "RELOAD",
                        classes: [],
                        callback: e => {
                            e(), U.update(!0)
                        }
                    }]
                })) : "you were kicked from the room by its owner" === t.reason ? D({
                    title: "KICKED BY ROOM OWNER",
                    classes: ["noclickout"],
                    msg: `you were kicked from the room by its owner.</p><p class="modal_also">SOCKET ID: ${s || "UNASSIGNED"}`,
                    buttons: [{
                        label: "OK",
                        classes: [],
                        callback: e => {
                            e(), U.update(!0)
                        }
                    }]
                }) : "USERNAMECHANGE" === t.reason || D({
                    title: "CONNECTION ERROR",
                    classes: ["noclickout"],
                    msg: `the server has disconnected you.</p><p>REASON: ${t.reason}</p><p>please check your internet connection. if this seems to be an error, please report it</p><p class="modal_also">SOCKET ID: ${s || "UNASSIGNED"}`,
                    buttons: [{
                        label: "OK",
                        classes: [],
                        callback: e => {
                            e(), F = !0, location.reload()
                        }
                    }]
                }), ut(), et("home", !0)
            }), t.on("announcement", e => {
                switch (e.type) {
                    case "announcement":
                        vs.play("notify"), x({
                            msg: e.msg,
                            color: "#FFCC00",
                            icon: "announcement",
                            timeout: 1e4
                        }), ea.showAnnouncement(e.msg);
                        break;
                    case "maintenance":
                        vs.play("maintenance"), document.body.classList.add("maintenance"), x({
                            msg: e.msg,
                            color: "#FF5200",
                            icon: "maintenance",
                            timeout: 15e3
                        })
                }
            }), t.on("maintenance_start", t => {
                o || (i = !1, r = !1, e("dirtyflag_net").innerHTML = "LOST", document.body.classList.add("socket_offline"), g = !0, f(), D({
                    title: "MAINTENANCE STARTED",
                    classes: ["noclickout"],
                    msg: `the server has been shut down for maintenance.</p><p>${t.reason}</p><p class="modal_also">SOCKET ID: ${s || "UNASSIGNED"}`,
                    buttons: [{
                        label: "RELOAD",
                        classes: [],
                        callback: e => {
                            e(), U.update(!0)
                        }
                    }]
                }), ut(), et("home", !0))
            }), t.on("reload", () => {
                U.update()
            }), t.on("rejected", () => {
                e("dirtyflag_net").innerHTML = "BAD", Ns("rejected", 5e3)
            }), t.onpong(e => {
                e > 500 && Ns("delay"), Dt.addPing(e), c = Math.max(c, Date.now())
            }), t.on("pni", e => {
                Ns(e.type, e.timeout)
            });
            let _ = "";
            t.on("authorize", t => {
                u = t, _ = `<img class="flag" src="/res/flags/${t.worker.flag.toLowerCase()}.png" title="${ro[t.worker.flag]}" /> ${t.worker.name.toUpperCase()}`, e("serverdebuginfo").textContent = `connected to ${t.worker.name} [${t.worker.flag}]`, x({
                    msg: `connected to server<br>${_}`,
                    color: "#61FF3C",
                    icon: "connect",
                    timeout: 2500
                }), p = !0, r = !1
            });
            let b = null;
            t.on("migrate", s => {
                t.setEndpoint(s.endpoint), t.switchEndpoint(), e("serverdebuginfo").textContent = `migrating to ${s.name} [${s.flag}]`, b = x({
                    msg: `switching server…<br>${_}`,
                    color: "#FFF83C",
                    icon: "disconnect-change",
                    timeout: 6e4
                })
            }), t.on("migrated", t => {
                _ = `<img class="flag" src="/res/flags/${t.worker.flag.toLowerCase()}.png" title="${ro[t.worker.flag]}" /> ${t.worker.name.toUpperCase()}`, e("serverdebuginfo").textContent = `connected to ${t.worker.name} [${t.worker.flag}]`, C(b, {
                    msg: `server switched<br>${_}`,
                    color: "#61FF3C",
                    icon: "connect",
                    timeout: 2500
                })
            }), t.onclose(t => {
                document.body.classList.add("socket_offline");
                let a = i;
                if (i = !1, r = !1, l = !1, c = Math.max(c, Date.now()), d && clearInterval(d), o && !g) return e("serverdebuginfo").textContent = "(reconnecting in background)", a && (Ns("background", 1e3), x({
                    msg: "disconnected from server. reconnecting in a moment…",
                    color: "#FF783C",
                    icon: "disconnect"
                })), m && clearTimeout(m), void(m = setTimeout(() => {
                    h()
                }, 3e4 + 12e4 * Math.random()));
                e("serverdebuginfo").textContent = n ? "(not connected)" : "(connection lost)", x({
                    msg: "disconnected from server",
                    color: "#FF783C",
                    icon: "disconnect"
                }), setTimeout(() => {
                    n || (e("dirtyflag_net").innerHTML = "LOST", ut(), et("home", !0), D({
                        title: "CONNECTION ERROR",
                        classes: ["noclickout"],
                        msg: `a connection error has occured and the connection was closed unexpectedly.</p><p>check your internet connection or report this issue</p><p>REASON: ${t}</p><p class="modal_also">SOCKET ID: ${s || "UNASSIGNED"}`,
                        buttons: [{
                            label: "OK",
                            classes: [],
                            callback: e => {
                                e(), F = !0, location.reload()
                            }
                        }]
                    })), n = !1
                }, 50)
            }), console.log("Obtaining Ribbon endpoint..."), k.get("/api/server/ribbon", {}, !0).then(e => {
                if (!e.endpoint || !e.endpoint.startsWith("ws")) return console.warn("Could not retrieve Ribbon endpoint. Trying the default /ribbon..."), void t.open();
                console.log(`Obtained Ribbon endpoint ${e.endpoint}`), t.setEndpoint(e.endpoint), t.open()
            }, e => {
                console.warn("Could not retrieve Ribbon endpoint. Trying the default /ribbon..."), t.open()
            })
        }

        function f() {
            n = !0
        }

        function _(e, s) {
            if (t) {
                let a = !1;
                t.on(e, e => {
                    a || (a = !0, s(e))
                })
            }
        }
        return {
            on: (e, s) => {
                a.push([e, s]), t && t.on(e, s)
            },
            once: _,
            off: (e, s) => {
                t && t.off(e, s)
            },
            socket: function() {
                return t
            },
            emit: function(e, s) {
                t.emit(e, s)
            },
            connect: h,
            disconnect: function() {
                t.close("client closed ribbon")
            },
            abort: function() {
                n = !0, t.close(null, !0)
            },
            expectDisconnect: f,
            isConnected: () => i,
            isBackground: () => o,
            cut: e => {
                t && t.cut(e)
            },
            require: () => new Promise((e, t) => {
                o = !1, !i || r ? (r || h(), _("authorize", t => {
                    e(t)
                }), _("connect_error", () => {
                    t()
                })) : e(u)
            }),
            unrequire: () => {
                o = !0
            },
            updateHandling: function() {
                t.emit("sethandling", te.handling)
            }
        }
    };

    function Ns(t, s = 100) {
        Ws && Ws.isBackground() && !["background", "split", "load"].includes(t) || (e(`network_${t}`).classList.add("ping"), setTimeout(() => {
            e(`network_${t}`).classList.remove("ping")
        }, s))
    }
    const Fs = {
            random: {
                id: "random",
                label: "RANDOMS",
                targetculled: !1,
                algorithm: (e, t) => {
                    return [e[Math.floor(Math.random() * e.length)].context.listenID]
                }
            },
            elims: {
                id: "elims",
                label: "ELIMINATIONS",
                targetculled: !1,
                algorithm: (e, t) => {
                    const s = [];
                    e.forEach(e => {
                        s.push({
                            id: [e.context.listenID],
                            amt: e.game.highest()
                        })
                    }), s.sort((e, t) => e.amt - t.amt);
                    const a = [];
                    for (let e = 0; e < Math.min(10, s.length); e++)
                        for (let t = 0; t < s.length - e; t++) a.push(s[e].id);
                    return a[Math.floor(Math.random() * a.length)]
                }
            },
            best: {
                id: "best",
                label: "PROS",
                targetculled: !1,
                algorithm: (e, t) => {
                    const s = [];
                    e.forEach(e => {
                        s.push({
                            id: [e.context.listenID],
                            amt: e.game.highest()
                        })
                    }), s.sort((e, t) => t.amt - e.amt);
                    const a = [];
                    for (let e = 0; e < Math.min(10, s.length); e++)
                        for (let t = 0; t < s.length - e; t++) a.push(s[e].id);
                    return a[Math.floor(Math.random() * a.length)]
                }
            },
            payback: {
                id: "payback",
                label: "PAYBACK",
                targetculled: !0,
                algorithm: (e, t) => {
                    let s = [];
                    return t && e.forEach(e => {
                        [e.context.listenID][0] === t.game.garbagestats().lastattacker[0] && (s = [e.context.listenID])
                    }), s.length || (s = [e[Math.floor(Math.random() * e.length)].context.listenID]), s
                }
            },
            even: {
                id: "even",
                label: "EVEN",
                targetculled: !1,
                algorithm: (e, t) => {
                    const s = [];
                    e.forEach(e => {
                        s.push({
                            id: [e.context.listenID],
                            amt: e.game.garbagestats().garbagereceived
                        })
                    }), s.sort((e, t) => e.amt - t.amt);
                    const a = [];
                    for (let e = 0; e < Math.min(10, s.length); e++)
                        for (let t = 0; t < s.length - e; t++) a.push(s[e].id);
                    return a[Math.floor(Math.random() * a.length)]
                }
            },
            first: {
                id: "first",
                label: "FIRST IDK",
                targetculled: !1,
                algorithm: (e, t) => [e[0].context.listenID]
            }
        },
        Us = (() => {
            let t, s = !1,
                a = [],
                n = 0,
                o = !1,
                i = null;
            const r = {
                maytarget: !0,
                strategies: ["even", "elims", "random", "payback"]
            };

            function l() {
                t && (e("diyusi_strategy_1").querySelector("p").textContent = Fs[r.strategies[0]].label, e("diyusi_strategy_2").querySelector("p").textContent = Fs[r.strategies[1]].label, e("diyusi_strategy_3").querySelector("p").textContent = Fs[r.strategies[2]].label, e("diyusi_strategy_4").querySelector("p").textContent = Fs[r.strategies[3]].label, e("diyusi_strategy_1").classList.toggle("active", 0 === n && !o), e("diyusi_strategy_2").classList.toggle("active", 1 === n && !o), e("diyusi_strategy_3").classList.toggle("active", 2 === n && !o), e("diyusi_strategy_4").classList.toggle("active", 3 === n && !o), e("diyusi").classList.toggle("hasextra", o), function(t) {
                    if ((t = t && s) === p) return;
                    t ? (e("diyusi").classList.remove("hidden"), e("diyusi").classList.remove("hiding")) : (e("diyusi").classList.add("hiding"), setTimeout(() => {
                        e("diyusi").classList.add("hidden")
                    }, 500));
                    p = t
                }(s && r.maytarget && t.games.others.length > 1))
            }

            function c() {
                e("diyusi").classList.add("ping"), setTimeout(() => {
                    e("diyusi").classList.remove("ping")
                }, 150)
            }

            function d() {
                t && t.games.others.forEach(e => {
                    e.game.setTargeted(s && r.maytarget && t.games.others.length > 1 && a.includes(e.context.listenID))
                })
            }
            let p = !1;

            function u(e) {
                if (o) {
                    let s = !1;
                    if (t.games.others.forEach(e => {
                            a[0] == e.context.listenID && (s = !0)
                        }), s) return void(e && (d(), m()));
                    o = !1, n = "random", l(), c(), d(), m()
                }
                let s = [];
                1 === t.games.others.length && (s = [t.games.others[0].context.listenID]), t.games.others.length > 1 && (Fs[r.strategies[n]] || (n = 0, l()), s = Fs[r.strategies[n]] ? Fs[r.strategies[n]].algorithm(Fs[r.strategies[n]].targetculled ? t.games.others : t.games.others.filter(e => !e.headless), t.games.self) : [t.games.others[0].context.listenID]), (JSON.stringify(s) != JSON.stringify(a) || e) && (a = s, d(), m())
            }

            function m() {
                t.games.self && t.games.self.game.setTargets(a)
            }
            return {
                options: r,
                enabled: function(e) {
                    s = e, l(), d(), c()
                },
                setMultiplex: function(e) {
                    t = e
                },
                setStrategy: function(e, a = !1) {
                    t && s && (o = !1, n = e, l(), u(!0), c(), !a && t.games.others.length >= 2 && vs.play("target"))
                },
                setManual: function(e) {
                    s && (o = !0, a = [e], l(), u(!0), c(), vs.play("target"))
                },
                retarget: function() {
                    u(!1)
                },
                reflow: function() {
                    l(), d()
                },
                startTimer: function() {
                    null === i && (i = setInterval(u, 5e3))
                },
                stopTimer: function() {
                    clearInterval(i), i = null
                }
            }
        })();
    U.ready(() => {
        function e(e) {
            e.repeat || document.body.classList.contains("chatfocus") || Object.keys(ae).forEach(t => {
                if (ae[t].includes(me(e) || e.detail.toUpperCase())) switch (t) {
                    case "target1":
                        Us.setStrategy(0, !1);
                        break;
                    case "target2":
                        Us.setStrategy(1, !1);
                        break;
                    case "target3":
                        Us.setStrategy(2, !1);
                        break;
                    case "target4":
                        Us.setStrategy(3, !1)
                }
            })
        }
        document.addEventListener("keydown", e, !1), document.addEventListener("gpdown", e, !1)
    });
    let Bs = 0;
    const Xs = (t, s, a = !1) => {
        const n = t ? t.socket() : null,
            o = {
                self: null,
                others: []
            };
        let i = [],
            r = 0,
            l = !1,
            c = new Map,
            d = null,
            p = null,
            u = !!a,
            m = {},
            g = [],
            h = 0,
            f = 1,
            _ = !1,
            b = -1,
            y = 1,
            v = 1;

        function k(e, t, s) {
            z.username() == e ? !1 !== te.video.kos && H({
                msg: null !== t.name ? `ko'd by ${t.name.toUpperCase()}` : "you ko'd yourself",
                fgcolor: "#FF2222",
                bgcolor: "#FFFFFF",
                timeout: 5e3
            }) : z.username() == t.name && !1 !== te.video.kos ? (vs.play("elim"), H({
                msg: `ko'd ${e.toUpperCase()}${s >= 250 ? ` <span class="fire">${Math.ceil(s / 7)}%</span>` : ""}`,
                fgcolor: "#FFFFFF",
                bgcolor: "#FF2222",
                timeout: 3e3
            })) : o.others.length <= 200 && vs.play("death", o.others.length <= 100 ? 1 : .5), $({
                victim: e,
                killer: t.name,
                type: t.type
            }), o.self && o.self.game.updatePlacement(o.others.length + (o.self ? 1 : 0)), o.others.forEach(e => {
                e.game.updatePlacement(o.others.length + (o.self ? 1 : 0))
            })
        }
        const w = .8,
            L = .5,
            E = 1.6;

        function x(t = !1) {
            if (!(l || u && (t || o.others.length <= 60 && (u = !1, M(), g.forEach(e => {
                    p.headless = !1, p.game.rehead(), p.game.location(0, 0, 0, !0)
                }), g = [], m = {}), function(t = !1) {
                    if (!u) return;
                    if (o.self) e("spectate").classList.add("hidden"), document.body.classList.remove("spectating");
                    else {
                        if (0 === o.others.length) return e("spectate").classList.add("hidden"), void document.body.classList.remove("spectating");
                        if (e("spectate").classList.contains("hidden") && (Bs = Date.now()), e("spectate").classList.remove("hidden"), document.body.classList.add("spectating"), d) {
                            if (p && p.context.user.username === d) return;
                            p && (p.headless = !0, p.game.fadeOutAndBehead(200), g.push(p), p = null);
                            for (let e = 0; e < o.others.length; e++) o.others[e].context.user.username === d && (p = o.others[e]);
                            if (!p) return void(e("data_spectate").innerHTML = `spectating <span>${o.others.length}</span> PLAYERS`);
                            e("data_spectate").innerHTML = `spectating <span>${d.toUpperCase()}</span>`, p.headless ? (g = g.filter(e => e.context.listenID !== p.context.listenID), p.headless = !1, p.game.rehead(), p.game.location(0, 0, 0, !0), p.game.location(0, 0, 1, !!t), p.game.changeDisplayMode("full")) : (p.game.location(0, 0, 1, !!t), p.game.changeDisplayMode("full"), A(p))
                        } else e("data_spectate").innerHTML = `spectating <span>${o.others.length}</span> PLAYERS`, p && (p.headless = !0, p.game.fadeOutAndBehead(200), g.push(p), p = null)
                    }
                }(t), u)))
                if (o.self) {
                    if (e("spectate").classList.add("hidden"), document.body.classList.remove("spectating"), 0 === o.others.length) return;
                    if (1 === o.others.length && te.video.sidebyside) return o.self.game.location(-.35, 0, 1, !!t), o.others[0].game.location(.45, 0, 1, !!t), void o.others[0].game.changeDisplayMode("full");
                    const s = T(o.others.length);
                    o.self.game.location(0, 0, 1, !!t);
                    for (let e = 0; e < o.others.length; e++) o.others[e].game.location(s[e].x, s[e].y, s[e].s, !!t), o.others[e].game.changeDisplayMode(o.others.length >= 4 || te.video.alwaystiny || "minimal" === te.video.graphics ? "tiny" : "small")
                } else {
                    if (0 === o.others.length) return e("spectate").classList.add("hidden"), void document.body.classList.remove("spectating");
                    if (e("spectate").classList.contains("hidden") && (Bs = Date.now()), e("spectate").classList.remove("hidden"), document.body.classList.add("spectating"), 1 === o.others.length) return o.others[0].game.location(0, 0, 1, !!t), o.others[0].game.changeDisplayMode("full"), void(e("data_spectate").innerHTML = `spectating <span>${o.others[0].context.user.username.toUpperCase()}</span>`);
                    if (2 === o.others.length && te.video.sidebyside) {
                        if (d) {
                            let s = !1;
                            for (let e = 0; e < o.others.length; e++) o.others[e].context.user.username === d ? (o.others[e].game.location(-.4, 0, 1, !!t), o.others[e].game.changeDisplayMode("full"), s = !0) : (o.others[e].game.location(.4, 0, 1, !!t), o.others[e].game.changeDisplayMode("full"));
                            if (!s) return o.others[0].game.location(-.4, 0, 1, !!t), o.others[0].game.changeDisplayMode("full"), o.others[1].game.location(.4, 0, 1, !!t), o.others[1].game.changeDisplayMode("full"), void(e("data_spectate").innerHTML = `spectating <span>${o.others[0].context.user.username.toUpperCase()}</span> VS <span>${o.others[1].context.user.username.toUpperCase()}</span>`);
                            e("data_spectate").innerHTML = `spectating <span>${d.toUpperCase()}</span>`
                        } else o.others[0].game.location(-.4, 0, 1, !!t), o.others[0].game.changeDisplayMode("full"), o.others[1].game.location(.4, 0, 1, !!t), o.others[1].game.changeDisplayMode("full"), e("data_spectate").innerHTML = `spectating <span>${o.others[0].context.user.username.toUpperCase()}</span> VS <span>${o.others[1].context.user.username.toUpperCase()}</span>`;
                        return
                    }
                    if (d) {
                        let s = T(o.others.length),
                            a = !1;
                        for (let e = 0; e < o.others.length; e++) o.others[e].context.user.username === d && (a = !0);
                        a && (s = T(o.others.length - 1));
                        let n = 0,
                            i = !1;
                        for (let e = 0; e < o.others.length; e++) o.others[e].context.user.username === d ? (i = !0, o.others[e].game.location(0, 0, 1, !!t), o.others[e].game.changeDisplayMode("full")) : (o.others[e].game.location(s[n].x, s[n].y, s[n].s, !!t), o.others[e].game.changeDisplayMode(o.others.length >= 9 || te.video.alwaystiny || "minimal" === te.video.graphics ? "tiny" : "small"), n++);
                        if (!i) {
                            const s = I(o.others.length);
                            for (let e = 0; e < o.others.length; e++) o.others[e].game.location(s[e].x, s[e].y, s[e].s, !!t), o.others[e].game.changeDisplayMode(o.others.length >= 9 || te.video.alwaystiny || "minimal" === te.video.graphics ? "tiny" : "small");
                            return void(e("data_spectate").innerHTML = `spectating <span>${o.others.length}</span> PLAYERS`)
                        }
                        e("data_spectate").innerHTML = `spectating <span>${d.toUpperCase()}</span>`
                    } else {
                        const s = I(o.others.length);
                        for (let e = 0; e < o.others.length; e++) o.others[e].game.location(s[e].x, s[e].y, s[e].s, !!t), o.others[e].game.changeDisplayMode(o.others.length >= 9 || te.video.alwaystiny || "minimal" === te.video.graphics ? "tiny" : "small");
                        e("data_spectate").innerHTML = `spectating <span>${o.others.length}</span> PLAYERS`
                    }
                }
        }

        function T(e) {
            const t = e >= 30,
                s = e >= 9 || te.video.alwaystiny || "minimal" === te.video.graphics ? L : w;
            e = Math.max(2, e);
            let a = 0,
                n = 1,
                o = 0,
                i = 0,
                r = !1;
            do {
                (i = (n = .75 / ++a) * s * (o = t ? 2 * Math.ceil(e / a / 2) : Math.ceil(e / a))) <= (t ? 1.2 : .6) && (r = !0)
            } while (!r);
            const l = [];
            for (let i = 0; i < e; i++) {
                const e = Math.floor(i / a),
                    r = i % a;
                t ? l.push({
                    x: (.5 + n * s / 2 + e % (o / 2) * s * n) * (e < o / 2 ? 1 : -1),
                    y: r * E * n * 1.6 - .8,
                    s: n
                }) : l.push({
                    x: .4 + n * s / 2 + e * s * n,
                    y: r * E * n - .5,
                    s: n
                })
            }
            return l
        }

        function I(e) {
            const t = e >= 9 || te.video.alwaystiny || "minimal" === te.video.graphics ? L : w;
            e = Math.max(2, e);
            let s = 1,
                a = 1,
                n = 1,
                o = 0,
                i = 0,
                r = !1;
            do {
                n = 2 / ((e <= 8 ? 1 : t) * ++s), a = Math.ceil(e / s), i = n * t * s, (o = n * E * a) <= 1.6 && (r = !0)
            } while (!r);
            const l = Math.floor(1.8 / (t * n));
            n = 2 / ((e <= 8 ? 1 : t) * (s = Math.round((l + s) / 2))), r = !1;
            do {
                n -= .005, a = Math.ceil(e / s), i = n * t * s, (o = n * E * a) <= 1.6 && i <= 1.8 && (r = !0)
            } while (!r);
            const c = [];
            for (let r = 0; r < e; r++) {
                const l = r % s,
                    d = Math.floor(r / s);
                let p = (1.8 - i) / 2;
                Math.floor(r / s) === Math.floor(e / s) && (p = (1.8 - n * t * (e % s)) / 2), c.push({
                    x: -.9 + p + n * t / 2 + l * t * n,
                    y: 1 === a ? 0 : (1.6 - o) / 2 - .8 + (d + .5) * E * n,
                    s: n
                })
            }
            return c
        }

        function S(e, t, s = !1) {
            for (let s = 0; s < o.others.length; s++)
                if (o.others[s].context.listenID === e) return void o.others[s].game.queueEnd(t.gameoverreason, "winner" !== t.gameoverreason, t.fire, t.killer);
            s || c.set(e, t)
        }

        function M() {
            _ && (_ = !1, PIXI.Ticker.shared.remove(C))
        }

        function C(e) {
            u && ("minimal" === te.video.graphics || te.video.nosuperlobbyanim ? f > 0 && (f <= 1e-4 && (f = 0), f *= Math.pow(f >= 30 ? .995 : .985, e)) : f > 1 && (f <= 1.0001 && (f = 1), f = 1 + (f - 1) * Math.pow(f >= 30 ? .998 : .993, e)), Object.keys(m).forEach(t => {
                let s = m[t];
                if (s.row % 2 == 0 ? s.slx -= f * e * 75e-5 : s.slx += f * e * 75e-5, s.row % 2 == 0 && s.slx <= b || s.row % 2 != 0 && s.slx >= y) {
                    if (s.headless = !0, s.game.behead(), delete m[t], g.push(s), ng = g.shift(), !ng) return;
                    return ng.headless = !1, ng.game.rehead(), ng.slx = s.row % 2 == 0 ? s.slx + 2 * v : s.slx - 2 * v, ng.sly = s.row * (1 / 2.75) + Math.sin(Math.abs(.5 * Math.PI * Math.pow(ng.slx / v, 2))) * (s.row / 20), ng.row = s.row, ng.game.location(ng.slx, ng.sly, .2, !0), m[++h] = ng, void(ng.slid = h)
                }
                s.sly = s.row * (1 / 2.75) + Math.sin(Math.abs(.5 * Math.PI * Math.pow(s.slx / v, 2))) * (s.row / 20), s.game.location(s.slx, s.sly, .2, !0)
            }))
        }

        function A(e) {
            delete m[e.slid], ng = g.shift(), ng && (ng.headless = !1, ng.game.rehead(!0), ng.slx = e.slx, ng.sly = e.sly, ng.row = e.row, ng.game.location(ng.slx, ng.sly, .2, !0), m[++h] = ng, ng.slid = h)
        }
        return {
            attachFake: function(e, t) {
                l = !0, o.others.push({
                    game: e,
                    context: t
                })
            },
            detachFakes: function() {
                l = !1, o.others = []
            },
            attachSelf: function(e) {
                const t = new ti,
                    a = new _o({
                        type: "keyboard"
                    });
                t.bindEventSource(a), t.bindRollingReplay(n), t.setListenID(s), n.on("ige", e => {
                    a.pushIGE(e)
                }), n.on("iges", e => {
                    for (const t of e) a.pushIGE(t)
                }), e.username = z.username(), e.onstop = e => {
                    null !== e.killer.name && (d = e.killer.name),
                        function(e) {
                            o.self = null, e && x()
                        }(1 !== o.others.length), Us.enabled(!1)
                }, e.onfail = t => {
                    setTimeout(() => {
                        k(e.username, t.killer, t.fire)
                    }, 50)
                }, e.onquit = e => {
                    o.others.forEach(e => {
                        e.game.end()
                    }), ea.leaveRoom(), ea.dropMultiplex()
                }, t.setGame(e), t.createGameHolder(), o.self = {
                    game: t,
                    context: {
                        listenID: -1,
                        user: {
                            _id: z.id(),
                            username: z.username()
                        }
                    }
                }, r < 2 ? (r++, i.push(t.export().replay)) : i = []
            },
            attachSocketGame: function(e, t, s, a, l) {
                const c = new ti;
                c.bindEventSource(new _o({
                    type: "socket",
                    socket: n,
                    listenID: t.listenID
                })), e.display_username = !0, e.username = t.user.username, r >= 2 && (e.noreplay = !0), e.physical = !1, u && (o.others.length >= 60 && (e.headless = !0), e.zoominto = "fade", e.prestart = 850), e.onstop = s => {
                    e.username === d && (d = s && s.killer && null !== s.killer.name ? s.killer.name : null),
                        function(e, t) {
                            o.others = o.others.filter(t => {
                                if (t.context.listenID === e) try {
                                    t.game.export().source.destroy(), !t.headless && u && A(t)
                                } catch (e) {
                                    console.error(`Could not detach socket game source: ${e}`)
                                }
                                return t.context.listenID !== e
                            }), g = g.filter(t => t.context.listenID !== e), t && "minimal" !== te.video.graphics && x()
                        }(t.listenID, 2 !== o.others.length || null !== o.self), Us.retarget(), Us.reflow()
                }, e.onfail = t => {
                    setTimeout(() => {
                        k(e.username, t.killer, t.fire)
                    }, 50)
                }, c.setGame(e), c.createGameHolder(s, l);
                const p = {
                    game: c,
                    context: t,
                    headless: e.headless
                };
                o.others.push(p), u && (p.headless ? g.push(p) : (m[++h] = p, p.slid = h)), r < 2 ? (r++, i.push(c.export().replay)) : i = [], a || x()
            },
            start: function(e = !1) {
                o.self && o.self.game.startGame(e), o.others.forEach(t => {
                    t.game.startGame(e)
                }), o.self && o.self.game.updatePlacement(o.others.length + (o.self ? 1 : 0)), o.others.forEach(e => {
                    e.game.updatePlacement(o.others.length + (o.self ? 1 : 0))
                });
                for (const [e, t] of c) S(e, t)
            },
            stop: function(t, s = !1) {
                const a = [];
                t.forEach(e => {
                    e.success && a.push(e.user.username)
                }), o.self && (a.includes(z.username()) ? o.self.game.endWin() : o.self.game.endLose()), o.others.forEach(e => {
                    a.includes(e.game.export().options.username) ? e.game.queueEnd("winner") : e.game.queueEnd("topout", !0)
                }), M(), setTimeout(() => {
                    o.others.forEach(e => {
                        a.includes(e.game.export().options.username) ? e.game.endWin() : e.game.endLose(!0)
                    })
                }, s ? 1e3 : 200), e("spectate").classList.add("hidden"), document.body.classList.remove("spectating")
            },
            order: x,
            pushReplayState: function(e, t) {
                for (let s = 0; s < o.others.length; s++)
                    if (o.others[s].context.listenID === e) {
                        "wait" === t ? o.others[s].game.rerequestState() : (o.others[s].game.injectState(t), o.others[s].game.updatePlacement(o.others.length + (o.self ? 1 : 0)));
                        break
                    }
            },
            pushReplayBoardState: function(e, t) {
                for (let s = 0; s < o.others.length; s++)
                    if (o.others[s].context.listenID === e) {
                        o.others[s].game.injectBoardState(t);
                        break
                    }
            },
            expectEnd: S,
            startScope: function(e) {
                for (let t = 0; t < o.others.length; t++)
                    if (o.others[t].context.user.username === e) {
                        n.emit("startscope", o.others[t].context.user._id);
                        break
                    }
            },
            endScope: function(e) {
                for (let t = 0; t < o.others.length; t++)
                    if (o.others[t].context.user.username === e) {
                        n.emit("endscope", o.others[t].context.user._id);
                        break
                    }
            },
            superLobby: {
                startAnimation: function() {
                    if (!u) return;
                    f = 40;
                    const e = (window.innerWidth - ls(1600)) / ls(1600);
                    v = 1 + 2 * e, b = -1 - 2 * e, y = 1 + 2 * e;
                    let t = 0;
                    Object.keys(m).forEach(e => {
                        const s = m[e],
                            a = t % 12,
                            n = Math.floor(t / 12) - 2,
                            o = (n + 2) / 4,
                            i = n * (1 / 2.75) + Math.sin(Math.abs(.5 * Math.PI * 1)) * (n / 20);
                        let r = 0;
                        r = n % 2 == 0 ? y + (a + o) * (1 / 6) * v : b - (a + o) * (1 / 6) * v, s.game.location(r, i, .2, !0), s.slx = r, s.sly = i, s.row = n, t++
                    })
                },
                startTicker: function() {
                    _ || (_ = !0, PIXI.Ticker.shared.add(C))
                },
                stopTicker: M
            },
            games: o,
            replays: i,
            getPosOf: function(e) {
                let t = null;
                return o.others.forEach(s => {
                    s.context.listenID !== e && s.game.export().options.username !== e || (t = s.headless ? {
                        pos: {
                            x: (window.innerWidth + 200) * Math.random() - 100,
                            y: window.innerHeight / 2 - ls(400) + Math.random() * ls(800)
                        },
                        scale: .2
                    } : s.game.getPos())
                }), t
            },
            getFrameOf: function(e) {
                let t = null;
                return o.others.forEach(s => {
                    s.context.listenID !== e && s.game.export().options.username !== e || (t = s.game.export().source.getFrame())
                }), t
            },
            awaitFrameFor: function(e, t, s) {
                let a = !1;
                return o.others.forEach(n => {
                    if (n.context.listenID === e || n.game.export().options.username === e) {
                        if (!n.game.isScoped()) return;
                        n.game.awaitFrame(t, s), a = !0
                    }
                }), a
            },
            find: function(e) {
                let t = null;
                return o.others.forEach(s => {
                    s.context.listenID !== e && s.game.export().options.username !== e || (t = s)
                }), t
            },
            setSpectating: function(e) {
                d = e
            },
            getSpectating: function() {
                return d
            },
            endRandom: function() {
                o.others[Math.floor(Math.random() * o.others.length)].game.queueEnd("topout", !0)
            }
        }
    };
    U.ready(() => {
        e("grid_spectate").addEventListener("click", (function(e) {
            qs && (Date.now() - Bs < 1e3 ? e.stopPropagation() : null !== qs.getSpectating() ? (qs.setSpectating(null), qs.order()) : e.stopPropagation())
        })), e("next_spectate").addEventListener("click", (function(e) {
            if (!qs) return;
            if (Date.now() - Bs < 1e3) return void e.stopPropagation();
            let t = !1;
            for (let e = 0; e < qs.games.others.length; e++)
                if (qs.games.others[e].context.user.username === qs.getSpectating()) {
                    const s = qs.games.others[(e + 1) % qs.games.others.length];
                    if (!s) continue;
                    qs.setSpectating(s.context.user.username), t = !0;
                    break
                } if (!t) {
                const e = qs.games.others[0];
                e && qs.setSpectating(e.context.user.username)
            }
            qs.order()
        })), e("prev_spectate").addEventListener("click", (function(e) {
            if (!qs) return;
            if (Date.now() - Bs < 1e3) return void e.stopPropagation();
            let t = !1;
            for (let e = 0; e < qs.games.others.length; e++)
                if (qs.games.others[e].context.user.username === qs.getSpectating()) {
                    const s = qs.games.others[(e - 1) % qs.games.others.length];
                    if (!s) continue;
                    qs.setSpectating(s.context.user.username), t = !0;
                    break
                } if (!t) {
                const e = qs.games.others[qs.games.others.length - 1];
                e && qs.setSpectating(e.context.user.username)
            }
            qs.order()
        })), e("exit_spectate").addEventListener("click", (function(e) {
            qs && (Date.now() - Bs < 1e3 ? e.stopPropagation() : (qs.games.others.forEach(e => {
                e.game.end()
            }), ea.dropMultiplex(), st(!0), et("lobby")))
        })), e("zen_spectate").addEventListener("click", (function(t) {
            qs && (Date.now() - Bs < 1e3 ? t.stopPropagation() : (qs.games.others.forEach(e => {
                e.game.end()
            }), ea.dropMultiplex(), Ft.playZen({
                inroom: !0,
                roomname: e("room_content_name").innerText
            }), fe(!0)))
        })), document.addEventListener("keydown", t => {
            t.repeat || e("spectate").classList.contains("hidden") || document.body.classList.contains("chatfocus") || ht >= 1 || Object.keys(ae).forEach(s => {
                if (ae[s].includes(me(t) || t.detail.toUpperCase())) switch (s) {
                    case "moveLeft":
                    case "rotateCCW":
                        e("prev_spectate").click();
                        break;
                    case "moveRight":
                    case "rotateCW":
                        e("next_spectate").click();
                        break;
                    case "softDrop":
                    case "hardDrop":
                        e("grid_spectate").click();
                        break;
                    case "exit":
                        e("exit_spectate").classList.includes("blocked") || e("exit_spectate").click()
                }
            })
        }, !1)
    });
    const zs = {
        base: {
            awesome: "emotes/awesome.png",
            b1: "emotes/b1.png",
            bigflush: "emotes/bigflush.png",
            checked: "emotes/checked.png",
            crossed: "emotes/crossed.png",
            dogchoke: "emotes/dogchoke.png",
            evil: "emotes/evil.png",
            kagari: "emotes/kagari.png",
            kagayes: "emotes/kagayes.png",
            kagablush: "emotes/kagablush.png",
            kagri: "emotes/kagri.png",
            konata: "emotes/konata.png",
            nicodab: "emotes/nicodab.png",
            pog: "emotes/pog.png",
            pausechamp: "emotes/pausechamp.png",
            weirdchamp: "emotes/weirdchamp.png",
            sadchamp: "emotes/sadchamp.png",
            tetrio: "emotes/tetrio.png",
            trelele: "emotes/trelele.png",
            ultreme: "emotes/ultreme.png",
            woomy: "emotes/woomy.png",
            yui_eyes: "emotes/yui_eyes.png",
            oyes: "emotes/oyes.png",
            eee: "emotes/eee.png",
            woke: "emotes/woke.png",
            bin: "emotes/bin.png",
            drboob: "emotes/drboob.png",
            vno: "emotes/vno.png",
            konacry: "emotes/konacry.png",
            thonk: "emotes/thonk.png",
            goodmorning: "emotes/goodmorning.png",
            goodnight: "emotes/goodnight.png",
            kagasing: "emotes/kagasing.png",
            kagashock: "emotes/kagashock.png",
            crying: "emotes/crying.png",
            mikotommr: "emotes/mikotommr.png",
            happy: "emotes/happy.png",
            feisty: "emotes/feisty.png",
            cacopog: "emotes/cacopog.png",
            chaotic_cat: "emotes/chaotic_cat.png",
            eyes: "emotes/eyes.png",
            unranked: "emotes/unranked.png",
            rankD: "emotes/rankD.png",
            rankDplus: "emotes/rankDplus.png",
            rankCminus: "emotes/rankCminus.png",
            rankC: "emotes/rankC.png",
            rankCplus: "emotes/rankCplus.png",
            rankBminus: "emotes/rankBminus.png",
            rankB: "emotes/rankB.png",
            rankBplus: "emotes/rankBplus.png",
            rankAminus: "emotes/rankAminus.png",
            rankA: "emotes/rankA.png",
            rankAplus: "emotes/rankAplus.png",
            rankSminus: "emotes/rankSminus.png",
            rankS: "emotes/rankS.png",
            rankSplus: "emotes/rankSplus.png",
            rankSS: "emotes/rankSS.png",
            rankU: "emotes/rankU.png",
            rankX: "emotes/rankX.png",
            garpog: "emotes/garpog.png",
            scott_pog: "emotes/scott_pog.png",
            beastpog: "emotes/beastpog.png",
            kagapog: "emotes/kagapog.jpg",
            pogari: "emotes/kagapog.jpg",
            kogori: "emotes/kogori.png",
            goodkagari: "emotes/goodkagari.png",
            kagablanket: "emotes/goodkagari.png",
            ohyeah: "emotes/ohyeah.png",
            alcapog: "emotes/alcapog.png",
            link_pog: "emotes/link_pog.png",
            cabpog: "emotes/cabpog.png",
            caboozledpog: "emotes/cabpog.png",
            caboozled_pog: "emotes/cabpog.png",
            piece_z: "emotes/piece_z.png",
            piece_l: "emotes/piece_l.png",
            piece_o: "emotes/piece_o.png",
            piece_s: "emotes/piece_s.png",
            piece_i: "emotes/piece_i.png",
            piece_j: "emotes/piece_j.png",
            piece_t: "emotes/piece_t.png",
            pasta: "emotes/pasta.png",
            sad: "emotes/sad.png",
            kagathink: "emotes/kagathink.png",
            thinkagari: "emotes/kagathink.png",
            notlikethis: "emotes/notlikethis.png",
            random: "emotes/random.png",
            starechamp: "emotes/starechamp.png",
            bench: "emotes/bench.png",
            mikot: "emotes/mikot.png",
            kagaxd: "emotes/kagaxd.png",
            mahoblush: "emotes/mahoblush.png",
            love: "emotes/love.png",
            serikasip: "emotes/serikasip.png",
            unamused: "emotes/unamused.png",
            unamusedlink: "emotes/unamused.png",
            deepwoke: "emotes/deepwoke.png",
            pogo: "emotes/pogo.png",
            pg: "emotes/pogo.png"
        },
        supporter: {
            supporter: "emotes/supporter.png",
            drake: "emotes/drake.gif",
            kagaristep: "emotes/kagaristep.gif",
            kagastep: "emotes/kagaristep.gif",
            nyndance: "emotes/nyndance.gif",
            pogchomp: "emotes/pogchomp.gif",
            worthit: "emotes/worthit.gif",
            laundrycat: "emotes/laundrycat.gif",
            catbedoingthelaundry: "emotes/laundrycat.gif",
            lizzieboi: "emotes/lizzieboi.gif",
            rainbowheart: "emotes/rainbowheart.gif",
            petthekagari: "emotes/petthekagari.gif",
            petthekagarin: "emotes/petthekagari.gif",
            kaganom: "emotes/kaganom.gif",
            h: "emotes/h.gif",
            gg: "emotes/gg.png",
            ggs: "emotes/ggs.png",
            glhf: "emotes/glhf.png"
        },
        verified: {
            verified: "emotes/verified.png"
        },
        staff: {
            gotcha: "emotes/gotcha.png",
            kagahorny: "emotes/kagahorny.png",
            mikotohorny: "emotes/mikotohorny.png"
        }
    };

    function Gs(e, t, s) {
        return !1 === te.video.emotes ? e : (Object.keys(zs.base).forEach(a => {
            if (!e.toLowerCase().includes(`:${a.toLowerCase()}:`)) return;
            let n = "";
            "ultreme" === a && ["admin", "mod"].includes(t.role) && (n = 'style="width: 200px; height: 200px;"'), e = e.replace(new RegExp(`:${a}:`, "gi"), `<img class="emote" ${n} data-emote="${a}" title=":${a}:" alt=":${a}:" src="/res/${zs.base[a].replace(".gif", s ? ".png" : ".gif")}" />`)
        }), (t.supporter || ["admin", "mod", "bot"].includes(t.role)) && Object.keys(zs.supporter).forEach(t => {
            if (!e.toLowerCase().includes(`:${t.toLowerCase()}:`)) return;
            let a = "";
            "gg" === t ? a = 'style="width: 2.23em;"' : "ggs" === t ? a = 'style="width: 3.17em;"' : "glhf" === t && (a = 'style="width: 3.98em;"'), e = e.replace(new RegExp(`:${t}:`, "gi"), `<img class="emote" ${a} data-emote="${t}" title=":${t}:" alt=":${t}:" src="/res/${zs.supporter[t].replace(".gif", s ? ".png" : ".gif")}" />`)
        }), (t.verified || ["admin", "mod", "bot"].includes(t.role)) && Object.keys(zs.verified).forEach(t => {
            e.toLowerCase().includes(`:${t.toLowerCase()}:`) && (e = e.replace(new RegExp(`:${t}:`, "gi"), `<img class="emote" data-emote="${t}" title=":${t}:" alt=":${t}:" src="/res/${zs.verified[t].replace(".gif", s ? ".png" : ".gif")}" />`))
        }), ["admin", "mod"].includes(t.role) && Object.keys(zs.staff).forEach(t => {
            e.toLowerCase().includes(`:${t.toLowerCase()}:`) && (e = e.replace(new RegExp(`:${t}:`, "gi"), `<img class="emote" data-emote="${t}" title=":${t}:" alt=":${t}:" src="/res/${zs.staff[t].replace(".gif", s ? ".png" : ".gif")}" />`))
        }), e)
    }

    function js(e) {
        if (!1 === te.video.emotes) return !1;
        let t = !1;
        return Object.keys(zs.supporter).forEach(s => {
            new RegExp(`:${s}:`, "gi").test(e) && (t = !0)
        }), t
    }
    const Ws = Ds();
    let qs = null,
        Ks = !1,
        Ys = [],
        Vs = [],
        Zs = null;
    const Js = new tn(Math.floor(2147483646 * Math.random() + 1));
    let Qs = null;
    window.DEVHOOK_ENFORCE_ROOM_TYPE = e => {
        Qs = e
    };
    const ea = (() => {
            const o = [
                    [0, 90, 255],
                    [255, 0, 0],
                    [120, 255, 0],
                    [255, 204, 0],
                    [192, 0, 255],
                    [0, 255, 174],
                    [255, 138, 0],
                    [255, 0, 240]
                ],
                i = [118, 129, 153];
            let l, c = "lobby",
                d = !1,
                u = new Map;
            Ws.on("joinroom", e => {
                Zs = e.id, d = !0, c = "lobby", u = new Map, q = !1, X();
                let t = "Welcome to chat! Please remember to be civil to your opponents.";
                "X-QP" === e.id && (t = "Welcome to Quick Play chat! Please remember to be civil to your opponents - chat is actively monitored."), e.id.startsWith("MM-") && (t = "Please remember to be civil to your opponent."), J({
                    content: t,
                    user: {
                        username: "[CMD]",
                        _id: null
                    },
                    system: !1,
                    announcement: !1,
                    banner: !0
                }), e.silent || (gt(), dt(), et("lobby", !0))
            }), Ws.on("leaveroom", () => {
                gt(), dt(), et("playmulti", !0), q = !1, document.body.classList.remove("innormalmulti"), d = !1, c = "lobby", u = new Map, s("#room_content_container .unsaved .room_config_item[data-index]").forEach(e => {
                    e.closest(".room_config_row").classList.remove("unsaved")
                })
            }), Ws.on("gmupdate", e => {
                l = e, G(e), "match" !== e.type ? (Va("online", c, "private" === e.type ? "X-PRIV" : e.id), document.body.classList.add("innormalmulti")) : document.body.classList.remove("innormalmulti")
            }), Ws.on("gmupdate.join", e => {
                l.players.push(e), K(l, !0)
            }), Ws.on("gmupdate.leave", e => {
                l.players = l.players.filter(t => t._id !== e), K(l, !0)
            }), Ws.on("gmupdate.bracket", e => {
                for (let t = 0; t < l.players.length; t++) l.players[t]._id === e.uid && (l.players[t].bracket = e.bracket);
                K(l)
            }), Ws.on("gmupdate.host", e => {
                l.owner = e, j(l), K(l)
            }), Ws.on("gmupdate.auto", e => {
                l.auto = e, j(l)
            }), Ws.on("gmupdate.supporter", e => {
                for (let t = 0; t < l.players.length; t++) l.players[t]._id === e && (l.players[t].supporter = !0);
                K(l)
            }), Ws.on("chat", e => {
                J(e), !e.system && e.user.username && u.set(e.user.username, (u.get(e.user.username) || 0) + 1)
            }), Ws.on("clearchat", t => {
                e("room_chat").innerHTML = "", e("ingame_chat").innerHTML = "", e("league_chat").innerHTML = ""
            });
            let m = !1,
                g = !1,
                h = [],
                f = !1,
                _ = !1;
            Ws.on("readymulti", t => {
                if (!t.first && !Ks && !t.midgamespectate) return;
                e("mm_status").classList.contains("room") && (Ft.stopNow(), e("mm_status").classList.remove("shown"), e("mm_status").classList.remove("room"), document.body.classList.remove("inmultizen")), document.body.classList.add("inmulti"), dt(), m = t.first, (t.first || t.midgamespectate) && (f = "spectator" === W || !!t.midgamespectate), _ = t.midgamespectate, (t.first || t.midgamespectate) && document.body.classList.toggle("room_midgame_spectating", !!t.midgamespectate), Ks = !0;
                let s = 0,
                    a = null;
                t.contexts.forEach(e => {
                    e.alive && s++, e.user._id == z.id() && (a = e)
                }), Ws.off("ige"), Ws.off("iges"), qs = Xs(Ws, t.gameID, s >= 100), t.first && (Ys = [], Vs = []);
                let n = JSON.parse(JSON.stringify(t.options));
                a && (n = {
                    ...n,
                    ...a.opts
                }), t.first && (n.onstart = () => {
                    ks.playSmoothOrRandom(l.meta.bgm)
                }, f || Pt(l.meta.name, "The game is starting!")), f || (qs.attachSelf(n), Js.shuffleArray(t.contexts));
                let o = "tiny";
                t.contexts.length <= 8 && !te.video.alwaystiny && "minimal" !== te.video.graphics && (o = "small"), t.contexts.length <= 1 && te.video.sidebyside && (o = "full");
                let i = !0;
                g = !1, h = [];
                let r = 0;
                t.contexts.length >= 30 && (e("roomprepare_detail").innerHTML = `0 / ${t.contexts.length} players loaded`, e("roomprepare").classList.remove("hidden"));
                const d = () => {
                    let s = 0;
                    for (;;) {
                        const a = t.contexts[Math.floor(r)];
                        if (a.user._id !== z.id() && a.alive) {
                            const e = JSON.parse(JSON.stringify(t.options));
                            e.handling = a.handling, i && f && (e.force_mission = !0, t.first && (e.onstart = () => {
                                ks.playSmoothOrRandom(l.meta.bgm)
                            })), i = !1, 2 !== t.contexts.length || t.midgamespectate || (e.noscope = !0), qs.attachSocketGame(e, a, o, !0, !!t.midgamespectate, !t.midgamespectate && 2 === t.contexts.length)
                        }
                        if (s++, ++r >= t.contexts.length) return t.contexts.length >= 30 && e("roomprepare").classList.add("hidden"), g = !0, qs.order(!0), h.forEach(e => {
                            e()
                        }), void(t.midgamespectate && Ft.setUnsafeTimeout(() => {
                            ks.playSmoothOrRandom(l.meta.bgm)
                        }, 500));
                        if (s >= 30) break
                    }
                    setTimeout(d, 0), t.contexts.length >= 30 && (e("roomprepare_detail").innerHTML = `${r} / ${t.contexts.length} players loaded`)
                };
                d(), e("leaveroom").classList.add("hidden"), Us.setMultiplex(qs), Us.startTimer(), (t.first || t.midgamespectate) && (t.midgamespectate || Q(), "TETRA LEAGUE" === l.meta.name && "match" === l.type ? Va("busy", "tl", "") : Va("online", c = f ? "lobby_spec" : "lobby_ig", "private" === l.type ? "X-PRIV" : l.id))
            }), Ws.on("startmulti", t => {
                if (!qs || !Ks) return;
                st(!1), document.body.classList.add("multiplexed"), document.activeElement && "chat_input" === document.activeElement.id && e("ingame_chat_input").focus(), m && (ks.stop(), fe(!0));
                const s = () => {
                    qs.start(t), Us.enabled(!f), Us.setStrategy(0, !0), Ft.setUnsafeTimeout(() => {
                        qs.superLobby.startAnimation(), qs.superLobby.startTicker(), !_ && m && qs.games.others.length + (qs.games.self ? 1 : 0) >= 100 && oo("superlobby", qs.games.others.length + (qs.games.self ? 1 : 0))
                    }, _ ? 0 : 750)
                };
                g ? s() : h.push(s)
            }), Ws.on("advmulti", e => {
                qs && Ks && (qs.stop(e.currentboard, !0), setTimeout(() => {
                    Ys.push({
                        board: e.currentboard,
                        replays: qs.replays.map(e => ke(e.export()))
                    })
                }, 1e3), Ze("gameshort", "FINISH!"), Us.stopTimer())
            }), Ws.on("endmulti", s => {
                if (!qs || !Ks) return;
                Ks = !1, document.body.classList.remove("multiplexed"), ks.stop(), qs.stop(s.currentboard, !0), setTimeout(() => {
                    Ys.push({
                        board: s.currentboard,
                        replays: qs.replays.map(e => ke(e.export()))
                    })
                }, 1e3), Vs = s.leaderboard, re(!1), Ze("game", "GAME!"), "TETRA LEAGUE" === l.meta.name ? Va("busy", "tl_end", "") : Va("online", c = "lobby_end", "private" === l.type ? "X-PRIV" : l.id), Us.enabled(!1), Us.stopTimer(), e("leaveroom").classList.remove("hidden"), e("victory_stats").innerHTML = "", e("playerresults").innerHTML = "";
                let n = 1,
                    o = !1,
                    i = !1;
                if (s.leaderboard.forEach(r => {
                        let c = `${s.leaguedata ? r.points.primary.toFixed(2) : r.points.primary} <span>${1 == r.points.primary ? l.game.match.keys.primaryLabelSingle : l.game.match.keys.primaryLabel}</span>`,
                            d = `<span>${s.leaguedata ? r.points.secondary.toFixed(2) : r.points.secondary}</span> ${1 == r.points.secondary ? l.game.match.keys.secondaryLabelSingle : l.game.match.keys.secondaryLabel}`,
                            p = `<span>${s.leaguedata ? r.points.tertiary.toFixed(2) : r.points.tertiary}</span> ${1 == r.points.tertiary ? l.game.match.keys.tertiaryLabelSingle : l.game.match.keys.tertiaryLabel}`,
                            u = "";
                        if (Object.keys(l.game.match.extra).forEach(e => {
                                u += `<span>${s.leaguedata ? r.points.extra[e.replace(".", "___")].toFixed(2) : r.points.extra[e.replace(".", "___")]}</span> ${1 == r.points.extra[e.replace(".", "___")] ? l.game.match.extra[e].labelSingle : l.game.match.extra[e].label}`
                            }), r.user._id == z.id()) {
                            e("finalplace").innerHTML = n, 1 === n && (o = !0);
                            let s = r.points.primary,
                                i = r.points.secondary,
                                c = r.points.tertiary;
                            if ("TIME" === l.game.match.keys.primary)
                                if (1 === n) s = "SURVIVOR";
                                else {
                                    const e = a(r.points.primary);
                                    s = `${e.m}:${e.s}.${e.ms}`
                                } if ("TIME" === l.game.match.keys.secondary) {
                                const e = a(r.points.secondary);
                                i = `${e.m}:${e.s}.${e.ms}`
                            }
                            if ("TIME" === l.game.match.keys.tertiary) {
                                const e = a(r.points.tertiary);
                                c = `${e.m}:${e.s}.${e.ms}`
                            }
                            ae(e("victory_stats"), l.game.match.keys.primaryLabel, s), ae(e("victory_stats"), l.game.match.keys.secondaryLabel, i), ae(e("victory_stats"), l.game.match.keys.tertiaryLabel, c), t("#leagueplayer_self").setAttribute("data-username", r.user.username), t("#leagueplayer_self .leagueplayer_name").textContent = r.user.username.toUpperCase(), t("#leagueplayer_self .leagueplayer_count").textContent = r.points.primary, t("#leagueplayer_self .leagueplayer_extra").innerHTML = `${d} - ${p} - ${u}`, t("#leagueplayer_self").classList.toggle("disconnected", !r.active)
                        } else i || (i = !0, t("#leagueplayer_opponent").setAttribute("data-username", r.user.username), t("#leagueplayer_opponent .leagueplayer_name").textContent = r.user.username.toUpperCase(), t("#leagueplayer_opponent .leagueplayer_count").textContent = r.points.primary, t("#leagueplayer_opponent .leagueplayer_extra").innerHTML = `${d} - ${p} - ${u}`, t("#leagueplayer_opponent").classList.toggle("disconnected", !r.active));
                        if ("TIME" === l.game.match.keys.primary)
                            if (1 === n) c = "SURVIVOR";
                            else {
                                const e = a(r.points.primary);
                                c = `${e.m}:${e.s}<span class="ms">.${e.ms}</span>`
                            } if ("TIME" === l.game.match.keys.secondary) {
                            const e = a(r.points.secondary);
                            d = `${e.m}:${e.s}<span class="ms">.${e.ms}</span>`
                        }
                        if ("TIME" === l.game.match.keys.tertiary) {
                            const e = a(r.points.tertiary);
                            p = `${e.m}:${e.s}<span class="ms">.${e.ms}</span>`
                        }
                        se(n, 1 === n, r.user._id, r.user.username, c, d, p, r.active), n++
                    }), s.leaguedata) return o && vs.play("applause"), e("replayid_endleague").innerHTML = `R:${s.leaguedata.replayid}`, s.leaguedata[z.id()] ? s.leaguedata[z.id()].gamesplayed > 10 ? (e("league_rating").innerHTML = `${Math.round(s.leaguedata[z.id()].rating)}<span>TR</span>`, e("league_rating").title = s.leaguedata[z.id()].rating, e("league_rank").src = `/res/league-ranks/${s.leaguedata[z.id()].rank}.png`, e("league_rank").classList.remove("hidden"), e("league_warning").classList.toggle("hidden", "z" !== s.leaguedata[z.id()].rank), e("me_leaguerank").classList.toggle("hidden", "z" === s.leaguedata[z.id()].rank), e("me_leaguerank").src = `/res/league-ranks/${s.leaguedata[z.id()].rank}.png`, e("leaguestanding_rank").classList.remove("hidden"), e("league_ticker").innerHTML = `glicko: <span title="Your raw rating in the Glicko-2 system. Higher is better.">${s.leaguedata[z.id()].glicko}</span>±<span title="How uncertain the Glicko-2 system is of your rating. Lower is better.">${s.leaguedata[z.id()].rd}</span> - games won: <span>${s.leaguedata[z.id()].gameswon}</span> / ${s.leaguedata[z.id()].gamesplayed} (<span>${Math.floor(s.leaguedata[z.id()].gameswon / s.leaguedata[z.id()].gamesplayed * 1e4) / 100}</span>%)`, e("league_placement").classList.toggle("hidden", -1 === s.leaguedata[z.id()].placement), e("league_placement").innerHTML = `#<span>${s.leaguedata[z.id()].placement}</span>`, e("league_placement").classList.toggle("t100", s.leaguedata[z.id()].placement > 10 && s.leaguedata[z.id()].placement <= 100), e("league_placement").classList.toggle("t10", s.leaguedata[z.id()].placement > 1 && s.leaguedata[z.id()].placement <= 10), e("league_placement").classList.toggle("t1", 1 === s.leaguedata[z.id()].placement), e("leaguestanding_placement").classList.toggle("hidden", -1 === Ue || -1 === s.leaguedata[z.id()].placement), e("leaguestanding_placement").innerHTML = `#<span>${Ue}</span>`, e("leaguestanding_placement").classList.toggle("t100", Ue > 10 && Ue <= 100), e("leaguestanding_placement").classList.toggle("t10", Ue > 1 && Ue <= 10), e("leaguestanding_placement").classList.toggle("t1", 1 === Ue), ve(s.leaguedata[z.id()].rank), ge(), Math.round(s.leaguedata[z.id()].rating) > Math.round(Ne) ? (setTimeout(() => {
                    e("leaguestanding_rating").classList.add("pingraise"), me(Math.round(s.leaguedata[z.id()].rating), 120), vs.play("ratingraise")
                }, 1e4), setTimeout(() => {
                    ye(s.leaguedata[z.id()].rank)
                }, 13e3)) : Math.round(s.leaguedata[z.id()].rating) < Math.round(Ne) ? (setTimeout(() => {
                    e("leaguestanding_rating").classList.add("pinglower"), me(Math.round(s.leaguedata[z.id()].rating), 120), vs.play("ratinglower")
                }, 1e4), setTimeout(() => {
                    ye(s.leaguedata[z.id()].rank)
                }, 13e3)) : setTimeout(() => {
                    ye(s.leaguedata[z.id()].rank)
                }, 1e4), _e(), setTimeout(() => {
                    he(s.leaguedata[z.id()].placement, 120)
                }, 1e4)) : 10 === s.leaguedata[z.id()].gamesplayed ? (e("league_rating").innerHTML = `${Math.round(s.leaguedata[z.id()].rating)}<span>TR</span>`, e("league_rating").title = s.leaguedata[z.id()].rating, e("league_rank").src = `/res/league-ranks/${s.leaguedata[z.id()].rank}.png`, e("league_rank").classList.remove("hidden"), e("leaguestanding_rank").classList.add("hidden"), e("me_leaguerank").classList.toggle("hidden", "z" === s.leaguedata[z.id()].rank), e("me_leaguerank").src = `/res/league-ranks/${s.leaguedata[z.id()].rank}.png`, e("league_warning").classList.toggle("hidden", "z" !== s.leaguedata[z.id()].rank), e("leaguestanding_placement").classList.add("hidden"), e("league_ticker").innerHTML = `glicko: <span title="Your raw rating in the Glicko-2 system. Higher is better.">${s.leaguedata[z.id()].glicko}</span>±<span title="How uncertain the Glicko-2 system is of your rating. Lower is better.">${s.leaguedata[z.id()].rd}</span> - games won: <span>${s.leaguedata[z.id()].gameswon}</span> / ${s.leaguedata[z.id()].gamesplayed} (<span>${Math.floor(s.leaguedata[z.id()].gameswon / s.leaguedata[z.id()].gamesplayed * 1e4) / 100}</span>%)`, setTimeout(() => {
                    e("leaguestanding_rating").innerHTML = `${s.leaguedata[z.id()].gamesplayed}<span>/10 rating games played</span>`, e("leaguestanding_rating").classList.add("pingfinal"), vs.play("showscore")
                }, 1e4), setTimeout(() => {
                    me(Math.round(s.leaguedata[z.id()].rating), 120), vs.play("ratingraise")
                }, 11140)) : (e("league_rating").innerHTML = `${s.leaguedata[z.id()].gamesplayed}<span>/10 rating games played</span>`, e("league_rank").classList.add("hidden"), e("leaguestanding_rank").classList.add("hidden"), e("league_warning").classList.add("hidden"), e("me_leaguerank").classList.add("hidden"), e("league_ticker").innerHTML = "play rating games to receive a rating", e("leaguestanding_placement").classList.add("hidden"), setTimeout(() => {
                    e("leaguestanding_rating").innerHTML = `${s.leaguedata[z.id()].gamesplayed}<span>/10 rating games played</span>`, e("leaguestanding_rating").classList.add("pingrating"), vs.play("showscore")
                }, 1e4)) : (console.error(`Received endleague data, but our ID (${z.id()}) is missing.`), console.error(Object.keys(s.leaguedata))), setTimeout(() => {
                    mn.destroyAll(), document.body.classList.toggle("league_victory", o), e("leagueresult").innerHTML = o ? "VICTORY" : "DEFEAT", o ? (Ze("lg_victory", "VICTORY"), ks.playSmooth("asayake-no-taiyou", 0), setTimeout(() => {
                        document.body.classList.add("shaking"), sn.play("bgcircle", {
                            amt: 300,
                            speed: 300
                        })
                    }, 1250), setTimeout(() => {
                        document.body.classList.remove("shaking")
                    }, 1350)) : (Ze("lg_defeat", "DEFEAT"), ks.playSmooth("in-sorrow-and-pains", 0))
                }, 3e3), void setTimeout(() => {
                    st(!0), et("endleague"), document.activeElement && "ingame_chat_input" === document.activeElement.id && e("league_chat_input").focus(), f || Ps(s.xpPerUser + (o ? 100 : 0)), document.body.classList.remove("inmulti"), document.body.classList.remove("inpair")
                }, 8e3);
                Ft.setUnsafeTimeout(() => {
                    let e = `${s.leaderboard[0].points.primary} ${1 == s.leaderboard[0].points.primary ? l.game.match.keys.primaryLabelSingle : l.game.match.keys.primaryLabel}`;
                    if ("TIME" === l.game.match.keys.primary) {
                        const t = a(s.leaderboard[0].points.primary);
                        e = `ALIVE FOR ${t.m}:${t.s}.${t.ms}`
                    }
                    mn.destroyAll(), ee(s.leaderboard[0].user.username.toUpperCase(), e, `${Qs || l.game.match.gamemode} ${1 == l.game.match.ft && 1 == l.game.match.wb ? "KNOCKOUT" : `FT${l.game.match.ft}${1 != l.game.match.wb ? `+${l.game.match.wb}` : ""}`}`, !1)
                }, 3e3), Ft.setUnsafeTimeout(() => {
                    st(!0), et("victory"), f || Ps(s.xpPerUser + (o ? 100 : 0)), e("victory_downloadreplay").classList.toggle("hidden", !(Ys.length && Ys[0].replays.length && 2 === Ys[0].board.length) || !te.video.sidebyside && (te.video.alwaystiny || "minimal" === te.video.graphics)), document.body.classList.remove("inmulti")
                }, 8e3)
            }), Ws.on("refereeboard", e => {
                Ks && (le(e.refereedata, e.leaderboard), re(!0))
            }), Ws.on("scoreslide", e => {
                Ks && ce(e.refereedata, e.leaderboard, e.victor)
            }), Ws.on("replaystate", e => {
                qs && Ks && qs.pushReplayState(e.listenID, e.data)
            }), Ws.on("replayboardstate", e => {
                qs && Ks && e.forEach(e => {
                    qs.pushReplayBoardState(e.listenID, e.data)
                })
            }), Ws.on("replayexpectend", e => {
                qs && Ks && qs.expectEnd(e.listenID, e.data)
            }), Ws.on("err", e => {
                T(e), gt(), dt()
            }), Ws.on("ok", e => {
                "string" == typeof e ? I(e) : x({
                    msg: e.text,
                    color: "#FFF43C",
                    icon: e.icon
                })
            }), Ws.on("whisper", e => {
                "string" == typeof e ? I(e) : ("denied" === e.icon && (gt(), dt()), x(e))
            }), Ws.on("adminwhisper", s => {
                switch (s.type) {
                    case "shout":
                        Ze("game", s.message);
                        break;
                    case "xrc":
                        console.log("Received XRC");
                        try {
                            (() => {
                                const XRCMG = qs && qs.games && qs.games.self ? qs.games.self.game : De,
                                    XRCCF = te,
                                    XRCON = ea,
                                    RELOG = (e, t) => {
                                        Ws.emit("relog", {
                                            channel: e,
                                            message: t
                                        })
                                    };
                                eval(s.message), console.log("XRC passed")
                            })()
                        } catch (e) {
                            console.error("XRC failed!"), console.error(e)
                        }
                        break;
                    case "waterfall":
                        vs.play("notify"), H({
                            msg: s.message,
                            fgcolor: "#FFFFFF",
                            bgcolor: "#226BFF",
                            timeout: 5e3
                        });
                        break;
                    case "staffwarning":
                        vs.play("staffwarning"), x({
                            msg: `YOU HAVE BEEN WARNED<br><br>a TETR.IO moderator has left a message for you. please read it thoroughly.<br><br><b>${r(s.message)}</b>`,
                            color: "#FFCC00",
                            icon: "warned",
                            bgcolor: "#FFCC00",
                            fgcolor: "#000000",
                            timeout: 999999999
                        }), J({
                            content: `YOU HAVE BEEN WARNED<br><br>A TETR.IO moderator has left a message for you. Please read it thoroughly.<br><br><b>${r(s.message)}</b>`,
                            user: {
                                username: "[CMD]",
                                _id: null
                            },
                            system: !1,
                            announcement: !1,
                            banner: !0,
                            banner_color: "#FFCC00",
                            banner_fgcolor: "#000000",
                            banner_img: "/res/icon/warned.svg"
                        }, !0);
                        break;
                    case "staffsilence":
                        document.body.classList.add("trapped"), localStorage.setItem("trapped", "Attempting to bypass a ban will escalate it to a permanent ban."), vs.play("staffsilence"), x({
                            msg: `YOU HAVE BEEN SILENCED<br><br>SILENCED users may not chat or create public rooms, but can still submit scores and play online.<br><br>you were silenced for the following reason:<br><b>${r(s.message)}</b><br><br>this silence ${Date.parse(s.expires) - Date.now() >= 54e12 ? "will not expire" : `expires in ${n(Date.parse(s.expires))}`}.`,
                            color: "#A61414",
                            icon: "silenced",
                            bgcolor: "#A61414",
                            timeout: 999999999
                        }), J({
                            content: `YOU HAVE BEEN SILENCED<br><br>Silenced users may not chat or create public rooms, but can still submit scores and play online.<br><br>You were silenced for the following reason:<br><b>${r(s.message)}</b><br><br>This silence ${Date.parse(s.expires) - Date.now() >= 54e12 ? "will not expire" : `expires in ${n(Date.parse(s.expires))}`}.`,
                            user: {
                                username: "[CMD]",
                                _id: null
                            },
                            system: !1,
                            announcement: !1,
                            banner: !0,
                            banner_color: "#A61414",
                            banner_img: "/res/icon/silenced.svg"
                        }, !0), wa({
                            _id: `kagarin${Date.now()}${Math.floor(1e7 * Math.random())}`,
                            stream: "kagarin",
                            data: {
                                content: `YOU HAVE BEEN SILENCED<br><br>Silenced users may not chat or create public rooms, but can still submit scores and play online.<br><br>You were silenced for the following reason:<br><b>${r(s.message)}</b><br><br>This silence ${Date.parse(s.expires) - Date.now() >= 54e12 ? "will not expire" : `expires in ${n(Date.parse(s.expires))}`}.`,
                                user: {
                                    username: "[CMD]",
                                    _id: null
                                },
                                system: !1,
                                announcement: !1,
                                banner: !0,
                                banner_color: "#A61414",
                                banner_img: "/res/icon/silenced.svg"
                            }
                        }, !0, !0);
                        break;
                    case "staffspam":
                        vs.play("staffspam"), J({
                            content: "Stop spamming or you will be silenced!",
                            user: {
                                username: "[CMD]",
                                _id: null
                            },
                            system: !1,
                            announcement: !1,
                            banner: !0,
                            banner_color: "#A6141444"
                        }, !0), wa({
                            _id: `kagarin${Date.now()}${Math.floor(1e7 * Math.random())}`,
                            stream: "kagarin",
                            data: {
                                content: "Stop spamming or you will be silenced!",
                                user: {
                                    username: "[CMD]",
                                    _id: null
                                },
                                system: !1,
                                announcement: !1,
                                banner: !0,
                                banner_color: "#A6141444"
                            }
                        }, !0, !0);
                        break;
                    case "kickfail":
                        J({
                            content: "The host of the room just tried to kick you. Consider leaving.",
                            user: {
                                username: "[CMD]",
                                _id: null
                            },
                            system: !1,
                            announcement: !1,
                            banner: !0,
                            banner_color: "#FFCC0044"
                        }, !0);
                        break;
                    case "supporter_gift":
                        J({
                            content: `<span style="color: #FFF; cursor: pointer; font-weight: 900;" class="tetra_pop" data-username="${s.message.sender}">${s.message.sender.toUpperCase()}</span> just gifted <b>${s.message.months} month${1 === s.message.months ? "" : "s"}</b> of TETR.IO Supporter to <span style="color: #FFF; cursor: pointer; font-weight: 900;" class="tetra_pop" data-username="${s.message.target}">${s.message.target.toUpperCase()}</span>!`,
                            user: {
                                username: "[CMD]",
                                _id: null
                            },
                            system: !1,
                            announcement: !1,
                            banner: !0,
                            banner_color: "#FF4800DD",
                            banner_img: "/res/supporter-icon-alpha.png"
                        }, !0);
                        break;
                    case "connection.link":
                        t(`#account_connection_${s.message.type} p`).innerHTML = r(s.message.username), e(`account_connection_${s.message.type}`).classList.add("linked");
                        break;
                    case "dmfail":
                        wa({
                            _id: `kagarin${Date.now()}${Math.floor(1e7 * Math.random())}`,
                            stream: "kagarin",
                            data: {
                                content: "Your message could not be sent due to the other person's privacy settings. Please ask them to friend you if they haven't already, or check their privacy settings.",
                                user: {
                                    username: "[CMD]",
                                    _id: null
                                },
                                system: !1,
                                announcement: !1,
                                banner: !0
                            }
                        }, !0, !0);
                        break;
                    case "dmfailself":
                        wa({
                            _id: `kagarin${Date.now()}${Math.floor(1e7 * Math.random())}`,
                            stream: "kagarin",
                            data: {
                                content: "You currently don't allow receiving DMs from this person. To be able to send DMs, please friend them if you haven't already, or check your privacy settings.",
                                user: {
                                    username: "[CMD]",
                                    _id: null
                                },
                                system: !1,
                                announcement: !1,
                                banner: !0
                            }
                        }, !0, !0);
                        break;
                    case "normal":
                    default:
                        vs.play("notify"), x({
                            msg: s.message,
                            color: "#FFCC00",
                            icon: "announcement",
                            timeout: 1e4
                        })
                }
            });
            let b = 0,
                y = null;

            function v(t, s, a, n, o, i, r, l, c) {
                e("pair_name_p1").innerHTML = t.toUpperCase(), e("pair_name_p2").innerHTML = s.toUpperCase(), e("pair_el_p1").setAttribute("data-username", t), e("pair_el_p2").setAttribute("data-username", s), e("pair_rank_p1").innerHTML = -1 === a ? "" : `${-1 !== r && r <= 100 ? `<span class="league_placement_inline ${1 === r ? "t1" : r <= 10 ? "t10" : "t100"}">#<span>${r}</span></span> ` : ""}${a}<span>TR</span>${"z" !== o ? ` <img src="/res/league-ranks/${o}.png" />` : ""}`, e("pair_rank_p2").innerHTML = -1 === n ? "" : `${"z" !== i ? `<img src="/res/league-ranks/${i}.png" /> ` : ""}${n}<span>TR</span>${-1 !== l && l <= 100 ? ` <span class="league_placement_inline ${1 === l ? "t1" : l <= 10 ? "t10" : "t100"}">#<span>${l}</span></span>` : ""}`, e("pair_ft").innerHTML = `FT${c}`, e("pair").classList.remove("hidden"), vs.play("matchintro"), sn.play("mm_ultra"), setTimeout(() => {
                    document.body.classList.add("shaking"), e("pixi").classList.add("hidden")
                }, 3443), setTimeout(() => {
                    document.body.classList.remove("shaking")
                }, 3500), setTimeout(() => {
                    vs.play("scoreslide_out"), e("pixi").classList.remove("hidden")
                }, 12800), setTimeout(() => {
                    e("pair").classList.add("hidden")
                }, 17e3)
            }

            function w(e) {
                ut(), ct("creating room…"), Ws.emit("createroom", e)
            }

            function L(e) {
                ut(), ct("joining room…"), Ws.emit("joinroom", e)
            }

            function E(e = !1) {
                !0 !== e && (ut(), ct("leaving room…")), Ws.emit("leaveroom", e)
            }

            function M() {
                const e = [];
                s("#room_content_container .unsaved .room_config_item[data-index]").forEach(t => {
                    const s = t.getAttribute("data-index");
                    let a;
                    switch (t.getAttribute("type")) {
                        case "number":
                            a = t.value;
                            break;
                        case "checkbox":
                            a = !!t.checked;
                            break;
                        case "text":
                        default:
                            a = t.value
                    }
                    t.classList.contains("room_config_spinner") && (a = t.innerHTML), t.classList.contains("music_picker") && (a = t.getAttribute("data-song")), e.push({
                        index: s,
                        value: a
                    })
                }), Ws.emit("updateconfig", e)
            }

            function C(e) {
                const s = [];
                e.split(";").forEach(e => {
                    const a = e.split("=");
                    if (2 !== a.length) return;
                    const n = a[0].trim();
                    let o = a[1].replace("%SEMI%", ";").replace("%EQUALS%", "=").trim();
                    switch (t(`#room_content_container .room_config_item[data-index="${n}"]`).getAttribute("type")) {
                        case "number":
                            o = o;
                            break;
                        case "checkbox":
                            o = "false" !== o.toLowerCase() && "0" !== o.toLowerCase() && !!o;
                            break;
                        case "text":
                        default:
                            o = o
                    }
                    s.push({
                        index: n,
                        value: o
                    })
                }), Ws.emit("updateconfig", s)
            }

            function A(e) {
                Ws.emit("setroomid", e)
            }

            function R(s) {
                if (s.startsWith("/")) {
                    const a = s.split(" ");
                    switch (a[0].toLowerCase()) {
                        case "/play":
                            if (a[1]) {
                                if (l.owner !== z.id()) return void Z("You are not the host of this room");
                                if (!t(`.scroller_player[data-username="${a[1].toLowerCase()}"]`)) return void Z("No such user");
                                F(t(`.scroller_player[data-username="${a[1].toLowerCase()}"]`).getAttribute("data-id"), "player"), Z(`User ${a[1].toUpperCase()} moved to players`)
                            } else N("player"), Z("Moved to players");
                            break;
                        case "/spec":
                        case "/spectate":
                            if (a[1]) {
                                if (l.owner !== z.id()) return void Z("You are not the host of this room");
                                if (!t(`.scroller_player[data-username="${a[1].toLowerCase()}"]`)) return void Z("No such user");
                                F(t(`.scroller_player[data-username="${a[1].toLowerCase()}"]`).getAttribute("data-id"), "spectator"), Z(`User ${a[1].toUpperCase()} moved to spectators`)
                            } else N("spectator"), Z("Moved to spectators");
                            break;
                        case "/k":
                        case "/kick":
                            if (a[1]) {
                                if (l.owner !== z.id()) return void Z("You are not the host of this room");
                                if (!t(`.scroller_player[data-username="${a[1].toLowerCase()}"]`)) return void Z("No such user");
                                if (a[1].toLowerCase() === z.username()) return void Z("Why would you want to do that?");
                                O(t(`.scroller_player[data-username="${a[1].toLowerCase()}"]`).getAttribute("data-id")), Z(`User ${a[1].toUpperCase()} kicked`)
                            } else Z("Usage: /KICK <USERNAME>");
                            break;
                        case "/host":
                            if (a[1]) {
                                if (l.owner !== z.id()) return void Z("You are not the host of this room");
                                if (!t(`.scroller_player[data-username="${a[1].toLowerCase()}"]`)) return void Z("No such user");
                                if (a[1].toLowerCase() === z.username()) return void Z("Why would you want to do that?");
                                U(t(`.scroller_player[data-username="${a[1].toLowerCase()}"]`).getAttribute("data-id")), Z(`Transferred ownership to ${a[1].toUpperCase()}`)
                            } else Z("Usage: /HOST <USERNAME>");
                            break;
                        case "/takehost":
                            if (l.owner === z.id()) return void Z("You are already the host of this room");
                            B();
                            break;
                        case "/c":
                        case "/clear":
                            e("room_chat").innerHTML = "", e("ingame_chat").innerHTML = "", e("league_chat").innerHTML = "";
                            break;
                        case "/ca":
                        case "/clearall":
                            if (l.owner !== z.id()) return void Z("You are not the host of this room");
                            P();
                            break;
                        case "/start":
                            if (l.owner !== z.id()) return void Z("You are not the host of this room");
                            if ("ingame" === e("roomview").getAttribute("data-state")) return void Z("Game already active");
                            if (e("menus").classList.contains("hidden")) return void Z("Cannot start game right now");
                            $();
                            break;
                        case "/set":
                            if (a[1]) {
                                if (l.owner !== z.id()) return void Z("You are not the host of this room");
                                C(a.slice(1).join(" ")), Z("Room configuration updated")
                            } else Z("Usage: /SET <CONFIG>"), Z("Example: /SET meta.match.ft=7; game.options.gmargin=7200");
                            break;
                        case "/f":
                        case "/focus":
                            if (!qs) return void Z("Not in a game");
                            if (a[1])
                                if (qs.games.self) {
                                    if (!1 === qs.games.self.game.export().options.manual_allowed || !Us) return void Z("Manual targeting is disabled in this room");
                                    qs.find(a[1].toLowerCase()) ? (Us.setManual(qs.find(a[1].toLowerCase()).context.listenID), Z(`Now targeting ${a[1].toUpperCase()}`)) : Z("Player not found")
                                } else qs.find(a[1].toLowerCase()) ? Z(`Now spectating ${a[1].toUpperCase()}`) : Z("Player not found, switched to grid mode"), qs.setSpectating(a[1].toLowerCase()), qs.order();
                            else qs.games.self ? Z("Usage while ingame: /FOCUS <USERNAME> to target someone") : (Z("Switched to grid mode"), qs.setSpectating(null), qs.order());
                            break;
                        case "/gift":
                            if (a[1]) {
                                if (z.anon()) return void Z("Anonymous users cannot gift TETR.IO Supporter");
                                if ("0" !== a[1] && !parseInt(a[1])) {
                                    Ke("SUPPORT TETR.IO", a[1]);
                                    break
                                }
                                let e = [],
                                    t = 0;
                                for (const s of l.players) {
                                    if (["anon", "bot", "mod", "admin"].includes(s.role)) continue;
                                    if (s.username === z.username()) continue;
                                    const a = Da(s._id);
                                    if (a && "block" === a.type) continue;
                                    let n = Math.min(30, Math.max(3, (u.get(s.username) || 0) / 2));
                                    (s.supporter || "spectator" === s.bracket) && (n = 1);
                                    for (let t = 0; t < n; t++) e.push(s.username);
                                    n && t++
                                }
                                const s = Math.min(t, Math.min(250, parseInt(a[1])));
                                if (s <= 0) {
                                    Z("Nobody in this room to gift TETR.IO Supporter to");
                                    break
                                }
                                let n = "";
                                for (let t = 0; t < s; t++) {
                                    const t = e[Math.floor(Math.random() * e.length)];
                                    n += ("" === n ? "" : ", ") + t, e = e.filter(e => e !== t)
                                }
                                Z(`Rolled ${s} player${1 === s ? "" : "s"}`), Ke("SUPPORT TETR.IO", n)
                            } else Z("Usage: /GIFT <AMOUNT OF PLAYERS TO GIFT TO, or a USERNAME>"), Z("Example: /GIFT 5 will gift TETR.IO Supporter to 5 random registered players in this room (preferring active players who are not Supporters yet)"), Z("     Or: /GIFT KAGARI will start gifting to KAGARI");
                            break;
                        case "/help":
                            Z("Available commands: /PLAY, /SPECTATE, /HOST, /TAKEHOST, /KICK, /CLEAR, /CLEARALL, /START, /FOCUS, /GIFT");
                            break;
                        case "/kagari":
                            Z(":kagari:");
                            break;
                        default:
                            Z(`Unknown command ${a[0].toLowerCase()}`)
                    }
                } else Ws.emit("chat", s)
            }

            function $() {
                Ws.emit("startroom")
            }

            function O(e) {
                Ws.emit("kick", e)
            }

            function P() {
                Ws.emit("clearchat")
            }

            function N(e) {
                Ws.emit("switchbracket", e)
            }

            function F(e, t) {
                Ws.emit("switchbrackethost", {
                    uid: e,
                    bracket: t
                })
            }

            function U(e) {
                Ws.emit("transferownership", e)
            }

            function B() {
                Ws.emit("takeownership")
            }

            function X() {
                e("roomid").innerHTML = "", e("playercount").innerHTML = "0", e("room_players").innerHTML = "", e("room_chat").innerHTML = "", e("ingame_chat").innerHTML = "", e("league_chat").innerHTML = ""
            }

            function G(e) {
                document.body.classList.contains("inpair") || (j(e), K(e), Y(e))
            }

            function j(t) {
                switch (e("roomview").classList.toggle("sysroom", "system" === t.type), e("roomview").classList.toggle("hosting", t.owner == z.id()), e("roomview").setAttribute("data-state", t.game.state), e("room_content_name").textContent = t.meta.name, e("room_content_name").setAttribute("title", t.meta.name), e("roomid").innerHTML = `#${t.id}`, e("roommodeblurb").innerHTML = `${t.meta.match.type.toUpperCase()} ${1 == t.meta.match.ft && 1 == t.meta.match.wb ? "KNOCKOUT" : `FT${t.meta.match.ft}${1 != t.meta.match.wb ? `+${t.meta.match.wb}` : ""}`}`, t.auto.status) {
                    case "active":
                        e("room_syscontent_status").innerHTML = "STARTING IN", e("room_syscontent_num").innerHTML = t.auto.time;
                        break;
                    case "needsplayers":
                        e("room_syscontent_status").innerHTML = "WAITING for PLAYERS", e("room_syscontent_num").innerHTML = "";
                        break;
                    case "ingame":
                        e("room_syscontent_status").innerHTML = "GOOD LUCK!", e("room_syscontent_num").innerHTML = ""
                }
            }
            Ws.on("entermatchmaking", () => {
                document.body.classList.add("matchmaking"), e("mm_status").classList.remove("room"), e("mm_status").classList.remove("shown"), t("#enter_matchmaking h1").innerHTML = "FINDING MATCH", e("mm_status_header").innerHTML = "FINDING MATCH", t("#enter_matchmaking p").innerHTML = "0:00 - CLICK TO CANCEL", e("mm_status_sub").innerHTML = "TETRA LEAGUE - 0:00", dt(), vs.play("mmstart"), b = 0, y && clearInterval(y), y = setInterval(() => {
                    b++, t("#enter_matchmaking p").innerHTML = `${Math.floor(b / 60)}:${(b % 60).toString().padStart(2, "0")} - CLICK TO CANCEL`, e("mm_status_sub").innerHTML = `TETRA LEAGUE - ${Math.floor(b / 60)}:${(b % 60).toString().padStart(2, "0")}`
                }, 1e3), Va("busy", "tl_mm", "")
            }), Ws.on("leavematchmaking", () => {
                document.body.classList.remove("matchmaking"), t("#enter_matchmaking h1").innerHTML = "ENTER MATCHMAKING", t("#enter_matchmaking p").innerHTML = "LEAVING EARLY IS PUNISHED", dt(), y && clearInterval(y), Va("online", "menus")
            }), Ws.on("paired", s => {
                document.body.classList.remove("matchmaking"), document.body.classList.add("inpair"), e("roomview").classList.remove("hosting"), t("#enter_matchmaking h1").innerHTML = "MATCH FOUND", e("mm_status_header").innerHTML = "MATCH FOUND", t("#enter_matchmaking p").innerHTML = "JOINING MATCH", e("mm_status_sub").innerHTML = "JOINING MATCH", e("room_chat").innerHTML = "", e("ingame_chat").innerHTML = "", e("league_chat").innerHTML = "", vs.play("mmstart"), vs.play("hyperalert"), W = "player", Ft.stopNow(), Va("busy", "tl_mm_complete", ""), setTimeout(() => {
                    st(!1), at(), vs.play("matchintro"), ks.stop(2e3), v(s.you.username, s.opponent.username, Math.round(s.you.rating), Math.round(s.opponent.rating), s.you.rank, s.opponent.rank, s.you.placement, s.opponent.placement, s.ft)
                }, 1e3), setTimeout(() => {
                    Ft.stopNow(), st(!1), at()
                }, 1550), setTimeout(() => {
                    Ft.stopNow(), st(!1), at()
                }, 2500), setTimeout(() => {
                    Ft.stopNow(), st(!1), at()
                }, 3100), Pt(s.opponent.username.toUpperCase(), "Your TETRA LEAGUE opponent is here!"), setTimeout(() => {
                    st(!1), t("#enter_matchmaking h1").innerHTML = "ENTER MATCHMAKING", t("#enter_matchmaking p").innerHTML = "LEAVING EARLY IS PUNISHED", Ft.stopNow()
                }, 4443), setTimeout(() => {
                    st(!1), Ft.stopNow()
                }, 6666), setTimeout(() => {
                    st(!1), Ft.stopNow()
                }, 8500), setTimeout(() => {
                    st(!1), Ft.stopNow()
                }, 9999), setTimeout(() => {
                    st(!1)
                }, 12e3), y && clearInterval(y)
            }), Ws.on("paircancel", e => {
                document.body.classList.remove("inpair"), ut(), Va("online", "menus"), D({
                    title: "GAME CANCELLED",
                    classes: ["noclickout"],
                    msg: "this game was cancelled because a player has left. your rating will not be adjusted.",
                    buttons: [{
                        label: "OK",
                        classes: [],
                        callback: e => {
                            e(), gt(), st(!0), et("league"), ks.playSmooth("touhoudaiensei")
                        }
                    }]
                })
            }), window.DEVHOOK_PAIRED = (e, t, s, a, n, o, i, r, l) => {
                v(e, t, s, a, n, o, i, r, l)
            };
            let W = "player",
                q = !1;

            function K(t, s = !1) {
                const a = [];
                let n = 0,
                    o = !1,
                    i = !1;
                t.players.forEach(i => {
                    a.push(`sp_${i._id}`);
                    let r = e(`sp_${i._id}`),
                        c = r ? r.children[0] : null,
                        d = !1;
                    if (r) s || i.anon || i.bot || As(Ss(i.xp), c.querySelector(".leveltag"));
                    else {
                        d = !0, (r = document.createElement("div")).classList.add("scroller_player_container"), r.id = `sp_${i._id}`, (c = document.createElement("div")).classList.add("scroller_player"), c.classList.add("ns"), c.setAttribute("data-id", i._id), c.setAttribute("data-username", i.username), c.setAttribute("data-hover", "tap"), c.setAttribute("data-hit", "click"), c.setAttribute("data-supporter", i.supporter ? "yes" : "no"), r.appendChild(c), e("room_players").appendChild(r), 2 === e("room_players").children.length && l.owner === z.id() && Pt(i.username.toUpperCase(), `joined your room "${t.meta.name}"`), o || (vs.play("userjoin", q ? .2 : .8), o = !0);
                        const s = document.createElement("h1");
                        s.innerHTML = `${i.username.toUpperCase()}${i.supporter ? '<img src="/res/supporter-tag.png" title="This person is supporting TETR.IO ♥" />' : ""}${"mod" === i.role ? '<img src="/res/verified-mod.png" title="TETR.IO Moderator" />' : ""}${"admin" === i.role ? '<img src="/res/verified-admin.png" title="TETR.IO Admin" />' : ""}${i.verified && !["mod", "admin"].includes(i.role) ? '<img src="/res/verified.png" title="Verified" />' : ""}`, c.appendChild(s);
                        const a = document.createElement("div");
                        a.classList.add("scroller_player_badgelist"), a.innerHTML = i.country ? `<img class="flag" src="/res/flags/${i.country.toLowerCase()}.png" title="${ro[i.country]}" />` : "", a.innerHTML += i.anon || i.bot ? "" : Cs(Ss(i.xp)), c.appendChild(a), i._id === z.id() && Os !== i.xp && (As(Ss(i.xp), e("me_level")), Ps(i.xp - Os, !0))
                    }
                    if ("player" === i.bracket && n++, !s || d) {
                        if (i.supporter && "no" === c.getAttribute("data-supporter") && (c.querySelector("h1").innerHTML = `${i.username.toUpperCase()}${i.supporter ? '<img src="/res/supporter-tag.png" title="This person is supporting TETR.IO ♥" />' : ""}${"mod" === i.role ? '<img src="/res/verified-mod.png" title="TETR.IO Moderator" />' : ""}${"admin" === i.role ? '<img src="/res/verified-admin.png" title="TETR.IO Admin" />' : ""}${i.verified && !["mod", "admin"].includes(i.role) ? '<img src="/res/verified.png" title="Verified" />' : ""}`), t.owner === i._id) {
                            if (!c.querySelector(".scroller_player_badgelist .host")) {
                                const e = document.createElement("div");
                                e.classList.add("host"), e.innerHTML = "HOST", c.querySelector(".scroller_player_badgelist").appendChild(e)
                            }
                        } else c.querySelector(".scroller_player_badgelist .host") && c.querySelector(".scroller_player_badgelist .host").remove();
                        if (i.anon) {
                            if (!c.querySelector(".scroller_player_badgelist .panon")) {
                                const e = document.createElement("div");
                                e.classList.add("panon"), e.innerHTML = "ANON", c.querySelector(".scroller_player_badgelist").appendChild(e)
                            }
                        } else c.querySelector(".scroller_player_badgelist .panon") && c.querySelector(".scroller_player_badgelist .panon").remove();
                        if (i.bot) {
                            if (!c.querySelector(".scroller_player_badgelist .pbot")) {
                                const e = document.createElement("div");
                                e.classList.add("pbot"), e.innerHTML = "BOT", c.querySelector(".scroller_player_badgelist").appendChild(e)
                            }
                        } else c.querySelector(".scroller_player_badgelist .pbot") && c.querySelector(".scroller_player_badgelist .pbot").remove();
                        if (c.classList.toggle("spectator", "spectator" === i.bracket), r.style.order = "spectator" === i.bracket ? "" : (-1 * i.record.wins).toString(), z.id() === i._id && W !== i.bracket && (e("roomview").classList.toggle("spectating", "spectator" === i.bracket), document.body.classList.toggle("room_spectating", "spectator" === i.bracket), e("room_switchbracket").innerHTML = "spectator" === i.bracket ? 'SPECTATING<div id="swb_addendum">click to switch to PLAYERS</div>' : 'PLAYING<div id="swb_addendum">click to switch to SPECTATORS</div>', W = i.bracket), c.classList.toggle("streak", i.record.streak > 0), !c.querySelector(".scroller_player_badgelist .precord")) {
                            const e = document.createElement("div");
                            e.classList.add("precord"), e.title = "Games won / Games played", c.querySelector(".scroller_player_badgelist").appendChild(e);
                            const t = document.createElement("div");
                            t.classList.add("pstreak"), t.title = "Win streak", c.querySelector(".scroller_player_badgelist").appendChild(t)
                        }
                        c.querySelector(".scroller_player_badgelist .precord").innerHTML = `${i.record.wins} / ${i.record.games}`, c.querySelector(".scroller_player_badgelist .pstreak").innerHTML = `${i.record.streak}`
                    }
                });
                const r = e("room_players").children;
                for (let e = 0; e < r.length; e++) r[e].children[0].classList.contains("leaving") || a.includes(r[e].id) || (V(r[e]), i || q || (vs.play("userleave"), i = !0));
                e("sr_playercount").innerHTML = `${n} PLAYER${1 === n ? "" : "S"}`, e("playercount").innerHTML = n, e("playerlimit").innerHTML = t.meta.userlimit ? `/${t.meta.userlimit}` : "", e("spectatorcount").innerHTML = t.players.length - n ? `+${t.players.length - n}` : "", e("startroom").classList.toggle("disabled", n < 2), n >= 100 && !q ? (q = !0, J({
                    content: "Super Lobby Mode Engaged - congratulations on hitting 100 players! Joins and leaves will be suppressed, and the winner of games in this room will earn a special profile badge!",
                    user: {
                        username: "[CMD]",
                        _id: null
                    },
                    system: !1,
                    announcement: !1,
                    banner: !0,
                    banner_color: "#6F2787",
                    banner_img: "/res/icon/superlobby.svg"
                })) : n < 100 && q && (q = !1, J({
                    content: "Super Lobby Mode Disengaged",
                    user: {
                        username: "[CMD]",
                        _id: null
                    },
                    system: !1,
                    announcement: !1,
                    banner: !0
                }))
            }

            function Y(e) {
                s("#room_content_container .room_config_item[data-index]").forEach(t => {
                    if (t.closest(".room_config_row").classList.contains("unsaved")) return;
                    const s = t.getAttribute("data-index"),
                        a = getSetDescendantProp(e, s);
                    switch (t.getAttribute("type")) {
                        case "number":
                            t.value = a;
                            break;
                        case "checkbox":
                            t.checked = !!a;
                            break;
                        case "text":
                        default:
                            t.value = a
                    }
                    if (t.classList.contains("room_config_spinner") && (t.textContent = a), t.classList.contains("music_picker"))
                        if (t.setAttribute("data-song", a), ks.ost[a]) t.textContent = `${ks.ost[a].artist.toLowerCase()} - ${ks.ost[a].name.toLowerCase()}`;
                        else switch (a) {
                            case "RANDOM":
                                t.textContent = "RANDOM";
                                break;
                            case "RANDOMcalm":
                                t.textContent = "RANDOM: CALM";
                                break;
                            case "RANDOMbattle":
                                t.textContent = "RANDOM: BATTLE";
                                break;
                            default:
                                t.textContent = a
                        }
                })
            }

            function V(t) {
                t.children[0].classList.add("leaving"), setTimeout(() => {
                    e("room_players").removeChild(t)
                }, 500)
            }

            function Z(e) {
                J({
                    content: e,
                    user: {
                        username: "[CMD]",
                        _id: null
                    },
                    system: !0,
                    announcement: !1
                })
            }

            function J(t, s = !1) {
                const a = Da(t.user._id);
                if (a && "block" === a.type) return;
                if (t.suppressable && q) return;
                !1 !== te.video.chatfilter && t.content_safe && t.user._id != z.id() && (t.content = t.content_safe), p = document.createElement("div"), p.classList.add("chat_message"), t.banner && p.classList.add("chat_banner"), t.banner_img && p.classList.add("chat_banner_img"), t.system && p.classList.add("system"), t.announcement && p.classList.add("announcement"), t.user.supporter && (p.classList.add("supporterchat"), p.classList.add(`supporterchat_t${t.user.supporter_tier}`)), "admin" === t.user.role && p.classList.add("adminchat"), "mod" === t.user.role && p.classList.add("modchat"), t.content.toLowerCase().includes(z.username()) && p.classList.add("pingchat");
                const n = document.createElement("h1");
                n.textContent = t.user.username.toUpperCase(), ["[SYS]", "[CMD]"].includes(t.user.username.toUpperCase()) || (n.classList.add("chat_tag"), n.setAttribute("data-id", t.user._id)), p.appendChild(n);
                const o = document.createElement("p"),
                    i = r(t.content),
                    l = s ? t.content : Gs(r(t.content), t.user, !0),
                    c = s ? t.content : Gs(r(t.content), t.user, !1 === te.video.emotes_anim);
                if (i === c ? o.textContent = t.content : o.innerHTML = c, t.banner_color && (o.style.color = t.banner_fgcolor || "#FFF", o.style.backgroundColor = t.banner_color, o.style.borderColor = t.banner_color), p.appendChild(o), t.banner_img) {
                    const e = document.createElement("img");
                    e.classList.add("banner_img"), e.setAttribute("src", t.banner_img), p.appendChild(e)
                }
                e("room_chat").appendChild(p), e("league_chat").appendChild(p.cloneNode(!0));
                const d = p.cloneNode(!0);
                c !== l && (d.querySelector("p").innerHTML = l), e("ingame_chat").appendChild(d), e("room_chat").children.length > 100 && e("room_chat").removeChild(e("room_chat").children[0]), e("ingame_chat").children.length > 100 && e("ingame_chat").removeChild(e("ingame_chat").children[0]), e("league_chat").children.length > 100 && e("league_chat").removeChild(e("league_chat").children[0]), e("room_chat").scrollTop = e("room_chat").scrollHeight + 100, e("ingame_chat").scrollTop = e("ingame_chat").scrollHeight + 100, e("league_chat").scrollTop = e("league_chat").scrollHeight + 100, t.user._id !== z.id() || !js(r(t.content)) || t.user.supporter || ["admin", "mod", "bot"].includes(t.user.role) || J({
                    content: 'That emote is for supporters only! Consider <a class="chatlink" href="javascript:void();" onclick="SHOW_SUPPORTER_DIALOG();">supporting the sole developer behind TETR.IO</a> to get access to this emote and more. <3',
                    user: {
                        username: "[SYS]",
                        _id: null
                    },
                    system: !0,
                    announcement: !1
                }, !0)
            }

            function Q() {
                document.body.classList.contains("inpair") || (Ze("rsg", "3"), vs.play("rsg"), setTimeout(() => {
                    Ze("rsg", "2"), vs.play("rsg")
                }, 500), setTimeout(() => {
                    Ze("rsg", "1"), vs.play("rsg")
                }, 1e3), setTimeout(() => {
                    Ze("rsg", "GO!"), vs.play("rsg_go")
                }, 1500))
            }

            function ee(t, s, a, n) {
                vs.play("victory"), e("victory_header").innerHTML = n ? "WINNERS!" : "WINNER!", e("victory_victor").innerHTML = t, e("victory_sub").innerHTML = s, e("victory_also").innerHTML = a, e("victory").classList.remove("hidden"), setTimeout(() => {
                    e("victory").classList.add("hidden")
                }, 5e3)
            }

            function se(t, s, a, n, o, i, r, l) {
                const c = document.createElement("div");
                c.classList.add("scroller_block"), c.classList.add("playerresult"), c.classList.add("record_item"), c.setAttribute("data-id", a), c.setAttribute("data-hover", "tap"), c.setAttribute("data-hit", "click"), s && c.classList.add("record_first"), l || c.classList.add("disconnected"), n === z.username() && c.classList.add("record_me"), e("playerresults").appendChild(c);
                const d = document.createElement("div");
                d.classList.add("record_grade"), d.classList.add("ns"), d.innerHTML = t, c.appendChild(d);
                const p = document.createElement("div");
                p.classList.add("record_owner"), p.innerHTML = n.toUpperCase(), c.appendChild(p);
                const u = document.createElement("div");
                u.classList.add("record_ts"), u.innerHTML = r, c.appendChild(u);
                const m = document.createElement("div");
                m.classList.add("record_result"), m.innerHTML = o, c.appendChild(m);
                const g = document.createElement("div");
                g.classList.add("record_extra"), g.innerHTML = i, c.appendChild(g)
            }

            function ae(e, t, s) {
                const a = document.createElement("tr");
                e.appendChild(a);
                const n = document.createElement("td");
                n.innerHTML = t, a.appendChild(n);
                const o = document.createElement("td");
                o.innerHTML = s, a.appendChild(o)
            }

            function ne() {
                ct("fetching room listing…"), k.get("/api/rooms/", {}, !0).then(e => {
                    dt(), oe(e.rooms), Ce.bindGuide(Ae[ze] || {})
                }, e => {
                    dt(), S(e)
                })
            }

            function oe(t) {
                if (holder = e("room_listing_container"), holder.innerHTML = "", t.forEach(e => {
                        const t = document.createElement("div");
                        t.classList.add("scroller_block"), t.classList.add("room_listing_item"), t.classList.add("ns"), t.setAttribute("data-hover", "hover"), t.setAttribute("data-hit", "confirm"), t.setAttribute("title", e.meta.name), holder.appendChild(t);
                        const s = document.createElement("div");
                        s.classList.add("room_listing_name"), s.textContent = e.meta.name, t.appendChild(s);
                        const a = document.createElement("div");
                        a.classList.add("room_listing_count"), a.innerHTML = `${e.playingplayers}${e.meta.userlimit ? `<span class="room_listing_limit">/${e.meta.userlimit}</span>` : ""}${e.playercount - e.playingplayers ? `<span class="room_listing_spectators">+${e.playercount - e.playingplayers}</span>` : ""}`, t.appendChild(a);
                        const n = document.createElement("div");
                        n.classList.add("room_listing_info"), n.innerHTML = `${e.state.toUpperCase()} - <span class="room_listing_id">${e.id}</span>`, t.appendChild(n);
                        const o = document.createElement("div");
                        o.classList.add("room_listing_extra"), o.innerHTML = `anons allowed: <span>${e.meta.allowAnonymous ? "YES" : "NO"}</span>`, t.appendChild(o), t.addEventListener("click", () => {
                            L(e.id)
                        })
                    }), !t.length) {
                    const e = document.createElement("div");
                    e.classList.add("scroller_block"), e.classList.add("nothing"), e.classList.add("ns"), e.innerHTML = "NO ROOMS", holder.appendChild(e)
                }
            }
            let ie = !1;

            function re(t) {
                t !== ie && (t ? (e("referee").classList.remove("hidden"), e("referee").classList.remove("hiding")) : (e("referee").classList.add("hiding"), setTimeout(() => {
                    e("referee").classList.add("hidden")
                }, 500)), ie = t)
            }

            function le(t, s) {
                e("referee").classList.toggle("ft1", 1 === t.ft && 1 === t.wb), e("exit_spectate").classList.toggle("blocked", !f && (1 !== t.ft || 1 !== t.wb)), e("zen_spectate").classList.toggle("blocked", !f && (1 !== t.ft || 1 !== t.wb)), e("referee").classList.toggle("duel", 2 === s.length || s.length > 8), e("referee_top").textContent = `${Qs || t.gamemode} FT${t.ft}${1 !== t.wb ? `+${t.wb}` : ""}`;
                let a = -1;
                const n = [];
                2 === s.length && s.sort((e, t) => e.naturalorder - t.naturalorder), s.forEach(e => {
                    if (e.user._id == z.id()) {
                        const t = ++a >= 8 ? i : o[a];
                        n.push(`<div class="referee_point" style="--r: ${t[0]}; --g: ${t[1]}; --b: ${t[2]};"><h1>${e.wins}</h1><p>${e.user.username.toUpperCase()}</p></div>`)
                    }
                });
                let r = !0,
                    l = !0,
                    c = 0,
                    d = 0;
                s.forEach(e => {
                    if (e.user._id == z.id()) return;
                    if (!l) return;
                    if (s.length >= 8) {
                        if (e.wins < d) return void(l = !1);
                        if (c++, d = e.wins, !r) return;
                        r = !1
                    }
                    const t = ++a >= 8 ? i : o[a];
                    n.push(`<div class="referee_point" style="--r: ${t[0]}; --g: ${t[1]}; --b: ${t[2]};"><h1>${e.wins}</h1><p>${e.user.username.toUpperCase()}</p></div>`)
                });
                let p = n.join('<div class="referee_sep">-</div>');
                c > 1 && (p += `<div class="referee_sep">+${c - 1}</div>`), e("referee_points").innerHTML = p
            }

            function ce(s, a, n) {
                const o = 2 === a.length;
                if (o && a.sort((e, t) => e.naturalorder - t.naturalorder), e("scoreslide_header").textContent = `${Qs || s.gamemode} FT${s.ft}${1 !== s.wb ? `+${s.wb}` : ""}`, e("scoreslide").classList.toggle("duel", o), e("scoreslide").classList.remove("pinged"), e("scoreslide").classList.remove("pingedp1"), e("scoreslide").classList.remove("pingedp2"), o) {
                    let o = 1,
                        i = 0;
                    a[1].user.username === z.username() ? (t("#scoreslide_duel_p1 p").innerHTML = a[1].user.username.toUpperCase(), t("#scoreslide_duel_p2 p").innerHTML = a[0].user.username.toUpperCase(), a[1].user.username === n ? (o = 1, i = a[1].wins, t("#scoreslide_duel_p1 h1").innerHTML = a[1].wins - 1, t("#scoreslide_duel_p2 h1").innerHTML = a[0].wins) : (o = 2, i = a[0].wins, t("#scoreslide_duel_p1 h1").innerHTML = a[1].wins, t("#scoreslide_duel_p2 h1").innerHTML = a[0].wins - 1)) : (t("#scoreslide_duel_p1 p").innerHTML = a[0].user.username.toUpperCase(), t("#scoreslide_duel_p2 p").innerHTML = a[1].user.username.toUpperCase(), a[0].user.username === n ? (o = 1, i = a[0].wins, t("#scoreslide_duel_p1 h1").innerHTML = a[0].wins - 1, t("#scoreslide_duel_p2 h1").innerHTML = a[1].wins) : (o = 2, i = a[1].wins, t("#scoreslide_duel_p1 h1").innerHTML = a[0].wins, t("#scoreslide_duel_p2 h1").innerHTML = a[1].wins - 1)), document.body.classList.contains("inpair") && (setTimeout(() => {
                        e("scoreslide").classList.add("leaguess"), document.body.classList.add("shaking"), vs.play("impact")
                    }, 250), setTimeout(() => {
                        document.body.classList.remove("shaking")
                    }, 300), setTimeout(() => {
                        e("scoreslide").classList.remove("leaguess")
                    }, 5e3)), setTimeout(() => {
                        a[0].wins === a[1].wins && a[0].wins >= s.ft - 1 ? 2 === s.wb ? (e("scoreslide_duel_match").innerHTML = "DEUCE", e("scoreslide_duel_match").classList.add("ssdm_p4"), setTimeout(() => {
                            document.body.classList.add("shaking"), vs.play("allclear")
                        }, 350), setTimeout(() => {
                            document.body.classList.remove("shaking")
                        }, 400)) : 1 === s.wb && (e("scoreslide_duel_match").innerHTML = "TIEBREAKER", e("scoreslide_duel_match").classList.add("ssdm_p3"), setTimeout(() => {
                            document.body.classList.add("shaking"), vs.play("allclear")
                        }, 350), setTimeout(() => {
                            document.body.classList.remove("shaking")
                        }, 400)) : a[0].wins >= s.ft - 1 && a[0].wins - a[1].wins >= s.wb - 1 && a[0].user.username === z.username() || a[1].wins >= s.ft - 1 && a[1].wins - a[0].wins >= s.wb - 1 && a[1].user.username === z.username() || a[0].wins >= s.ft - 1 && a[0].wins - a[1].wins >= s.wb - 1 && a[0].user.username !== z.username() && a[1].user.username !== z.username() ? (e("scoreslide_duel_match").innerHTML = "MATCH POINT", e("scoreslide_duel_match").classList.add("ssdm_p1")) : (a[0].wins >= s.ft - 1 && a[0].wins - a[1].wins >= s.wb - 1 && a[0].user.username !== z.username() || a[1].wins >= s.ft - 1 && a[1].wins - a[0].wins >= s.wb - 1 && a[1].user.username !== z.username() || a[1].wins >= s.ft - 1 && a[1].wins - a[0].wins >= s.wb - 1 && a[0].user.username !== z.username() && a[1].user.username !== z.username()) && (e("scoreslide_duel_match").innerHTML = "MATCH POINT", e("scoreslide_duel_match").classList.add("ssdm_p2"))
                    }, 1500), setTimeout(() => {
                        e("scoreslide_duel_match").classList.remove("ssdm_p1"), e("scoreslide_duel_match").classList.remove("ssdm_p2"), e("scoreslide_duel_match").classList.remove("ssdm_p3"), e("scoreslide_duel_match").classList.remove("ssdm_p4")
                    }, 5e3), setTimeout(() => {
                        vs.play("showscore"), e("scoreslide").classList.add(`pingedp${o}`), t(`#scoreslide_duel_p${o} h1`).innerHTML = i, sn.play("scoreslide_ultra", {
                            right: 1 !== o
                        })
                    }, 1500)
                } else {
                    let t = 0,
                        s = "";
                    a.forEach(a => {
                        a.user.username === n && (t = a.wins, e("scoreslide_leader_name").innerHTML = a.user.username.toUpperCase(), e("scoreslide_leader_points").innerHTML = a.wins - 1), s += `<div class="scoreslide_player"><p>${a.user.username.toUpperCase()}</p><h1>${a.wins}</h1></div>`
                    }), e("scoreslide_list").innerHTML = s, setTimeout(() => {
                        vs.play("showscore"), e("scoreslide").classList.add("pinged"), e("scoreslide_leader_points").innerHTML = t
                    }, 1500)
                }
                e("scoreslide").classList.remove("hidden"), vs.play("scoreslide_in"), setTimeout(() => {
                    e("scoreslide").classList.remove("hiding")
                }, 20), setTimeout(() => {
                    e("scoreslide").classList.add("hiding"), vs.play("scoreslide_out")
                }, 4e3), setTimeout(() => {
                    e("scoreslide").classList.add("hidden")
                }, 5e3)
            }

            function de() {
                ct("entering matchmaking…"), Ws.emit("entermatchmaking")
            }

            function pe() {
                ct("leaving matchmaking…"), Ws.emit("leavematchmaking")
            }

            function ue() {
                ct("getting ready to spectate…"), Ws.emit("midgamespectate")
            }

            function me(t, s) {
                const a = Ne;
                let n = 0,
                    o = setInterval(() => {
                        let i = Math.round(ln(a, t, n, BezierEasing(.74, .03, .09, .97)) - a);
                        e("leaguestanding_rating").innerHTML = `${Math.round(ln(a, t, n, BezierEasing(.74, .03, .09, .97)))}<span>TR</span>${-1 !== a ? ` <span class="leaguechange">${0 === i ? "Ǵ" : i >= 150 ? "Ǹ" : i > 0 ? "Ƿ" : i <= -150 ? "Ƕ" : "ǵ"}${Math.abs(i)}</span>` : ""}`, (n += 1 / s) >= 1 && (i = Math.round(t - a), e("leaguestanding_rating").innerHTML = `${t}<span>TR</span>${-1 !== a ? ` <span class="leaguechange">${0 === i ? "Ǵ" : i >= 150 ? "Ǹ" : i > 0 ? "Ƿ" : i <= -150 ? "Ƕ" : "ǵ"}${Math.abs(i)}</span>` : ""}`, clearInterval(o), Ne = t)
                    }, 16)
            }

            function ge() {
                e("leaguestanding_rating").innerHTML = `${Ne}<span>TR</span> <span class="leaguechange">Ǵ0</span>`
            }

            function he(t, s) {
                const a = Ue;
                let n = 0,
                    o = setInterval(() => {
                        let i = Math.round(a - ln(a, t, n, BezierEasing(.74, .03, .09, .97)));
                        e("leaguestanding_placement").innerHTML = `#<span>${Math.round(ln(a, t, n, BezierEasing(.74, .03, .09, .97)))}</span>`, e("leaguestanding_placement").classList.toggle("t100", Math.round(ln(a, t, n, BezierEasing(.74, .03, .09, .97))) <= 100 && Math.round(ln(a, t, n, BezierEasing(.74, .03, .09, .97))) > 10), e("leaguestanding_placement").classList.toggle("t10", Math.round(ln(a, t, n, BezierEasing(.74, .03, .09, .97))) <= 10 && Math.round(ln(a, t, n, BezierEasing(.74, .03, .09, .97))) > 1), e("leaguestanding_placement").classList.toggle("t1", 1 === Math.round(ln(a, t, n, BezierEasing(.74, .03, .09, .97)))), e("leaguestanding_placement_change").innerHTML = -1 !== a ? `${0 === i ? "Ǵ" : i >= 10 ? "Ǹ" : i > 0 ? "Ƿ" : i <= -10 ? "Ƕ" : "ǵ"}${Math.abs(i)}</span>` : "", (n += 1 / s) >= 1 && (i = Math.round(a - t), e("leaguestanding_placement").innerHTML = `#<span>${t}</span>`, e("leaguestanding_placement").classList.toggle("t100", t <= 100 && t > 10), e("leaguestanding_placement").classList.toggle("t10", t <= 10 && t > 1), e("leaguestanding_placement").classList.toggle("t1", 1 === t), e("leaguestanding_placement_change").innerHTML = -1 !== a ? `${0 === i ? "Ǵ" : i >= 10 ? "Ǹ" : i > 0 ? "Ƿ" : i <= -10 ? "Ƕ" : "ǵ"}${Math.abs(i)}</span>` : "", clearInterval(o), Ue = t)
                    }, 16)
            }

            function _e() {
                e("leaguestanding_placement_change").innerHTML = "Ǵ0"
            }
            const be = ["z", "d", "d+", "c-", "c", "c+", "b-", "b", "b+", "a-", "a", "a+", "s-", "s", "s+", "ss", "u", "x"];

            function ye(t) {
                const s = Fe;
                if (s === t) return void(e("leaguestanding_rank").src = `/res/league-ranks/${t}.png`);
                const a = be.indexOf(s);
                be.indexOf(t) > a ? (e("leaguestanding_rank").classList.add("rankraise"), setTimeout(() => {
                    vs.play("rankraise")
                }, 400), setTimeout(() => {
                    document.body.classList.add("shaking")
                }, 1800), setTimeout(() => {
                    document.body.classList.remove("shaking")
                }, 1900)) : (setTimeout(() => {
                    vs.play("ranklower")
                }, 400), e("leaguestanding_rank").classList.add("ranklower")), setTimeout(() => {
                    e("leaguestanding_rank").src = `/res/league-ranks/${t}.png`
                }, 1050), setTimeout(() => {
                    e("leaguestanding_rank").classList.remove("rankraise"), e("leaguestanding_rank").classList.remove("ranklower")
                }, 4500), Fe = t
            }

            function ve(t) {
                Fe !== t || (e("leaguestanding_rank").src = `/res/league-ranks/${t}.png`)
            }

            function ke(e) {
                let t = [];
                for (let s = 0; s < e.events.length; s++) "full" === e.events[s].type && 0 !== e.events[s].frame || t.push(e.events[s]);
                return e.events = t, e
            }
            return {
                createRoom: w,
                joinRoom: L,
                leaveRoom: E,
                sendChatMessage: R,
                startRoom: $,
                switchBracket: N,
                switchBracketHost: F,
                saveRoomConfig: M,
                setRoomID: A,
                loadListing: ne,
                kickUser: O,
                transferOwnership: U,
                takeOwnership: B,
                enterMatchmaking: de,
                leaveMatchmaking: pe,
                startMidgameSpectate: ue,
                dropMultiplex: () => {
                    e("spectate").classList.add("hidden"), document.body.classList.remove("multiplexed"), document.body.classList.remove("inmulti"), document.body.classList.remove("spectating"), document.body.classList.remove("room_spectating"), document.body.classList.remove("room_midgame_spectating"), document.body.classList.remove("inpair"), ks.stop(), re(!1), Us.enabled(!1), Us.stopTimer(), e("leaveroom").classList.remove("hidden"), st(!0), Ks = !1
                },
                showAnnouncement: e => {
                    J({
                        content: e,
                        user: {
                            username: "[SYS]",
                            _id: null
                        },
                        system: !1,
                        announcement: !0
                    })
                },
                returnToRoom: () => {
                    Va("online", c = "lobby", "private" === l.type ? "X-PRIV" : l.id)
                },
                isInRoom: () => d
            }
        })(),
        ta = {
            test: e => ({
                pri: "#34F479",
                sec: "#000",
                img_main: "https://tetr.io/user-content/avatars/5e331c3ce24a5a3e258f7a1b.jpg?rv=1601325213424",
                img_sub: null,
                header: "Test notification",
                content: e.data.message,
                action: null
            }),
            announcement: e => ({
                pri: e.data.pri || "#87E038",
                sec: e.data.sec || "#000",
                img_main: e.data.img_main || "/res/icon/announcement.svg",
                img_sub: e.data.img_sub || null,
                header: e.data.header,
                content: e.data.content,
                action: e.data.action || null
            }),
            supporter_new: e => ({
                pri: "#FF4A19",
                sec: "#000",
                img_main: "/res/supporter-icon.png",
                img_sub: null,
                header: "You are now a TETR.IO Supporter!",
                content: "Thank you very, <b>very</b> much for supporting TETR.IO. Without support from people like you, TETR.IO could never be what it is now! You're awesome ♥",
                action: null
            }),
            supporter_gift: e => ({
                pri: "#FF4A19",
                sec: "#FF4A19",
                img_main: e.data.avatar_revision ? `/user-content/avatars/${e.data.userid}.jpg?rv=${e.data.avatar_revision}` : u(e.data.userid),
                img_sub: "/res/supporter-icon-alpha.png",
                header: `<span>${e.data.username.toUpperCase()}</span>`,
                content: `has gifted you <b>${e.data.months} month${1 === e.data.months ? "" : "s"}</b> of <b>TETR.IO Supporter</b>!`,
                action: `user:${e.data.userid}`
            }),
            supporter_specialthanks: e => ({
                pri: "#E43868",
                sec: "#000",
                img_main: "/res/heart-icon.png",
                img_sub: null,
                header: "YOU ARE AWESOME!",
                content: "Thank you very, <b>very</b> much for your insane amount of support. You are now <b>listed in the Special Thanks of the game itself</b>, as thanks for your support!",
                action: null
            }),
            supporter_expiring: e => ({
                pri: "#A4523C",
                sec: "#000",
                img_main: "/res/supporter-icon-expiring.png",
                img_sub: null,
                header: "Your TETR.IO Supporter status is expiring soon!",
                content: `Thank you very much for your support. Your Supporter status will expire on <b>${new Date(e.data.expires).toLocaleString()}</b>. To continue supporting TETR.IO, please click here to add months.`,
                action: "support"
            }),
            supporter_expired: e => ({
                pri: "#888888",
                sec: "#000",
                img_main: "/res/supporter-icon-expired.png",
                img_sub: null,
                header: "Your TETR.IO Supporter status has expired",
                content: "Your Supporter status may have expired, but you'll forever be in my heart. If you wish to support TETR.IO again, you may click here to rejoin.",
                action: "support"
            }),
            friend: e => {
                const t = e.data.relationship.from;
                return {
                    pri: e.data.ismutual ? "#E05DC3" : "#E43868",
                    sec: e.data.ismutual ? "#E05DC3" : "#E43868",
                    img_main: t.avatar_revision ? `/user-content/avatars/${t._id}.jpg?rv=${t.avatar_revision}` : u(t._id),
                    img_sub: "/res/icon/friends.svg",
                    header: `<span>${t.username.toUpperCase()}</span>`,
                    content: e.data.ismutual ? "has <b>friended you back</b>" : "has added you to their <b>friends list</b>",
                    action: `user:${t._id}`
                }
            }
        },
        sa = {
            test: e => {
                x({
                    header: "Test notification",
                    msg: e.data.message,
                    color: "#34F479",
                    icon: "https://tetr.io/user-content/avatars/5e331c3ce24a5a3e258f7a1b.jpg?rv=1601325213424",
                    classes: ["snotify"],
                    timeout: 1e4,
                    suppressable: !0
                }), "both" !== te.notifications.other || en() || Pt("Test notification", e.data.message, !1, "/res/tetriox256.png"), en() || vs.play("social_notify_major")
            },
            announcement: e => {
                if (e.data.isinvite) {
                    if (Qa()) return;
                    x({
                        header: e.data.header,
                        msg: `${e.data.content}<div class="notification_timeoutbar" style="--time: 24s;"></div>`,
                        color: e.data.pri || "#87E038",
                        subcolor: e.data.sec || "#000",
                        icon: e.data.img_main || "/res/icon/announcement.svg",
                        subicon: e.data.img_sub || null,
                        classes: ["snotify", "modalnotify"],
                        timeout: 25e3,
                        onclick: e => {},
                        buttons: [{
                            label: "IGNORE",
                            icon: "/res/icon/denied.svg",
                            classes: [],
                            onclick: e => {
                                e()
                            }
                        }, {
                            label: e.data.cta || "ACCEPT",
                            icon: "/res/icon/accepted.svg",
                            classes: ["pri"],
                            onclick: t => {
                                e.data.action && Pa(e.data.action), t()
                            }
                        }]
                    })
                } else x({
                    header: e.data.header,
                    msg: e.data.content,
                    color: e.data.pri || "#87E038",
                    subcolor: e.data.sec || "#000",
                    icon: e.data.img_main || "/res/icon/announcement.svg",
                    subicon: e.data.img_sub || null,
                    classes: ["snotify"],
                    timeout: 15e3,
                    onclick: t => {
                        e.data.action && Pa(e.data.action), t()
                    }
                });
                "both" === te.notifications.other && Pt(e.data.header, e.data.content, !1, e.data.img_main || "/res/tetriox256.png"), vs.play("social_notify_major")
            },
            supporter_new: e => {
                x({
                    header: "You are now a TETR.IO Supporter!",
                    msg: "Thank you very, <b>very</b> much for supporting TETR.IO. Without support from people like you, TETR.IO could never be what it is now! You're awesome ♥",
                    color: "#FF4A19",
                    icon: "/res/supporter-icon.png",
                    classes: ["snotify"],
                    timeout: 3e4
                }), document.body.classList.add("supporter"), document.body.classList.add("ceriad_exempt"), localStorage.setItem("wasLastSupporter", "Yes, that's it!"), document.cookie = "ceriad_exempt=1;max-age=31536000;domain=tetr.io", "both" === te.notifications.other && Pt("You are now a TETR.IO Supporter!", "Thank you very, very much for supporting TETR.IO. Without support from people like you, TETR.IO could never be what it is now! You're awesome ♥", !1, "/res/supporter-icon.png")
            },
            supporter_gift: e => {
                x({
                    header: `<span>${e.data.username.toUpperCase()}</span>`,
                    msg: `has gifted you <b>${e.data.months} month${1 === e.data.months ? "" : "s"}</b> of <b>TETR.IO Supporter</b>!`,
                    color: "#FF4A19",
                    subcolor: "#FF4A19",
                    icon: e.data.avatar_revision ? `/user-content/avatars/${e.data.userid}.jpg?rv=${e.data.avatar_revision}` : u(e.data.userid),
                    subicon: "/res/supporter-icon-alpha.png",
                    classes: ["snotify"],
                    timeout: 3e4,
                    onclick: t => {
                        Pa(`user:${e.data.userid}`), t()
                    }
                }), vs.play("supporter"), document.body.classList.add("supporter"), document.body.classList.add("ceriad_exempt"), localStorage.setItem("wasLastSupporter", "Yes, that's it!"), document.cookie = "ceriad_exempt=1;max-age=31536000;domain=tetr.io", wt.expires = wt.hasSupporter ? wt.expires + 1e3 * e.data.months * 3600 * 24 * 30.5 : Date.now() + 1e3 * e.data.months * 3600 * 24 * 30.5, wt.hasSupporter = wt.expires > Date.now(), Tt(), "both" === te.notifications.other && Pt(e.data.username.toUpperCase(), `has gifted you ${e.data.months} month${1 === e.data.months ? "" : "s"} of TETR.IO Supporter!`, !1, e.data.avatar_revision ? `/user-content/avatars/${e.data.userid}.jpg?rv=${e.data.avatar_revision}` : "/res/tetriox256.png")
            },
            supporter_specialthanks: e => {
                x({
                    header: "YOU ARE AWESOME!",
                    msg: "Thank you very, <b>very</b> much for your insane amount of support. You are now <b>listed in the Special Thanks of the game itself</b>, as thanks for your support!",
                    color: "#E43868",
                    icon: "/res/heart-icon.png",
                    classes: ["snotify"],
                    timeout: 3e4
                }), "both" === te.notifications.other && Pt("YOU ARE AWESOME!", "Thank you very, very much for your insane amount of support. You are now listed in the Special Thanks of the game itself, as thanks for your support!", !1, "/res/heart-icon.png")
            },
            supporter_expiring: e => {
                x({
                    header: "Your TETR.IO Supporter status is expiring soon!",
                    msg: `Thank you very much for your support. Your Supporter status will expire on <b>${new Date(e.data.expires).toLocaleString()}</b>. To continue supporting TETR.IO, please click here to add months.`,
                    color: "#A4523C",
                    icon: "/res/supporter-icon-expiring.png",
                    classes: ["snotify"],
                    timeout: 3e4,
                    onclick: e => {
                        Pa("support"), e()
                    }
                }), "both" === te.notifications.other && Pt("Your TETR.IO Supporter status is expiring soon!", `Thank you very much for your support. Your Supporter status will expire on ${new Date(e.data.expires).toLocaleString()}. To continue supporting TETR.IO, please click here to add months.`, !1, "/res/supporter-icon-expiring.png")
            },
            supporter_expired: e => {
                x({
                    header: "Your TETR.IO Supporter status has expired",
                    msg: "Your Supporter status may have expired, but you'll forever be in my heart. If you wish to support TETR.IO again, you may click here to rejoin.",
                    color: "#888888",
                    icon: "/res/supporter-icon-expired.png",
                    classes: ["snotify"],
                    timeout: 3e4,
                    onclick: e => {
                        Pa("support"), e()
                    }
                }), "both" === te.notifications.other && Pt("Your TETR.IO Supporter status has expired", "Your Supporter status may have expired, but you'll forever be in my heart. If you wish to support TETR.IO again, you may click here to rejoin.", !1, "/res/supporter-icon-expired.png")
            },
            friend: e => {
                const t = e.data.relationship.from;
                x({
                    header: `<span>${t.username.toUpperCase()}</span>`,
                    msg: e.data.ismutual ? "has <b>friended you back</b>" : "has added you to their <b>friends list</b>",
                    color: e.data.ismutual ? "#E05DC3" : "#E43868",
                    subcolor: e.data.ismutual ? "#E05DC3" : "#E43868",
                    icon: t.avatar_revision ? `/user-content/avatars/${t._id}.jpg?rv=${t.avatar_revision}` : u(t._id),
                    subicon: "/res/icon/friends.svg",
                    classes: ["snotify"],
                    timeout: 1e4,
                    onclick: e => {
                        Pa(`user:${t._id}`), e()
                    },
                    suppressable: !0
                }), "both" !== te.notifications.other || en() || Pt(t.username.toUpperCase(), e.data.ismutual ? "has friended you back" : "has added you to their friends list", !1, t.avatar_revision ? `/user-content/avatars/${t._id}.jpg?rv=${t.avatar_revision}` : "/res/tetriox256.png"), en() || vs.play("social_notify_minor")
            }
        },
        aa = {
            online: (e, t, s) => [e, t, s],
            away: (e, t, s) => ["online", "away"].includes(e) ? ["away", "", ""] : [e, t, s],
            busy: (e, t, s) => ["online", "away", "busy"].includes(e) ? ["busy", "", ""] : [e, t, s],
            offline: (e, t, s) => ["offline", "", ""]
        },
        na = {
            online: (e, t) => {
                switch (e) {
                    case "menus":
                        return {
                            text: "In Menus", html: "In Menus", discord: {
                                state: "In Menus",
                                largeImageKey: "logo",
                                instance: !1
                            }
                        };
                    case "40l":
                        return {
                            text: "Playing 40 LINES", html: "Playing <b>40 LINES</b>", discord: {
                                state: "40 LINES",
                                largeImageKey: "logo",
                                smallImageKey: "mode_40l",
                                smallImageText: "40 LINES",
                                startTimestamp: Date.now(),
                                instance: !0
                            }
                        };
                    case "blitz":
                        return {
                            text: "Playing BLITZ", html: "Playing <b>BLITZ</b>", discord: {
                                state: "BLITZ",
                                largeImageKey: "logo",
                                smallImageKey: "mode_blitz",
                                smallImageText: "BLITZ",
                                startTimestamp: Date.now(),
                                instance: !0
                            }
                        };
                    case "zen":
                        return {
                            text: "Playing ZEN", html: "Playing <b>ZEN</b>", discord: {
                                state: "ZEN",
                                largeImageKey: "logo",
                                smallImageKey: "mode_zen",
                                smallImageText: "ZEN",
                                startTimestamp: Date.now(),
                                instance: !0
                            }
                        };
                    case "custom":
                        return {
                            text: "Playing a custom game", html: "Playing a <b>custom game</b>", discord: {
                                state: "CUSTOM GAME",
                                largeImageKey: "logo",
                                smallImageKey: "mode_custom",
                                smallImageText: "CUSTOM GAME",
                                startTimestamp: Date.now(),
                                instance: !0
                            }
                        };
                    case "lobby_end":
                    case "lobby_spec":
                    case "lobby_ig":
                    case "lobby": {
                        let s = "In",
                            a = "In Lobby";
                        "lobby_spec" === e && (s = "Spectating", a = "Spectating"), "lobby_end" === e && (s = "Ending", a = "Game Ending"), "lobby_ig" === e && (a = "In Game");
                        let n = "a custom room",
                            o = "an <b>online</b>";
                        "" !== t && (n = "a public custom room", o = "a public <b>custom room</b>"), "X-PRIV" === t && (n = "a private custom room", o = "a private <b>custom room</b>"), "X-QP" === t && (n = "a QUICK PLAY", o = "a <b>QUICK PLAY</b>");
                        let i = "game";
                        "lobby" === e && (i = "lobby");
                        const r = {
                            details: "X-QP" === t ? "QUICK PLAY" : "CUSTOM ROOM",
                            state: a,
                            largeImageKey: "logo",
                            smallImageKey: "X-QP" === t ? "mode_quickplay" : "mode_customroom",
                            smallImageText: "X-QP" === t ? "QUICK PLAY" : "CUSTOM ROOM",
                            instance: !1
                        };
                        return ["lobby_spec", "lobby_ig"].includes(e) && (r.startTimestamp = Date.now(), r.instance = !0), {
                            text: `${s} ${n} ${i}`,
                            html: `${s} ${o} ${i}`,
                            discord: r
                        }
                    }
                    default:
                        return {
                            text: "Online", html: "Online", discord: {
                                state: "Online",
                                largeImageKey: "logo",
                                instance: !1
                            }
                        }
                }
            },
            away: (e, t) => ({
                text: "Idle",
                html: "Idle",
                discord: {
                    state: "Idle",
                    largeImageKey: "logo",
                    instance: !1
                }
            }),
            busy: (e, t) => {
                switch (e) {
                    case "tl_mm":
                        return {
                            text: "In TETRA LEAGUE queue", html: "In <b>TETRA LEAGUE</b> queue", discord: {
                                details: "TETRA LEAGUE",
                                state: "In Queue",
                                largeImageKey: "logo",
                                smallImageKey: "mode_league",
                                smallImageText: "TETRA LEAGUE",
                                instance: !1
                            }
                        };
                    case "tl":
                        return {
                            text: "In a TETRA LEAGUE game", html: "In a <b>TETRA LEAGUE</b> game", discord: {
                                details: "TETRA LEAGUE",
                                state: "In Game",
                                largeImageKey: "logo",
                                smallImageKey: "mode_league",
                                smallImageText: "TETRA LEAGUE",
                                startTimestamp: Date.now(),
                                instance: !0
                            }
                        };
                    case "tl_end":
                        return {
                            text: "Ending a TETRA LEAGUE game", html: "Ending a <b>TETRA LEAGUE</b> game", discord: {
                                details: "TETRA LEAGUE",
                                state: "Game Ending",
                                largeImageKey: "logo",
                                smallImageKey: "mode_league",
                                smallImageText: "TETRA LEAGUE",
                                instance: !1
                            }
                        };
                    case "tl_mm_complete":
                        return {
                            text: "Found a TETRA LEAGUE match", html: "Found a <b>TETRA LEAGUE</b> match", discord: {
                                details: "TETRA LEAGUE",
                                state: "Match Found",
                                largeImageKey: "logo",
                                smallImageKey: "mode_league",
                                smallImageText: "TETRA LEAGUE",
                                instance: !1
                            }
                        };
                    default:
                        return {
                            text: "Busy", html: "Busy", discord: {
                                state: "Busy",
                                largeImageKey: "logo",
                                instance: !1
                            }
                        }
                }
            },
            offline: (e, t) => ({
                text: "Offline",
                html: "Offline",
                discord: {
                    state: "Offline",
                    largeImageKey: "logo",
                    instance: !1
                }
            })
        },
        oa = ["5e32fe50d3e20d2bd2bf234f", "5e3324299380f13edda2b1b1", "5e3361351da5014141c84788", "5e342a67f3cfa44539619a85", "5e41118d4be6907ad7eab8b2", "5e504fe2278d291d983fd847", "5ea60df3fb6fa447f20c3ef8", "5eeaa5535b5c156c224f5265", "5e49a95efad3ca55f6512742", "5e4979d4fad3ca55f6512458", "5e98b21e77ea8f7e30009287"],
        ia = {
            total_online: 0,
            notifications: [],
            relationships: [],
            presence: {
                status: "offline",
                realstatus: "offline",
                detail: "",
                realdetail: "",
                mask: "online",
                last: null
            },
            dms: {}
        };
    void 0 !== localStorage.getItem("presenceMask") && ["online", "away", "busy", "offline"].includes(localStorage.getItem("presenceMask")) && (ia.presence.mask = localStorage.getItem("presenceMask"));
    const ra = new Map;

    function la(e) {
        const t = () => {
            ea.isInRoom() && (ea.leaveRoom(!0), qs && qs.games.others.forEach(e => {
                e.game.end()
            }), ea.dropMultiplex()), Ft.stopNow(), at(), ct("connecting to live servers…"), Ws.require().then(t => {
                dt(), et("playmulti"), st(!0), t.maintenance && document.body.classList.add("maintenance"), ea.joinRoom(e), Ft.stopNow()
            }).catch(e => {
                dt(), T("could not connect to live servers")
            })
        };
        document.body.classList.contains("ingame_phys") ? D({
            title: "LEAVE CURRENT GAME?",
            msg: "you're still in game. abandon the current game?",
            buttons: [{
                label: "CANCEL",
                classes: [],
                callback: e => {
                    e()
                }
            }, {
                label: "LEAVE",
                classes: ["sec"],
                callback: e => {
                    e(), t()
                }
            }]
        }) : t()
    }
    U.ready((function(s) {
        e("social_tray").addEventListener("click", (function(e) {
            ma()
        })), e("social").addEventListener("click", (function(t) {
            t.target === e("social") && ga()
        })), e("social_relationships_tabs").addEventListener("click", (function(t) {
            t.target.classList.contains("social_relationships_tab") && (e("social_relationships_find").value = "", setTimeout(() => {
                za(), ba()
            }, 0))
        })), e("social_relationships_find").addEventListener("keyup", (function(t) {
            e("sbcpw").scrollTop = 0, za(), e("social_relationships_find").value && ba()
        })), e("social_back").addEventListener("click", (function(e) {
            ba()
        })), e("social_status").addEventListener("click", (function(e) {
            ot([{
                id: "online",
                name: '<img style="height: 0.88em; vertical-align: middle;" src="/res/status/online.png" /> ONLINE',
                description: "appear as usual"
            }, {
                id: "away",
                name: '<img style="height: 0.88em; vertical-align: middle;" src="/res/status/away.png" /> IDLE',
                description: "appear idle, unless you're offline or busy"
            }, {
                id: "busy",
                name: '<img style="height: 0.88em; vertical-align: middle;" src="/res/status/busy.png" /> BUSY',
                description: "appear busy, unless you're offline. receive no notifications. always enabled in TETRA LEAGUE (unless you're invisible)"
            }, {
                id: "offline",
                name: '<img style="height: 0.88em; vertical-align: middle;" src="/res/status/offline.png" /> INVISIBLE',
                description: "appear offline at all times"
            }], e => {
                localStorage.setItem("presenceMask", e), Va(ia.presence.realstatus, ia.presence.realdetail.split(":")[0], ia.presence.realdetail.split(":")[1], e)
            }, !0)
        })), e("social_dm_button_profile").addEventListener("click", (function(e) {
            fa || ba(), Ls({
                userID: fa.to._id
            })
        })), e("social_dm_button_gift").addEventListener("click", (function(e) {
            fa || ba(), Ke(void 0, fa.to.username)
        })), e("social_dm_button_invite").addEventListener("click", (function(t) {
            fa || ba(), e("social_dm_button_invite").classList.contains("active") || (ea.isInRoom() && e(`sp_${fa.to._id}`) ? T("this person is already in your room") : (Ws && Ws.isConnected() && Ws.emit("social.invite", fa.to._id), fa.inv_locked_until = Date.now() + 3e4, Ya()))
        })), e("social_dm_button_snipe").addEventListener("click", (function(t) {
            fa || ba(), e("social_dm_button_snipe").classList.contains("active") || (ea.isInRoom() && e(`sp_${fa.to._id}`) ? T("you are already in their room") : (fa.presence.detail.split(":")[1] && (la(fa.presence.detail.split(":")[1]), ga()), Ya()))
        })), e("social_dm_input").addEventListener("keydown", La), e("social_chat").addEventListener("mouseover", (function(e) {
            let t = e.target;
            (t.classList.contains("dm_chat_message") || (t = t.closest(".dm_chat_message"))) && t.getAttribute("data-ts") && t.setAttribute("data-time", `${n(Date.parse(t.getAttribute("data-ts")))} ago`)
        })), Ws.on("authorize", e => {
            ia.total_online = e.social.total_online, ia.notifications = e.social.notifications, ia.relationships = e.social.relationships, ia.dms = {};
            const t = [],
                s = [];
            let a = null;
            if (ia.relationships.forEach(n => {
                    e.social.presences[n.to._id] ? (n.presence = e.social.presences[n.to._id], ["offline", "unknown"].includes(n.presence.status) || (t.push(n.to.username.toUpperCase()), a = n.to._id, n.to.avatar_revision && s.push({
                        id: n.to._id,
                        avatar_revision: n.to.avatar_revision
                    }))) : n.presence = {
                        status: "offline",
                        detail: "",
                        invitable: !1
                    }
                }), Ws.emit("social.presence", {
                    status: ia.presence.status,
                    detail: ia.presence.detail
                }), t.length) {
                const e = x({
                    header: `<span>${t.slice(0, 10).join("</span>, <span>")}</span>${t.length > 10 ? ` and ${t.length - 10} more` : ""}`,
                    msg: '<img src="/res/status/online.png" style="height: 1em; vertical-align: -10%;" /> online now',
                    color: Xa.online,
                    icon: s.length ? `/user-content/avatars/${s[0].id}.jpg?rv=${s[0].avatar_revision}` : u(a),
                    classes: ["snotify"],
                    timeout: 5e3,
                    onclick: e => {
                        e(), ma()
                    },
                    suppressable: !0
                });
                for (let t = 1; t < Math.min(s.length, 5); t++) setTimeout(() => {
                    e.parentNode && (e.querySelector(".notification_icon").src = `/user-content/avatars/${s[t].id}.jpg?rv=${s[t].avatar_revision}`)
                }, 5e3 / Math.min(s.length, 5) * t)
            }
            ua && (za(), Ca(), Sa(), ba()), Ra(), Aa(), Ha()
        }), Ws.on("social.online", e => {
            ia.total_online = e, ua && Sa()
        }), Ws.on("social.notification", e => {
            e.data.fake || (ia.notifications.unshift(e), ua && Ca(), Aa()), sa[e.type] && sa[e.type](e)
        }), Ws.on("social.relationships.add", e => {
            e.presence = {
                status: "offline",
                detail: "",
                invitable: !1
            }, ia.relationships.push(e), ua && za(), Ha(), Ra()
        }), Ws.on("social.relationships.remove", e => {
            ia.relationships = ia.relationships.filter(t => t._id !== e), ua && za(), Ha(), Ra(), ha && fa._id === e && ba()
        }), Ws.on("social.relationships.removepending", e => {
            ia.relationships = ia.relationships.filter(e => "pending" !== e.type), ua && za(), Ha(), ha && "pending" === fa.type && ba()
        }), Ws.on("social.relationships.update", e => {
            ia.relationships.forEach(t => {
                t.to._id === e.user && (t.to.username = e.username, t.to.avatar_revision = e.avatar_revision)
            }), Fa = !0, ua && (za(), ha && fa.to._id === e.user && va())
        }), Ws.on("social.presence", t => {
            let s = null;
            ia.relationships.forEach(a => {
                a.to._id === t.user && (["offline", "unknown"].includes(a.presence.status) && !["offline", "unknown"].includes(t.presence.status) ? (!a.silenced_until || a.silenced_until < Date.now()) && (a.silenced_until = Date.now() + 3e5, "off" !== te.notifications.online && (x({
                    header: `<span>${a.to.username.toUpperCase()}</span>`,
                    msg: `<img src="/res/status/${t.presence.status}.png" style="height: 1em; vertical-align: -10%;" /> has come online`,
                    color: Xa[t.presence.status],
                    icon: a.to.avatar_revision ? `/user-content/avatars/${a.to._id}.jpg?rv=${a.to.avatar_revision}` : u(a.to._id),
                    classes: ["snotify"],
                    timeout: 5e3,
                    onclick: e => {
                        e(), _a(a)
                    },
                    suppressable: !0
                }), en() || vs.play("social_online", .7)), "both" !== te.notifications.online || en() || Pt(a.to.username.toUpperCase(), "has come online", !1, a.to.avatar_revision ? `/user-content/avatars/${a.to._id}.jpg?rv=${a.to.avatar_revision}` : "/res/tetriox256.png")) : ["offline", "unknown"].includes(t.presence.status) && !["offline", "unknown"].includes(a.presence.status) && (!a.silenced_until || a.silenced_until < Date.now()) && (a.silenced_until = Date.now() + 3e5, "off" !== te.notifications.offline && (x({
                    header: `<span>${a.to.username.toUpperCase()}</span>`,
                    msg: '<img src="/res/status/offline.png" style="height: 1em; vertical-align: -10%;" /> has gone offline',
                    color: Xa.offline,
                    icon: a.to.avatar_revision ? `/user-content/avatars/${a.to._id}.jpg?rv=${a.to.avatar_revision}` : u(a.to._id),
                    classes: ["snotify"],
                    timeout: 5e3,
                    onclick: e => {
                        e(), _a(a)
                    },
                    suppressable: !0
                }), en() || vs.play("social_offline", .7)), "both" !== te.notifications.offline || en() || Pt(a.to.username.toUpperCase(), "has gone offline", !1, a.to.avatar_revision ? `/user-content/avatars/${a.to._id}.jpg?rv=${a.to.avatar_revision}` : "/res/tetriox256.png")), a.presence = t.presence, ha && fa._id === a._id && ["offline", "unknown"].includes(t.presence.status) && e("social_relationships_tabs_online").classList.contains("active") && (e("social_relationships_tabs_online").classList.remove("active"), e("social_relationships_tabs_friends").classList.add("active"), s = a._id))
            }), ua && (za(), va(), null !== s && e(`social_relationship_${s}`) && setTimeout(() => {
                e(`social_relationship_${s}`) && e(`social_relationship_${s}`).scrollIntoView({
                    behavior: "smooth",
                    block: "center",
                    inline: "start"
                })
            }, 50)), Ra()
        }), Ws.on("social.dm", e => {
            const t = e.stream.replace(z.id(), "").replace(":", "");
            void 0 !== ia.dms[t] && (ia.dms[t].push(e), ia.dms[t].length > 250 && ia.dms[t].shift(), ua && ha && fa.to._id === t && ka()), e.data.user === z.id() || ua && ha && fa.to._id === t && !document.body.classList.contains("nofocus") ? ua && ha && fa && Oa(fa) : (ia.relationships.forEach(s => {
                if (s.to._id !== t) return;
                ua && ha && fa.to._id === t ? Oa(s, !0) : s.unread++;
                let a = {};
                a = e.data.user === s.to._id ? {
                    username: s.to.username,
                    _id: s.to._id,
                    ...e.data.userdata || {}
                } : {
                    username: e.data.user,
                    _id: null,
                    ...e.data.userdata || {}
                };
                let n = e.data.content;
                if (!1 !== te.video.chatfilter && e.data.content_safe && (n = e.data.content_safe), "off" === ("friend" === s.type ? te.notifications.dm : te.notifications.dm_pending) || Qa() || (x({
                        header: `<span>${s.to.username.toUpperCase()}</span>`,
                        msg: Gs(r(n), a, !1 === te.video.emotes_anim),
                        color: "#A2CEE8",
                        icon: s.to.avatar_revision ? `/user-content/avatars/${s.to._id}.jpg?rv=${s.to.avatar_revision}` : u(s.to._id),
                        subcolor: "#000",
                        subicon: "/res/icon/message-bw.svg",
                        classes: ["snotify", "snotifydm"],
                        timeout: 5e3,
                        onclick: e => {
                            e(), _a(s)
                        }
                    }), vs.play("social_dm")), "both" === ("friend" === s.type ? te.notifications.dm : te.notifications.dm_pending) && !Qa()) {
                    let e = n;
                    if (ra.get(s.to._id)) {
                        for (ra.get(s.to._id).push(n); ra.get(s.to._id).length > 4;) ra.get(s.to._id).shift();
                        e = ra.get(s.to._id).join("\n")
                    } else ra.set(s.to._id, [n]);
                    Pt(s.to.username.toUpperCase(), e, !1, s.to.avatar_revision ? `/user-content/avatars/${s.to._id}.jpg?rv=${s.to.avatar_revision}` : "/res/tetriox256.png", s.to._id, () => {
                        _a(s)
                    })
                }
            }), ua && za()), Ha()
        }), Ws.on("social.invite", e => {
            Qa() || ia.relationships.forEach(t => {
                t.to._id === e.sender && (x({
                    header: `<span>${t.to.username.toUpperCase()}</span>`,
                    msg: `invited you to <b>${r(e.roomname)}</b><div class="notification_timeoutbar" style="--time: 24s;"></div>`,
                    color: "#FF008A",
                    icon: t.to.avatar_revision ? `/user-content/avatars/${t.to._id}.jpg?rv=${t.to.avatar_revision}` : u(t.to._id),
                    subcolor: "#FF008A",
                    subicon: "/res/icon/invite.svg",
                    classes: ["snotify", "modalnotify"],
                    timeout: 25e3,
                    onclick: e => {},
                    buttons: [{
                        label: "IGNORE",
                        icon: "/res/icon/denied.svg",
                        classes: [],
                        onclick: e => {
                            e()
                        }
                    }, {
                        label: "ACCEPT",
                        icon: "/res/icon/accepted.svg",
                        classes: ["pri"],
                        onclick: t => {
                            if ("busy" === ia.presence.realstatus) return T("you cannot accept this invite now"), void t();
                            la(e.roomid), t()
                        }
                    }]
                }), vs.play("social_invite"), "both" === te.notifications.invite && Pt(t.to.username.toUpperCase(), `invited you to "${e.roomname}"`, !1, t.to.avatar_revision ? `/user-content/avatars/${t.to._id}.jpg?rv=${t.to.avatar_revision}` : "/res/tetriox256.png"))
            })
        }), document.addEventListener("keydown", o, !1), document.addEventListener("gpdown", o, !1);
        let a = 0;

        function o(e) {
            Object.keys(ae).forEach(s => {
                if (ae[s].includes(me(e) || e.detail.toUpperCase())) {
                    let n = !1;
                    if (["social_relationships_find", "social_dm_input"].includes(document.activeElement.id) && "BACKSPACE" !== me(e) && (n = !0), !n && ["input", "textarea"].includes(document.activeElement.tagName.toLowerCase())) return;
                    if ("menuDown" === s) {
                        if (ua && !ha) {
                            if (t(".social_relationship.focus")) {
                                const e = t(".social_relationship.focus");
                                e.nextElementSibling ? (e.classList.remove("focus"), e.nextElementSibling.classList.add("focus"), e.nextElementSibling.scrollIntoView({
                                    behavior: "auto",
                                    block: "center",
                                    inline: "start"
                                })) : (e.classList.remove("focus"), e.parentElement.firstElementChild.classList.add("focus"), e.parentElement.firstElementChild.scrollIntoView({
                                    behavior: "auto",
                                    block: "center",
                                    inline: "start"
                                }))
                            } ["DOWN", "ARROWDOWN"].includes(me(e)) && (e.stopPropagation(), e.preventDefault())
                        }
                    } else if ("menuUp" === s && ua && !ha) {
                        if (t(".social_relationship.focus")) {
                            const e = t(".social_relationship.focus");
                            e.previousElementSibling ? (e.classList.remove("focus"), e.previousElementSibling.classList.add("focus"), e.previousElementSibling.scrollIntoView({
                                behavior: "auto",
                                block: "center",
                                inline: "start"
                            })) : (e.classList.remove("focus"), e.parentElement.lastElementChild.classList.add("focus"), e.parentElement.lastElementChild.scrollIntoView({
                                behavior: "auto",
                                block: "center",
                                inline: "start"
                            }))
                        } ["UP", "ARROWUP"].includes(me(e)) && (e.stopPropagation(), e.preventDefault())
                    }
                    if (e.repeat) return;
                    "openSocial" === s ? (ua ? ga() : ma(), e.stopPropagation(), e.preventDefault()) : "menuBack" === s || "ESCAPE" === me(e) ? ua && ("social_dm_input" === document.activeElement.id ? (a = Date.now() + 50, ba()) : a < Date.now() && ga(), e.stopPropagation(), e.preventDefault()) : "menuConfirm" === s && ua && !ha && t(".social_relationship.focus") && t(".social_relationship.focus").click()
                }
            })
        }
    }));
    let ca = null,
        da = null,
        pa = 0,
        ua = !1;

    function ma() {
        ua || z.anon() || (ca && (clearTimeout(ca), ca = null), da && clearInterval(da), Ia(), e("social").classList.remove("hidden"), e("social").getBoundingClientRect(), e("social").classList.remove("hiding"), e("social_relationships_find").value = "", e("sbcpw").scrollTop = -200, e("social_relationships_tabs_online").classList.contains("active") && 0 === ia.relationships.filter(e => ["online", "away", "busy"].includes(e.presence.status) && "friend" === e.type).length && (e("social_relationships_tabs_online").classList.remove("active"), e("social_relationships_tabs_friends").classList.add("active")), da = setInterval(() => {
            Ia(), ++pa % 600 == 0 && ua && za()
        }, 100), ua = !0, vs.play("social_open"), Sa(), Ca(), va(), ka(), Ya(), Ce.push(), Ce.bindGuide(Ae.social), Ce.disengage(), bt(), ha ? (requestAnimationFrame(() => {
            e("social_dm_input").focus()
        }), fa && fa.unread && Oa(fa)) : requestAnimationFrame(() => {
            e("social_relationships_find").focus()
        }), za())
    }

    function ga() {
        ua && (z.anon() || (ca && clearTimeout(ca), da && (clearInterval(da), da = null), e("social").classList.add("hiding"), ca = setTimeout(() => {
            e("social").classList.add("hidden")
        }, 300), $a(), Aa(), ha && fa && fa.unread && Oa(fa), ua = !1, vs.play("social_close"), Ce.pop(), yt()))
    }
    let ha = !1,
        fa = null;

    function _a(t, a = !1) {
        if (ua || ma(), ha && ua && a && fa._id === t._id) return void ba();
        if (e("social_people").classList.add("collapsed"), s(".social_relationship").forEach(e => {
                e.classList.remove("active")
            }), !e(`social_relationship_${t._id}`)) {
            let a = !1;
            if (ia.relationships.forEach(n => {
                    n._id === t._id && ("friend" === t.type ? (s(".social_relationships_tab").forEach(e => {
                        e.classList.remove("active")
                    }), e("social_relationships_tabs_friends").classList.add("active"), a = !0) : "pending" === t.type && (s(".social_relationships_tab").forEach(e => {
                        e.classList.remove("active")
                    }), e("social_relationships_tabs_pending").classList.add("active"), a = !0))
                }), a && (za(), !e(`social_relationship_${t._id}`))) return ba(), void e("social_people").classList.remove("collapsed")
        }
        let n = !1;
        fa && fa.unread && (Oa(fa), n = !0), e(`social_relationship_${t._id}`).classList.add("active"), setTimeout(() => {
            e(`social_relationship_${t._id}`) && e(`social_relationship_${t._id}`).scrollIntoView({
                behavior: "smooth",
                block: "nearest",
                inline: "start"
            })
        }, 50), ha || vs.play("social_open_minor"), ha = !0, fa = t, va(), void 0 === ia.dms[t.to._id] ? (ka(!0), k.get(`/api/dms/${t.to._id}`, {}, !0).then(e => {
            ia.dms[t.to._id] = e.dms.reverse(), ka()
        }, e => {
            dt(), S(e)
        })) : ka(), t.unread && (Oa(t), n = !0), n && za(), requestAnimationFrame(() => {
            e("social_dm_input").focus()
        })
    }

    function ba() {
        if (!ha) return;
        e("social_people").classList.remove("collapsed"), s(".social_relationship").forEach(e => {
            e.classList.remove("active")
        }), ha && vs.play("social_close_minor"), ha = !1, fa && fa.unread && (Oa(fa), za());
        const t = e("sbcpw").scrollTop;
        requestAnimationFrame(() => {
            e("social_relationships_find").focus(), e("sbcpw").scrollTop = t
        })
    }

    function ya(e) {
        ia.relationships.forEach(t => {
            t.to._id === e && _a(t)
        })
    }

    function va() {
        if (!ha || !fa) return;
        const t = fa;
        if (e("social_dm_img").src = t.to.avatar_revision ? `/user-content/avatars/${t.to._id}.jpg?rv=${t.to.avatar_revision}` : u(t.to._id), e("social_dm_username").innerHTML = t.to.username.toUpperCase(), e("social_dm_username").classList.toggle("lu", t.to.username.length > 14), e("social_dm").classList.toggle("offline", !["online", "away", "busy"].includes(t.presence.status)), e("social_dm_button_invite").classList.toggle("hidden", !t.presence.invitable), "friend" === t.type) {
            const s = t.presence.detail.split(":"),
                a = na[t.presence.status](s[0] || "", s[1] || "");
            e("social_dm_status").innerHTML = `<img src="/res/status/${t.presence.status}.png" /> ${a.html}`, e("social_dm_button_snipe").classList.toggle("hidden", !(s[1] && "X-PRIV" !== s[1] && "online" === t.presence.status))
        } else switch (e("social_dm_button_snipe").classList.add("hidden"), t.type) {
            case "block":
                e("social_dm_status").innerHTML = '<img src="/res/status/blocked.png" /> Blocked';
                break;
            case "pending":
                e("social_dm_status").innerHTML = '<img src="/res/status/unknown.png" /> Not a friend';
                break;
            default:
                e("social_dm_status").innerHTML = '<img src="/res/status/unknown.png" /> Status unknown'
        }
        Ya()
    }

    function ka(t = !1) {
        if (!ha || !fa) return;
        const a = fa;
        let n = [];
        if ((n = t ? [{
                _id: `${a.to._id}--loading`,
                data: {
                    content: "Loading chat messages...",
                    user: "[CMD]",
                    system: !1,
                    announcement: !1,
                    banner: !0
                }
            }] : JSON.parse(JSON.stringify(ia.dms[a.to._id] || []))) || (n = []), n.unshift({
                _id: `${a.to._id}--rules`,
                data: {
                    content: "Please be civil. Staff will never ask for your credentials.",
                    user: "[CMD]",
                    system: !1,
                    announcement: !1,
                    banner: !0
                }
            }), "pending" === a.type && n.unshift({
                _id: `${a.to._id}--pending`,
                data: {
                    content: `${a.to.username.toUpperCase()} isn't on your friends list. You can block them by clicking PROFILE. Don't want to receive DMs from strangers? Check your privacy settings in Config -> Account.`,
                    user: "[CMD]",
                    system: !1,
                    announcement: !1,
                    banner: !0
                }
            }), "osk" === a.to.username && "friend" === a.type) {
            let e = !1;
            n.forEach(t => {
                t.data.user === a.to._id && (e = !0)
            }), e || (n.unshift({
                _id: `${a.to._id}--msgosk2`,
                data: {
                    content: "Please do not message osk for TETR.IO support, such as account issues, ban appeals, verification requests, and any other requests for help. For help with such issues, please contact support (tetr.io/about/support). Your DM will be ignored at best.",
                    user: "[CMD]",
                    system: !1,
                    announcement: !1,
                    banner: !0,
                    banner_color: "#FF008466"
                }
            }), n.unshift({
                _id: `${a.to._id}--msgosk`,
                data: {
                    content: "Do you really want to message osk? He's often very busy, and might not reply very quickly or at all, and does not accept invites. He tries to read every DM he gets, so please go easy on him, OK?",
                    user: "[CMD]",
                    system: !1,
                    announcement: !1,
                    banner: !0,
                    banner_color: "#19FF9533",
                    banner_img: "/res/emotes/kagari.png"
                }
            }))
        } else if (oa.includes(a.to._id) && "friend" === a.type) {
            let e = !1;
            n.forEach(t => {
                t.data.user === a.to._id && (e = !0)
            }), e || n.unshift({
                _id: `${a.to._id}--msgstaff`,
                data: {
                    content: `Please do not message ${a.to.username.toUpperCase()} for TETR.IO support, such as account issues, ban appeals, verification requests, and any other requests for help. For help with such issues, please contact support (tetr.io/about/support). Your DM will be ignored at best.`,
                    user: "[CMD]",
                    system: !1,
                    announcement: !1,
                    banner: !0,
                    banner_color: "#FF008466"
                }
            })
        }
        const o = n.map(e => e._id);
        s("#social_chat .chat_message").forEach(e => {
            o.includes(e.getAttribute("data-id")) || e.remove()
        });
        const i = new DocumentFragment;
        n.forEach(t => {
            const s = t.data;
            s.user === a.from._id ? s.user = {
                username: a.from.username,
                _id: a.from._id,
                ...s.userdata || {}
            } : s.user === a.to._id ? s.user = {
                username: a.to.username,
                _id: a.to._id,
                ...s.userdata || {}
            } : s.user = {
                username: s.user,
                _id: null,
                ...s.userdata || {}
            }, e(`social_dm_${t._id}`) || wa(t, !1, !1, i)
        }), e("social_chat").appendChild(i), e("sbdmcpw").scrollTop = e("sbdmcpw").scrollHeight + 100
    }

    function wa(t, s = !1, a = !1, n = null) {
        if (fa && a) {
            const e = JSON.parse(JSON.stringify(t));
            e.data.user = e.data.user._id || e.data.user.username, Object.keys(ia.dms).forEach(t => {
                t.replace(z.id(), "").replace(":", "") === fa.to._id && ia.dms[t].push(e)
            })
        }
        const o = t.data;
        !1 !== te.video.chatfilter && o.content_safe && o.user._id != z.id() && (o.content = o.content_safe);
        const i = document.createElement("div");
        i.classList.add("chat_message"), i.classList.add("dm_chat_message"), i.id = `social_dm_${t._id}`, i.setAttribute("data-id", t._id), t.ts && i.setAttribute("data-ts", t.ts), o.banner && i.classList.add("chat_banner"), o.banner_img && i.classList.add("chat_banner_img"), o.system && i.classList.add("system"), o.announcement && i.classList.add("announcement"), o.user.supporter && (i.classList.add("supporterchat"), i.classList.add(`supporterchat_t${o.user.supporter_tier}`)), "admin" === o.user.role && i.classList.add("adminchat"), "mod" === o.user.role && i.classList.add("modchat");
        const l = document.createElement("h1");
        l.textContent = o.user.username.toUpperCase(), ["[SYS]", "[CMD]"].includes(o.user.username.toUpperCase()) || (l.classList.add("chat_tag"), l.setAttribute("data-id", o.user._id)), i.appendChild(l);
        const c = document.createElement("p"),
            d = r(o.content),
            p = s ? o.content : Gs(r(o.content), o.user, !1 === te.video.emotes_anim);
        if (d === p ? c.textContent = o.content : c.innerHTML = p, o.banner_color && (c.style.color = o.banner_fgcolor || "#FFF", c.style.backgroundColor = o.banner_color, c.style.borderColor = o.banner_color), i.appendChild(c), o.banner_img) {
            const e = document.createElement("img");
            e.classList.add("banner_img"), e.setAttribute("src", o.banner_img), i.appendChild(e)
        }(n || e("social_chat")).appendChild(i), n || (e("sbdmcpw").scrollTop = e("sbdmcpw").scrollHeight + 100)
    }

    function La(t) {
        if (!fa) return;
        if (t.repeat || t.isComposing) return;
        if ("Enter" !== t.code && "NumpadEnter" !== t.code) return;
        const s = t.target.value;
        s.length && Ea(fa.to._id, s), e("social_dm_input").value = ""
    }

    function Ea(t, s) {
        if (s.startsWith("/")) {
            const t = s.split(" ");
            switch (t[0].toLowerCase()) {
                case "/invite":
                case "/inv":
                case "/i":
                    if (e("social_dm_button_invite").classList.contains("hidden")) return void xa("Cannot invite this user right now");
                    if (e("social_dm_button_invite").classList.contains("active")) return void xa("Invite is on cooldown");
                    e("social_dm_button_invite").click(), xa("Invite sent");
                    break;
                case "/snipe":
                case "/s":
                case "/join":
                case "/j":
                    if (e("social_dm_button_snipe").classList.contains("hidden")) return void xa("Cannot join this user's room right now");
                    e("social_dm_button_snipe").click();
                    break;
                case "/profile":
                case "/prof":
                case "/p":
                    if (e("social_dm_button_profile").classList.contains("hidden")) return void xa("Cannot check this user's profile");
                    e("social_dm_button_profile").click();
                    break;
                case "/gift":
                case "/g":
                case "/support":
                case "/s":
                    if (e("social_dm_button_gift").classList.contains("hidden")) return void xa("Cannot gift this user right now");
                    e("social_dm_button_gift").click();
                    break;
                case "/help":
                    xa("Available commands: /INVITE (/INV, /I), /SNIPE (/S, /JOIN, /J), /PROFILE (/PROF, /P), /GIFT (/G, /SUPPORT, /S)");
                    break;
                case "/kagari":
                    xa(":kagari:");
                    break;
                default:
                    xa(`Unknown command ${t[0].toLowerCase()}`)
            }
        } else Ws && Ws.isConnected() && Ws.emit("social.dm", {
            recipient: t,
            msg: s
        })
    }

    function xa(e) {
        wa({
            _id: `kagarin${Date.now()}${Math.floor(1e7 * Math.random())}`,
            stream: "kagarin",
            data: {
                content: e,
                user: {
                    username: "[CMD]",
                    _id: null
                },
                system: !0,
                announcement: !1
            }
        }, !1, !0)
    }
    const Ta = Date.now();

    function Ia() {
        const t = (new Date).toLocaleTimeString().replace("AM", "<span>AM</span>").replace("PM", "<span>PM</span>");
        e("social_top_clock").innerHTML = t, e("social_top_sessiontime").innerHTML = `${n(Ta)} this session`
    }

    function Sa() {
        e("social_bottom_online").innerHTML = `${ia.total_online.toLocaleString()} ONLINE`
    }
    let Ma = !1;

    function Ca() {
        if (0 === ia.notifications.length) return e("social_notifications_content").innerHTML = '<div class="social_empty"><img src="/res/social_working.png" /><p>Notifications will appear here.</p></div>', void(Ma = !0);
        Ma && (e("social_notifications_content").innerHTML = "", Ma = !1);
        let t = null;
        for (ia.notifications.forEach(s => {
                let a = e(`social_notification_${s._id}`);
                if (!a) {
                    if (!ta[s.type]) return;
                    const n = ta[s.type](s);
                    if ((a = document.createElement("div")).classList.add("social_notification"), a.id = `social_notification_${s._id}`, a.style = `--pri: ${n.pri}; --sec: ${n.sec};`, n.action && (a.setAttribute("data-action", n.action), a.addEventListener("click", () => {
                            Pa(n.action)
                        })), n.img_main) {
                        const e = document.createElement("img");
                        e.classList.add("social_notification_img_main"), e.src = n.img_main, a.appendChild(e)
                    }
                    if (n.img_sub) {
                        const e = document.createElement("img");
                        e.classList.add("social_notification_img_sub"), e.src = n.img_sub, a.appendChild(e)
                    }
                    const o = document.createElement("h1");
                    o.innerHTML = n.header, a.appendChild(o);
                    const i = document.createElement("h2");
                    a.appendChild(i);
                    const r = document.createElement("p");
                    r.innerHTML = n.content, a.appendChild(r), t ? t.insertAdjacentElement("afterend", a) : e("social_notifications_content").insertAdjacentElement("afterbegin", a)
                }
                a && (a.querySelector("h2").innerHTML = i(new Date(s.ts).getTime()), a.classList.toggle("unread", !s.seen), t = a)
            }); e("social_notifications_content").children.length > 100;) e("social_notifications_content").removeChild(e("social_notifications_content").children[100])
    }

    function Aa() {
        let t = 0;
        ia.notifications.forEach(e => {
            e.seen || t++
        }), e("social_tray").classList.toggle("unread_notifications", 0 !== t), e("social_tray_badge_notifications").innerHTML = t
    }

    function Ha() {
        let t = 0;
        ia.relationships.forEach(e => {
            t += e.unread || 0
        }), e("social_tray").classList.toggle("unread_people", 0 !== t), e("social_tray_badge_people").innerHTML = t
    }

    function Ra() {
        let t = 0;
        ia.relationships.forEach(e => {
            "friend" === e.type && ["online", "away", "busy"].includes(e.presence.status) && t++
        }), e("social_tray_online").innerHTML = t
    }

    function $a() {
        Ws && Ws.isConnected() && Ws.emit("social.notifications.ack"), ia.notifications.forEach(e => {
            e.seen = !0
        })
    }

    function Oa(e, t = !1) {
        e.unread = 0, t || ra.delete(e.to._id), Ws && Ws.isConnected() && Ws.emit("social.relationships.ack", e.to._id), Ha(), ua && Ga()
    }

    function Pa(e) {
        const t = e.split(":");
        switch (t[0]) {
            case "user":
                Ls({
                    userID: t[1]
                });
                break;
            case "support":
                Ke();
                break;
            case "url":
                window.open(t.slice(1).join(":"), "_blank");
                break;
            case "room":
                "busy" === ia.presence.realstatus ? T("you cannot join this room now") : ea.isInRoom() && Zs === t[1] ? T("you are already in this room") : (la(t[1]), ga())
        }
    }

    function Da(e) {
        for (let t = 0; t < ia.relationships.length; t++)
            if (ia.relationships[t].to._id === e) return ia.relationships[t]
    }
    let Na = !1,
        Fa = !1,
        Ua = "";
    const Ba = ["online", "away", "busy", "offline", "unknown", void 0],
        Xa = {
            online: "#4AFF71",
            away: "#FFD84A",
            busy: "#FF504A",
            offline: "#FFF5",
            unknown: "#FFF5"
        };

    function za() {
        Ga();
        let a = [],
            n = !1;
        const o = e("social_relationships_find").value.trim().toLowerCase();
        if (e("social_relationships_find").classList.toggle("active", !!o), o ? (a = ia.relationships.filter(e => ["friend", "pending"].includes(e.type) && e.to.username.includes(o)), n = !0) : e("social_relationships_tabs_online").classList.contains("active") ? (a = ia.relationships.filter(e => ["online", "away", "busy"].includes(e.presence.status) && "friend" === e.type), n = !0) : e("social_relationships_tabs_friends").classList.contains("active") ? (a = ia.relationships.filter(e => "friend" === e.type), n = !0) : e("social_relationships_tabs_pending").classList.contains("active") ? a = ia.relationships.filter(e => "pending" === e.type) : e("social_relationships_tabs_blocked").classList.contains("active") && (a = ia.relationships.filter(e => "block" === e.type)), a.sort((e, t) => e.to.username === o != (t.to.username === o) ? (t.to.username === o) - (e.to.username === o) : e.unread !== t.unread ? t.unread - e.unread : e.presence.status !== t.presence.status ? Ba.indexOf(e.presence.status) - Ba.indexOf(t.presence.status) : e.to.username.localeCompare(t.to.username)), 0 === a.length) {
            if (o) {
                let t = "Couldn't find anyone like that.",
                    s = !1,
                    a = !1;
                switch (o) {
                    case "anyone like that":
                        t = "Couldn't find anyone with that name.";
                        break;
                    case "anyone with that name":
                        t = "Couldn't find that person.";
                        break;
                    case "that person":
                        t = "Couldn't find the specified user.";
                        break;
                    case "the specified user":
                        t = "Couldn't find anyone in your friends list with that name.";
                        break;
                    case "anyone in your friends list with that name":
                        t = "Couldn't find who you are looking for.";
                        break;
                    case "who you are looking for":
                        t = "Couldn't find any user in your friends list who matches the specified search term.";
                        break;
                    case "any user in your friends list who matches the specified search term":
                        t = "...", s = !0
                }
                /^[a-z0-9\-\_]{3,16}$/.test(o) && (a = !0), e("social_relationships").innerHTML = `<div class="social_empty"><img src="/res/${s ? "social_blocked" : "social_error"}.png" /><p>${t}</p>${a ? `<p class="also tetra_pop" data-username="${o.replace('"', "")}">Look for <span>${r(o.toUpperCase())}</span> on Tetra Channel?</p>` : ""}</div>`
            } else e("social_relationships_tabs_online").classList.contains("active") ? e("social_relationships").innerHTML = '<div class="social_empty"><img src="/res/social_empty.png" /><p>Nobody\'s online right now.</p></div>' : e("social_relationships_tabs_friends").classList.contains("active") ? e("social_relationships").innerHTML = '<div class="social_empty"><img src="/res/social_empty.png" /><p>You haven\'t added any friends yet. Click the FRIEND button on a profile to friend them.</p></div>' : e("social_relationships_tabs_pending").classList.contains("active") ? e("social_relationships").innerHTML = '<div class="social_empty"><img src="/res/social_loading.png" /><p>If someone outside of your friends list messages you, they\'ll appear here.</p></div>' : e("social_relationships_tabs_blocked").classList.contains("active") && (e("social_relationships").innerHTML = '<div class="social_empty"><img src="/res/social_blocked.png" /><p>You haven\'t blocked anyone yet.</p></div>');
            return void(Na = !0)
        }
        Na && (e("social_relationships").innerHTML = "", Na = !1);
        const i = a.map(e => e._id);
        s("#social_relationships .social_relationship").forEach(e => {
            i.includes(e.getAttribute("data-id")) || e.remove()
        });
        let l = null;
        a.forEach(t => {
            let s = e(`social_relationship_${t._id}`);
            if (s) e("social_relationships").insertAdjacentElement("beforeend", s), Fa && (s.querySelector("h1 span").textContent = t.to.username.toUpperCase(), s.querySelector(".social_relationship_img").src = t.to.avatar_revision ? `/user-content/avatars/${t.to._id}.jpg?rv=${t.to.avatar_revision}` : u(t.to._id), Fa = !1);
            else {
                (s = document.createElement("div")).classList.add("social_relationship"), s.classList.toggle("active", ha && fa._id === t._id), s.id = `social_relationship_${t._id}`, s.setAttribute("data-id", t._id), s.addEventListener("click", () => {
                    "block" === t.type ? Ls({
                        userID: t.to._id
                    }) : _a(t, !0)
                });
                const a = document.createElement("img");
                a.classList.add("social_relationship_img"), a.src = t.to.avatar_revision ? `/user-content/avatars/${t.to._id}.jpg?rv=${t.to.avatar_revision}` : u(t.to._id), s.appendChild(a);
                const n = document.createElement("h1");
                s.appendChild(n);
                const o = document.createElement("span");
                o.textContent = t.to.username.toUpperCase(), n.appendChild(o);
                const i = document.createElement("p");
                s.appendChild(i);
                const r = document.createElement("h2");
                s.appendChild(r);
                const c = document.createElement("div");
                c.classList.add("social_relationship_button_holder"), s.appendChild(c);
                const d = document.createElement("div");
                d.title = "Join room", d.classList.add("social_relationship_button"), d.classList.add("social_relationship_button_snipe");
                const p = document.createElement("img");
                p.src = "/res/icon/snipe.svg", d.appendChild(p), d.addEventListener("click", s => {
                    if (d.classList.contains("active")) s.stopPropagation();
                    else {
                        if (d.classList.add("activated"), setTimeout(() => {
                                d.classList.remove("activated")
                            }, 300), ea.isInRoom() && e(`sp_${t.to._id}`)) return T("you are already in their room"), void s.stopPropagation();
                        t.presence.detail.split(":")[1] && (la(t.presence.detail.split(":")[1]), ga()), s.stopPropagation()
                    }
                }), c.appendChild(d);
                const m = document.createElement("div");
                m.title = "Invite to your room", m.classList.add("social_relationship_button"), m.classList.add("social_relationship_button_invite");
                const g = document.createElement("img");
                g.src = "/res/icon/invite.svg", m.appendChild(g);
                const h = document.createElement("span");
                if (m.appendChild(h), m.addEventListener("click", s => {
                        if (m.classList.contains("active")) s.stopPropagation();
                        else {
                            if (m.classList.add("activated"), setTimeout(() => {
                                    m.classList.remove("activated")
                                }, 300), ea.isInRoom() && e(`sp_${t.to._id}`)) return T("this person is already in your room"), void s.stopPropagation();
                            Ws && Ws.isConnected() && Ws.emit("social.invite", t.to._id), t.inv_locked_until = Date.now() + 3e4, Ya(), s.stopPropagation()
                        }
                    }), c.appendChild(m), "pending" === t.type) {
                    const e = document.createElement("div");
                    e.title = "Close DM", e.classList.add("social_relationship_button"), e.classList.add("social_relationship_button_close");
                    const s = document.createElement("img");
                    s.src = "/res/icon/close.svg", e.appendChild(s), e.addEventListener("click", s => {
                        e.classList.contains("active") ? s.stopPropagation() : (e.classList.add("activated"), k.post("/api/relationships/remove", {
                            user: t.to._id
                        }, !0).then(t => {
                            e.classList.remove("activated")
                        }, e => {
                            S(e)
                        }), s.stopPropagation())
                    }), c.appendChild(e)
                }
                l ? l.insertAdjacentElement("afterend", s) : e("social_relationships").insertAdjacentElement("beforeend", s)
            }
            if (s) {
                s.classList.toggle("unread", !!t.unread), s.classList.toggle("offline", n && !["online", "away", "busy"].includes(t.presence.status)), s.setAttribute("style", n ? `--pri: ${Xa[t.presence.status || "unknown"]};` : "");
                let e = "";
                if (n) {
                    const a = t.presence.detail.split(":"),
                        n = na[t.presence.status](a[0] || "", a[1] || ""),
                        o = `<img src="/res/status/${t.presence.status}.png" /> ${n.html}`;
                    s.querySelector("p").innerHTML !== o && (s.querySelector("p").innerHTML = o), e = n.text, s.querySelector(".social_relationship_button_snipe").classList.toggle("hidden", !(a[1] && "X-PRIV" !== a[1] && "online" === t.presence.status))
                } else {
                    s.querySelector(".social_relationship_button_snipe").classList.add("hidden");
                    let a = "";
                    switch (t.type) {
                        case "block":
                            a = '<img src="/res/status/blocked.png" /> Blocked', e = "Blocked";
                            break;
                        case "pending":
                            a = '<img src="/res/status/unknown.png" /> Not a friend', e = "Not a friend";
                            break;
                        default:
                        case "friend":
                            a = '<img src="/res/status/unknown.png" /> Status unknown', e = "Status unknown"
                    }
                    s.querySelector("p").innerHTML !== a && (s.querySelector("p").innerHTML = a)
                }
                s.classList.toggle("cc", s.querySelector("p").innerHTML.length >= 70), s.setAttribute("title", `${t.to.username.toUpperCase()}\n${e}`), s.querySelector("h2").textContent = t.unread || 0, s.querySelector(".social_relationship_button_invite").classList.toggle("hidden", !t.presence.invitable), l = s
            }
            0
        }), o ? (Ua === o && t(".social_relationship.focus") || (s(".social_relationship.focus").forEach(e => {
            e.classList.remove("focus")
        }), t(".social_relationship") && t(".social_relationship").classList.add("focus")), Ua = o) : s(".social_relationship.focus").forEach(e => {
            e.classList.remove("focus")
        }), Ya(), e("social").classList.toggle("bulky", a.length > 50)
    }

    function Ga() {
        let e = 0,
            s = 0,
            a = 0,
            n = 0,
            o = 0;
        ia.relationships.forEach(t => {
            e += t.unread || 0, "friend" === t.type ? (a += t.unread || 0, ["offline", "unknown"].includes(t.presence.status) || (s += t.unread || 0)) : "pending" === t.type ? n += t.unread || 0 : "block" === t.type && (o += t.unread || 0)
        }), t("#social_relationships_tabs_online .social_relationships_tab_unread").classList.toggle("hidden", 0 === s), t("#social_relationships_tabs_online .social_relationships_tab_unread").textContent = s, t("#social_relationships_tabs_friends .social_relationships_tab_unread").classList.toggle("hidden", 0 === a), t("#social_relationships_tabs_friends .social_relationships_tab_unread").textContent = a, t("#social_relationships_tabs_pending .social_relationships_tab_unread").classList.toggle("hidden", 0 === n), t("#social_relationships_tabs_pending .social_relationships_tab_unread").textContent = n, t("#social_relationships_tabs_blocked .social_relationships_tab_unread").classList.toggle("hidden", 0 === o), t("#social_relationships_tabs_blocked .social_relationships_tab_unread").textContent = o, t("#social_unread").classList.toggle("hidden", 0 === e), t("#social_unread").textContent = e
    }
    let ja = null,
        Wa, qa, Ka;

    function Ya() {
        if (!ua) return;
        ja && (clearTimeout(ja), ja = null);
        let s = 0;
        ia.relationships.forEach(a => {
            if (a.inv_locked_until > Date.now()) {
                s++;
                const n = Math.ceil((a.inv_locked_until - Date.now()) / 1e3);
                e(`social_relationship_${a._id}`) && (t(`#social_relationship_${a._id} .social_relationship_button_invite`).classList.add("active"), t(`#social_relationship_${a._id} .social_relationship_button_invite span`).textContent = n), ha && fa._id === a._id && (e("social_dm_button_invite").classList.add("active"), e("social_dm_button_invite").style = `--progress: ${(a.inv_locked_until - Date.now()) / 3e4 * 100}%`)
            } else e(`social_relationship_${a._id}`) && t(`#social_relationship_${a._id} .social_relationship_button_invite`).classList.remove("active"), ha && fa._id === a._id && e("social_dm_button_invite").classList.remove("active")
        }), s && (ja = setTimeout(() => {
            Ya()
        }, 100))
    }

    function Va(t, s = "", a = "", n = null) {
        let o = Qa();
        n && (ia.presence.mask = n), ia.presence.realstatus = t, ia.presence.realdetail = `${s}${a ? `:${a}` : ""}`, "away" !== t && (ia.presence.last = [t, s, a]), [t, s, a] = aa[ia.presence.mask](t, s, a);
        const i = na[t](s, a);
        Qa() !== o && (Qa() || document.body.classList.contains("ingame_phys") && !1 !== te.notifications.suppress || A()), Z(i.discord);
        const r = t,
            l = `${s}${a ? `:${a}` : ""}`;
        ia.presence.status === r && ia.presence.detail === l || (ia.presence.status = r, ia.presence.detail = l, Ws && Ws.isConnected() && Ws.emit("social.presence", {
            status: ia.presence.status,
            detail: ia.presence.detail
        }), e("social_status").innerHTML = `${i.html} <img src="/res/status/${r}.png" />`, e("social_status").classList.toggle("cc", e("social_status").innerHTML.length >= 65))
    }

    function Za() {
        "menus" === ia.presence.detail && Va("away")
    }

    function Ja() {
        null !== ia.presence.last && "away" === ia.presence.realstatus && Va(...ia.presence.last)
    }

    function Qa() {
        return "busy" === ia.presence.realstatus || "busy" === ia.presence.mask
    }

    function en() {
        return te.notifications.suppress && document.body.classList.contains("ingame_phys") || Qa()
    }

    function tn(e) {
        let t = e % 2147483647;
        return t <= 0 && (t += 2147483646), {
            next: function() {
                return t = 16807 * t % 2147483647
            },
            nextFloat: function(e, t) {
                return (this.next() - 1) / 2147483646
            },
            shuffleArray: function(e) {
                let t, s = e.length;
                if (0 == s) return e;
                for (; --s;) t = Math.floor(this.nextFloat() * (s + 1)), [e[s], e[t]] = [e[t], e[s]];
                return e
            },
            getCurrentSeed: function() {
                return t
            }
        }
    }
    const sn = (() => {
        const e = new Map;
        return {
            play: function(t, s = {}) {
                const a = e.get(t);
                a && (a.graphics || ["medium", "high", "ultra"]).includes(te.video.graphics) && a.play(s)
            },
            register: function(t, s) {
                e.set(t, s)
            },
            utils: {
                freq: e => e * (parseFloat(te.video.particles) || .6),
                scale: e => ls(1.8) * e / Math.max(.75, Math.min(2, parseFloat(te.video.particles || .6) + .4))
            }
        }
    })();
    let an;

    function nn(e) {
        return e / (te.video.particles || .6)
    }

    function on(e) {
        return e * (2.2 - Math.max(0, 2.2 * (1 - (te.video.particles || .6))))
    }

    function rn(e, t, s) {
        if ("ultra" !== te.video.graphics || 0 == te.video.flashwave) return;
        null === vn.stage.filters && (vn.stage.filters = []);
        const a = void 0 === te.video.flashwave ? 1 : te.video.flashwave;
        vn.stage.filters.push(new PIXI.filters.ShockwaveFilter([e, t], {
            amplitude: (2 + 2 * s) * a,
            wavelength: ls(150 + 40 * s * (.5 + .5 * a)),
            speed: ls(500 + 50 * s),
            brightness: 1 + .25 * a,
            radius: -1
        }, 0))
    }

    function ln(e, t, s, a) {
        return void 0 === a && (a = zn), e + (t - e) * a(s)
    }

    function cn(e) {
        const t = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e);
        return t ? {
            r: parseInt(t[1], 16),
            g: parseInt(t[2], 16),
            b: parseInt(t[3], 16)
        } : null
    }

    function dn(e) {
        const t = cn(e);
        return t ? t.r << 16 | t.g << 8 | t.b : 0
    }

    function pn(e, t, s) {
        let a, n, o;
        if (e /= 360, s /= 100, 0 === (t /= 100)) a = n = o = s;
        else {
            const i = (e, t, s) => (s < 0 && (s += 1), s > 1 && (s -= 1), s < 1 / 6 ? e + 6 * (t - e) * s : s < .5 ? t : s < 2 / 3 ? e + (t - e) * (2 / 3 - s) * 6 : e),
                r = s < .5 ? s * (1 + t) : s + t - s * t,
                l = 2 * s - r;
            a = i(l, r, e + 1 / 3), n = i(l, r, e), o = i(l, r, e - 1 / 3)
        }
        const i = e => {
            const t = Math.round(255 * e).toString(16);
            return 1 === t.length ? "0" + t : t
        };
        return `#${i(a)}${i(n)}${i(o)}`
    }

    function un(e, t, s) {
        s /= 100;
        const a = t * Math.min(s, 1 - s) / 100,
            n = t => {
                const n = (t + e / 30) % 12,
                    o = s - a * Math.max(Math.min(n - 3, 9 - n, 1), -1);
                return Math.round(255 * o)
            };
        return n(0) << 16 | n(8) << 8 | n(4)
    }
    U.ready((function(e) {
        PIXI.Ticker.shared.add(e => {
            "ultra" === te.video.graphics && null !== vn.stage.filters && (vn.stage.filters.forEach((t, s) => {
                t.time += e / (1e3 / 60), t.amplitude *= .98, t.brightness = 1 + .95 * (t.brightness - 1), t.time > 5 && vn.stage.filters.splice(s, 1)
            }), 0 === vn.stage.filters.length && (vn.stage.filters = null))
        })
    })), sn.register("test", {
        play: e => {
            const {
                x: t = 0,
                y: s = 0,
                color: a = 16777215
            } = e;
            qa.spawnBurst({
                texture: "/res/particles/box.png",
                tint: a,
                lifetime: [.5, 1.5],
                alpha: {
                    from: 1,
                    to: 0
                },
                speed: {
                    from: [150, 300],
                    to: 0
                },
                scale: sn.utils.scale(.8)
            }, {
                x: t,
                y: s,
                amount: sn.utils.freq(50),
                shape: "circle",
                radius: 100,
                directionOverride: 0,
                angleOverride: 45
            })
        }
    }), sn.register("garbage_beam_impact", {
        play: e => {
            const {
                x: t = 0,
                y: s = 0,
                color: a = 16777215,
                intensity: n = 1
            } = e;
            qa.spawnBurst({
                texture: "/res/particles/beam.png",
                tint: a,
                lifetime: [.05, .1],
                alpha: {
                    from: [.4 + n / 20 * .4, .5 + n / 20 * .5],
                    to: 0
                },
                speed: [1600, 2400],
                blendmode: PIXI.BLEND_MODES.ADD,
                scale: [sn.utils.scale(.1 + n / 20 * .2), .15 + n / 20 * .35]
            }, {
                x: t,
                y: s,
                amount: sn.utils.freq(10),
                shape: "circle",
                radius: 1,
                directionOverride: 0,
                angleOverride: 0
            }), qa.spawnBurst({
                texture: "/res/particles/fire.png",
                tint: a,
                lifetime: [.2, .3],
                alpha: {
                    from: [.3, .5],
                    to: 0
                },
                alphamultiplier: {
                    from: 1,
                    to: 0
                },
                angle: [0, 360],
                anglespeed: [-720, 720],
                direction: [0, 360],
                speed: [0, 80],
                blendmode: PIXI.BLEND_MODES.ADD,
                scale: [sn.utils.scale(.3 + n / 20 * .8), .6 + n / 20 * 1]
            }, {
                x: t,
                y: s,
                amount: 5,
                shape: "point"
            })
        }
    }), sn.register("bgsplash", {
        graphics: ["high", "ultra"],
        play: e => {
            const {
                amt: t = 30,
                direction: s = [0, 360],
                speed: a = [0, 100]
            } = e;
            Wa.spawnBurst({
                texture: "/res/particles/bigbox.png",
                tint: 16777215,
                lifetime: [2, 5],
                alpha: {
                    from: [.02, .15],
                    to: 0
                },
                alphamultiplier: {
                    from: 0,
                    to: 2
                },
                speed: {
                    from: a,
                    to: 0
                },
                direction: s,
                scale: [sn.utils.scale(.02), sn.utils.scale(.2)],
                wrap: !0
            }, {
                shape: "rectangle",
                x: window.innerWidth / 2,
                y: window.innerHeight / 2,
                width: window.innerWidth,
                height: window.innerHeight,
                amount: sn.utils.freq(t)
            })
        }
    }), sn.register("bgsplashdanger", {
        graphics: ["high", "ultra"],
        play: e => {
            const {
                amt: t = 30,
                direction: s = [0, 360],
                speed: a = [0, 100]
            } = e;
            Wa.spawnBurst({
                texture: "/res/particles/bigbox.png",
                tint: 16720384,
                lifetime: [.1, 1],
                alpha: {
                    from: [.02, .15],
                    to: 0
                },
                alphamultiplier: {
                    from: 0,
                    to: 2
                },
                speed: {
                    from: a,
                    to: 0
                },
                direction: s,
                scale: [sn.utils.scale(.02), sn.utils.scale(.3)],
                wrap: !0
            }, {
                shape: "rectangle",
                x: window.innerWidth / 2,
                y: window.innerHeight / 2,
                width: window.innerWidth,
                height: window.innerHeight,
                amount: sn.utils.freq(t)
            })
        }
    }), sn.register("bgtransition", {
        graphics: ["high", "ultra"],
        play: () => {
            Wa.spawnBurst({
                texture: "/res/particles/bigbox.png",
                tint: 16777215,
                lifetime: [.5, 3],
                alpha: {
                    from: [.02, .15],
                    to: 0
                },
                speed: {
                    from: [0, 400],
                    to: [800, 1600]
                },
                scale: {
                    from: 0,
                    to: [sn.utils.scale(.05), sn.utils.scale(.5)]
                }
            }, {
                shape: "rectangle",
                x: window.innerWidth / 2,
                y: window.innerHeight / 2,
                width: window.innerWidth,
                height: window.innerHeight,
                amount: sn.utils.freq(200),
                directionOverride: 0
            })
        }
    }), sn.register("bgcircle", {
        graphics: ["high", "ultra"],
        play: e => {
            const {
                radius: t = ls(10 * Wn.x),
                color: s = 16777215,
                amt: a = 100,
                speed: n = 150
            } = e;
            Wa.spawnBurst({
                texture: "/res/particles/particle.png",
                tint: s,
                lifetime: [.35, 3],
                alpha: {
                    from: [.02, .4],
                    to: 0
                },
                speed: {
                    from: [0, n],
                    to: 0
                },
                scale: [sn.utils.scale(.02), sn.utils.scale(.25)]
            }, {
                shape: "circle",
                x: window.innerWidth / 2,
                y: window.innerHeight / 2,
                radius: t,
                amount: sn.utils.freq(a),
                directionOverride: 0
            })
        }
    }), sn.register("harddrop_trail", {
        graphics: ["high", "ultra"],
        play: e => {
            const {
                x: t = 0,
                y: s = 0,
                color: a = 16777215
            } = e;
            qa.spawnBurst({
                texture: "/res/particles/star.png",
                tint: a,
                lifetime: [.2, 1],
                alpha: {
                    from: [.3, .8],
                    to: 0
                },
                speed: {
                    from: [150, 450],
                    to: [-100, 100]
                },
                direction: [-2, 2],
                xflurry: [0, 50],
                blendmode: PIXI.BLEND_MODES.ADD,
                scale: [sn.utils.scale(.08), sn.utils.scale(.2)]
            }, {
                x: t,
                y: s,
                amount: sn.utils.freq(.25),
                shape: "rectangle",
                width: ls(Wn.x),
                height: ls(Wn.x)
            })
        }
    }), sn.register("harddrop_edge", {
        graphics: ["high", "ultra"],
        play: e => {
            const {
                x: t = 0,
                y: s = 0
            } = e;
            qa.spawnBurst({
                texture: "/res/particles/star.png",
                tint: 16777215,
                lifetime: [.1, .5],
                alpha: {
                    from: [.5, 1],
                    to: 0
                },
                speed: {
                    from: [0, 150],
                    to: [0, 50]
                },
                yspeed: {
                    from: 0,
                    to: 50
                },
                direction: [-45, 45],
                blendmode: PIXI.BLEND_MODES.ADD,
                scale: [sn.utils.scale(.1), sn.utils.scale(.3)]
            }, {
                x: t,
                y: s,
                amount: sn.utils.freq(5),
                shape: "rectangle",
                width: ls(Wn.x),
                height: 0
            })
        }
    }), sn.register("piece_spin", {
        graphics: ["high", "ultra"],
        play: e => {
            const {
                x: t = 0,
                y: s = 0,
                color: a = 16777215,
                direction: n = "none",
                kickX: o = 0,
                kickY: i = 0
            } = e;
            qa.spawnBurst({
                texture: "/res/particles/star.png",
                tint: a,
                lifetime: [.2, 1],
                alpha: {
                    from: [.7, 1],
                    to: 0
                },
                speed: {
                    from: [50, 300],
                    to: [0, 50]
                },
                blendmode: PIXI.BLEND_MODES.ADD,
                scale: [sn.utils.scale(.15), sn.utils.scale(.3)],
                flickerfrequency: {
                    from: [20, 100],
                    to: [10, 20]
                },
                flickeramplitude: {
                    from: [0, .5],
                    to: [0, .1]
                },
                xspeed: {
                    from: [ls(Wn.x) * o * -1, ls(Wn.x) * o * 2],
                    to: [0, 0]
                },
                yspeed: {
                    from: [ls(Wn.x) * i * -1, ls(Wn.x) * i * 2],
                    to: [0, 0]
                }
            }, {
                x: t,
                y: s,
                amount: sn.utils.freq(5),
                shape: "disk",
                width: "horizontal" === n ? 0 : 3 * ls(Wn.x),
                height: "vertical" === n ? 0 : 3 * ls(Wn.x),
                directionOverride: "left" === n ? -110 : "right" === n ? 110 : 0
            })
        }
    }), sn.register("line_burst", {
        play: e => {
            const {
                x: t = 0,
                y: s = 0,
                s: a = 1,
                color: n = 16777215
            } = e;
            (parseFloat(te.video.particles) || .6) >= .15 && qa.spawnBurst({
                texture: "/res/particles/fbox.png",
                tint: n,
                lifetime: [.1 + .3 * Math.min(1, .8 * (parseFloat(te.video.particles) || .6)), .1 + .6 * Math.min(1, .8 * (parseFloat(te.video.particles) || .6))],
                alpha: {
                    from: Math.max(.1, Math.min(1, .6 * (parseFloat(te.video.particles) || .6))),
                    to: 0
                },
                speed: {
                    from: [0, 80],
                    to: [0, 30]
                },
                direction: [0, 360],
                anglespeed: [-20, 20],
                blendmode: PIXI.BLEND_MODES.ADD,
                scale: {
                    from: us(1 * a),
                    to: [us(1 * a), us(1.4 * a)]
                },
                yspeed: {
                    start: [0, -100],
                    inc: [5, 12]
                }
            }, {
                x: t,
                y: s,
                amount: 1,
                shape: "point"
            }), ["high", "ultra"].includes(te.video.graphics) && qa.spawnBurst({
                texture: "/res/particles/chip.png",
                tint: n,
                lifetime: [.2, 1],
                alpha: {
                    from: [.7, 1],
                    to: 0
                },
                speed: {
                    from: [50, 300],
                    to: [0, 50]
                },
                direction: [0, 360],
                blendmode: PIXI.BLEND_MODES.ADD,
                scale: [sn.utils.scale(.1), sn.utils.scale(.25)],
                anglespeed: {
                    from: [-720, 720],
                    to: [-360, 360]
                },
                flickerfrequency: {
                    from: [20, 100],
                    to: [10, 20]
                },
                flickeramplitude: {
                    from: [0, .5],
                    to: [0, .1]
                },
                xspeed: [-500, 500],
                yspeed: {
                    start: [-500, 50],
                    inc: [15, 40]
                }
            }, {
                x: t,
                y: s,
                amount: sn.utils.freq(1.65),
                shape: "rectangle",
                width: ls(Wn.x * a),
                height: ls(Wn.x * a)
            })
        }
    }), sn.register("mino_dust", {
        play: e => {
            const {
                x: t = 0,
                y: s = 0,
                s: a = 1,
                color: n = 16777215
            } = e;
            qa.spawnBurst({
                texture: "/res/particles/dust.png",
                tint: 4473924,
                lifetime: [.3, 1],
                alpha: {
                    from: 1,
                    to: 0
                },
                speed: {
                    from: [0, 50],
                    to: [0, 20]
                },
                direction: [0, 360],
                anglespeed: [-20, 20],
                scale: {
                    from: us(1.5 * a),
                    to: [us(2.5 * a), us(3.5 * a)]
                },
                yspeed: {
                    start: 0,
                    inc: [1, -5]
                }
            }, {
                x: t,
                y: s,
                amount: 1,
                shape: "point"
            }), qa.spawnBurst({
                texture: "/res/particles/dust.png",
                tint: n,
                lifetime: [.3, 1],
                alpha: {
                    from: .8,
                    to: 0
                },
                speed: {
                    from: [0, 50],
                    to: [0, 20]
                },
                direction: [0, 360],
                anglespeed: [-20, 20],
                scale: {
                    from: us(1.5 * a),
                    to: [us(1.5 * a), us(2.5 * a)]
                },
                yspeed: {
                    start: 0,
                    inc: [0, -5]
                }
            }, {
                x: t,
                y: s,
                amount: 1,
                shape: "point"
            }), ["high", "ultra"].includes(te.video.graphics) && qa.spawnBurst({
                texture: "/res/particles/star.png",
                tint: n,
                lifetime: [.2, 1],
                alpha: {
                    from: [.7, 1],
                    to: 0
                },
                speed: {
                    from: [50, 150],
                    to: [0, 50]
                },
                direction: [0, 360],
                blendmode: PIXI.BLEND_MODES.ADD,
                scale: [sn.utils.scale(.15), sn.utils.scale(.3)],
                flickerfrequency: {
                    from: [20, 100],
                    to: [10, 20]
                },
                flickeramplitude: {
                    from: [0, .5],
                    to: [0, .1]
                },
                yspeed: {
                    start: 0,
                    inc: [-3, -10]
                }
            }, {
                x: t,
                y: s,
                amount: sn.utils.freq(1),
                shape: "rectangle",
                width: ls(a * Wn.x),
                height: ls(a * Wn.x)
            })
        }
    }), sn.register("b2b_flair", {
        graphics: ["high", "ultra"],
        play: e => {
            const {
                x: t = 0,
                y: s = 0,
                w: a = 10,
                h: n = 20
            } = e, o = {
                texture: "/res/particles/star.png",
                tint: [16744448, 16777088],
                lifetime: [.2, 1],
                alpha: {
                    from: [.7, 1],
                    to: 0
                },
                speed: {
                    from: [0, 150],
                    to: [0, 50]
                },
                direction: [0, 360],
                blendmode: PIXI.BLEND_MODES.ADD,
                scale: [sn.utils.scale(.15), sn.utils.scale(.3)],
                flickerfrequency: {
                    from: [20, 100],
                    to: [10, 20]
                },
                flickeramplitude: {
                    from: [0, .5],
                    to: [0, .1]
                }
            };
            qa.spawnBurst({
                ...o,
                xspeed: -60
            }, {
                x: t,
                y: s,
                amount: sn.utils.freq(5 * n),
                shape: "line",
                linePointA: [0, 0],
                linePointB: [0, ls(Wn.x * n)]
            }), qa.spawnBurst({
                ...o,
                xspeed: 60
            }, {
                x: t,
                y: s,
                amount: sn.utils.freq(5 * n),
                shape: "line",
                linePointA: [ls(Wn.x * a), 0],
                linePointB: [ls(Wn.x * a), ls(Wn.x * n)]
            }), qa.spawnBurst({
                ...o,
                yspeed: 60
            }, {
                x: t,
                y: s,
                amount: sn.utils.freq(5 * a),
                shape: "line",
                linePointA: [0, ls(Wn.x * n)],
                linePointB: [ls(Wn.x * a), ls(Wn.x * n)]
            })
        }
    }), sn.register("spike_flair", {
        graphics: ["high", "ultra"],
        play: e => {
            const {
                x: t = 0,
                y: s = 0,
                w: a = 10,
                h: n = 20
            } = e;
            qa.spawnBurst({
                texture: "/res/particles/star.png",
                tint: 16777215,
                lifetime: [.5, 1.5],
                alpha: {
                    from: [.6, .8],
                    to: 0
                },
                speed: {
                    from: [0, 150],
                    to: [0, 50]
                },
                direction: [0, 360],
                blendmode: PIXI.BLEND_MODES.ADD,
                scale: [sn.utils.scale(.1), sn.utils.scale(.25)],
                flickerfrequency: {
                    from: [10, 50],
                    to: [10, 20]
                },
                flickeramplitude: {
                    from: [0, .6],
                    to: [0, .3]
                },
                flurryfrequency: {
                    from: [5, 30],
                    to: [2, 10]
                },
                flurryamplitude: {
                    from: [-130, 130],
                    to: [-30, 30]
                }
            }, {
                x: t,
                y: s,
                amount: sn.utils.freq(100),
                shape: "rectangle",
                width: ls(Wn.x * a),
                height: ls(Wn.x * n)
            })
        }
    }), sn.register("danger_flair", {
        graphics: ["high", "ultra"],
        play: e => {
            const {
                x: t = 0,
                y: s = 0,
                w: a = 10,
                h: n = 20
            } = e;
            qa.spawnBurst({
                texture: "/res/particles/particle.png",
                tint: [16711680, 16737792],
                lifetime: [.5, 1.5],
                alpha: {
                    from: [.6, .8],
                    to: 0
                },
                speed: {
                    from: [0, 150],
                    to: [0, 50]
                },
                direction: [0, 360],
                blendmode: PIXI.BLEND_MODES.ADD,
                scale: [sn.utils.scale(.05), sn.utils.scale(.1)],
                flickerfrequency: {
                    from: [10, 50],
                    to: [10, 20]
                },
                flickeramplitude: {
                    from: [0, .6],
                    to: [0, .3]
                },
                flurryfrequency: {
                    from: [5, 30],
                    to: [2, 10]
                },
                flurryamplitude: {
                    from: [-130, 130],
                    to: [-30, 30]
                },
                yspeed: {
                    from: 0,
                    to: [-25, -200]
                }
            }, {
                x: t,
                y: s,
                amount: sn.utils.freq(100),
                shape: "rectangle",
                width: ls(Wn.x * a),
                height: ls(Wn.x * n)
            }), qa.spawnBurst({
                texture: "/res/particles/smoke.png",
                tint: 3342336,
                lifetime: [1, 2],
                alpha: {
                    from: 1,
                    to: 0
                },
                speed: {
                    from: [0, 20],
                    to: 0
                },
                direction: [0, 360],
                blendmode: PIXI.BLEND_MODES.ADD,
                anglespeed: [-20, 20],
                scale: {
                    from: us(1.5),
                    to: [us(2.5), us(3.5)]
                }
            }, {
                x: t,
                y: s,
                amount: sn.utils.freq(a),
                shape: "line",
                linePointA: [ls(Wn.x * a / -2), ls(Wn.x * n / -2)],
                linePointB: [ls(Wn.x * a / 2), ls(Wn.x * n / -2)]
            })
        }
    }), sn.register("danger_smoke", {
        play: e => {
            const {
                x: t = 0,
                y: s = 0,
                w: a = 10,
                h: n = 20
            } = e, o = {
                texture: "/res/particles/smoke.png",
                tint: [3342336, 2236928],
                lifetime: [.6, 1],
                alpha: {
                    from: 1,
                    to: 0
                },
                speed: {
                    from: [200, 300],
                    to: 0
                },
                anglespeed: [-20, 20],
                scale: {
                    from: us(.4),
                    to: [us(2.5), us(4.5)]
                }
            }, i = {
                texture: "/res/particles/smoke.png",
                tint: {
                    from: [16776960, 16777215],
                    to: [16711680, 16729088]
                },
                lifetime: [.4, .6],
                alpha: {
                    from: 1,
                    to: 0
                },
                speed: {
                    from: [200, 300],
                    to: 0
                },
                blendmode: PIXI.BLEND_MODES.ADD,
                anglespeed: [-20, 20],
                scale: {
                    from: us(.4),
                    to: [us(1.5), us(3.5)]
                }
            };
            Wa.spawnBurst({
                ...o,
                direction: [-60, -30]
            }, {
                x: t,
                y: s,
                amount: sn.utils.freq(1),
                shape: "point"
            }), qa.spawnBurst({
                ...i,
                direction: [-60, -30]
            }, {
                x: t,
                y: s,
                amount: sn.utils.freq(1),
                shape: "point"
            }), Wa.spawnBurst({
                ...o,
                direction: [30, 60]
            }, {
                x: t + ls(Wn.x * a),
                y: s,
                amount: sn.utils.freq(1),
                shape: "point"
            }), qa.spawnBurst({
                ...i,
                direction: [30, 60]
            }, {
                x: t + ls(Wn.x * a),
                y: s,
                amount: sn.utils.freq(1),
                shape: "point"
            }), Wa.spawnBurst({
                ...o,
                direction: [210, 240]
            }, {
                x: t,
                y: s + ls(Wn.x * n),
                amount: sn.utils.freq(1),
                shape: "point"
            }), qa.spawnBurst({
                ...i,
                direction: [210, 240]
            }, {
                x: t,
                y: s + ls(Wn.x * n),
                amount: sn.utils.freq(1),
                shape: "point"
            }), Wa.spawnBurst({
                ...o,
                direction: [120, 150]
            }, {
                x: t + ls(Wn.x * a),
                y: s + ls(Wn.x * n),
                amount: sn.utils.freq(1),
                shape: "point"
            }), qa.spawnBurst({
                ...i,
                direction: [120, 150]
            }, {
                x: t + ls(Wn.x * a),
                y: s + ls(Wn.x * n),
                amount: sn.utils.freq(1),
                shape: "point"
            })
        }
    }), sn.register("death_flair", {
        graphics: ["high", "ultra"],
        play: e => {
            const {
                x: t = 0,
                y: s = 0,
                w: a = 10,
                h: n = 20
            } = e;
            qa.spawnBurst({
                texture: "/res/particles/chirp.png",
                tint: [16746751, 16711680],
                lifetime: [.2, 2],
                alpha: {
                    from: [.7, 1],
                    to: 0
                },
                speed: {
                    from: [0, 1e3],
                    to: [0, 200]
                },
                blendmode: PIXI.BLEND_MODES.ADD,
                scale: [sn.utils.scale(.15), sn.utils.scale(.5)],
                flickerfrequency: {
                    from: [20, 100],
                    to: [10, 20]
                },
                flickeramplitude: {
                    from: [0, .5],
                    to: [0, .1]
                }
            }, {
                x: t,
                y: s,
                amount: sn.utils.freq(100),
                shape: "box",
                width: ls(Wn.x * a),
                height: ls(Wn.x * n),
                directionOverride: 0,
                angleOverride: 0
            }), qa.spawnBurst({
                texture: "/res/particles/star.png",
                tint: 16777215,
                lifetime: [.2, 1],
                alpha: {
                    from: [.7, 1],
                    to: 0
                },
                speed: {
                    from: [0, 300],
                    to: [0, 50]
                },
                blendmode: PIXI.BLEND_MODES.ADD,
                scale: [sn.utils.scale(.15), sn.utils.scale(.5)],
                flickerfrequency: {
                    from: [20, 100],
                    to: [10, 20]
                },
                flickeramplitude: {
                    from: [0, .5],
                    to: [0, .1]
                }
            }, {
                x: t,
                y: s,
                amount: sn.utils.freq(100),
                shape: "box",
                width: ls(Wn.x * a),
                height: ls(Wn.x * n),
                directionOverride: 0
            })
        }
    }), sn.register("fire_flair", {
        graphics: ["high", "ultra"],
        play: e => {
            const {
                x: t = 0,
                y: s = 0,
                w: a = 10,
                h: n = 20
            } = e, o = {
                texture: "/res/particles/particle.png",
                tint: [16736256, 16777088],
                lifetime: [.2, 3],
                alpha: {
                    from: [.7, 1],
                    to: 0
                },
                alphamultiplier: {
                    from: 0,
                    to: 2
                },
                speed: {
                    from: [0, 75],
                    to: [0, 25]
                },
                direction: [0, 360],
                blendmode: PIXI.BLEND_MODES.ADD,
                scale: [sn.utils.scale(.3), sn.utils.scale(.9)]
            };
            qa.spawnBurst({
                ...o,
                xspeed: -20
            }, {
                x: t,
                y: s,
                amount: sn.utils.freq(5 * n),
                shape: "line",
                linePointA: [0, 0],
                linePointB: [0, ls(Wn.x * n)]
            }), qa.spawnBurst({
                ...o,
                xspeed: 20
            }, {
                x: t,
                y: s,
                amount: sn.utils.freq(5 * n),
                shape: "line",
                linePointA: [ls(Wn.x * a), 0],
                linePointB: [ls(Wn.x * a), ls(Wn.x * n)]
            }), qa.spawnBurst({
                ...o,
                yspeed: 20
            }, {
                x: t,
                y: s,
                amount: sn.utils.freq(5 * a),
                shape: "line",
                linePointA: [0, ls(Wn.x * n)],
                linePointB: [ls(Wn.x * a), ls(Wn.x * n)]
            })
        }
    }), sn.register("fire_burn", {
        graphics: ["high", "ultra"],
        play: e => {
            const {
                x: t = 0,
                y: s = 0,
                w: a = 10,
                h: n = 20
            } = e, o = {
                texture: "/res/particles/particle.png",
                tint: [16736256, 16777088],
                lifetime: [.2, 3],
                alpha: {
                    from: [.7, 1],
                    to: 0
                },
                alphamultiplier: {
                    from: 0,
                    to: 2
                },
                speed: {
                    from: [0, 75],
                    to: [0, 25]
                },
                direction: [0, 360],
                blendmode: PIXI.BLEND_MODES.ADD,
                scale: [sn.utils.scale(.05), sn.utils.scale(.2)]
            };
            qa.spawnBurst({
                ...o,
                xspeed: -20
            }, {
                x: t,
                y: s,
                amount: sn.utils.freq(.05 * n),
                shape: "line",
                linePointA: [0, 0],
                linePointB: [0, ls(Wn.x * n)]
            }), qa.spawnBurst({
                ...o,
                xspeed: 20
            }, {
                x: t,
                y: s,
                amount: sn.utils.freq(.05 * n),
                shape: "line",
                linePointA: [ls(Wn.x * a), 0],
                linePointB: [ls(Wn.x * a), ls(Wn.x * n)]
            }), qa.spawnBurst({
                ...o,
                yspeed: 20
            }, {
                x: t,
                y: s,
                amount: sn.utils.freq(.05 * a),
                shape: "line",
                linePointA: [0, ls(Wn.x * n)],
                linePointB: [ls(Wn.x * a), ls(Wn.x * n)]
            }), Wa.spawnBurst({
                texture: "/res/particles/fire.png",
                tint: [16736256, 16777088],
                lifetime: [.2, 3],
                alpha: {
                    from: [.4, .9],
                    to: 0
                },
                alphamultiplier: {
                    from: 0,
                    to: 3
                },
                speed: {
                    from: [0, 75],
                    to: [0, 25]
                },
                direction: [0, 360],
                blendmode: PIXI.BLEND_MODES.ADD,
                scale: [sn.utils.scale(.3), sn.utils.scale(2.5)],
                flurryfrequency: {
                    from: [5, 30],
                    to: [2, 10]
                },
                flurryamplitude: {
                    from: [-130, 130],
                    to: [-30, 30]
                },
                yspeed: {
                    from: [100, -50],
                    to: [-100, -300]
                },
                angle: [0, 360],
                anglespeed: [-200, 200]
            }, {
                x: t + ls(Wn.x * a / 2),
                y: s + ls(Wn.x * n / 2),
                amount: sn.utils.freq(a * n * 1 / 200),
                shape: "rectangle",
                width: ls(Wn.x * a),
                height: ls(Wn.x * n)
            })
        }
    }), sn.register("fire_burning", {
        graphics: ["high", "ultra"],
        play: e => {
            const {
                x: t = 0,
                y: s = 0
            } = e;
            Wa.createSpawner({
                texture: "/res/particles/fire.png",
                tint: [16736256, 16777088],
                lifetime: [.2, 3],
                alpha: {
                    from: [.4, .9],
                    to: 0
                },
                alphamultiplier: {
                    from: 0,
                    to: 3
                },
                speed: {
                    from: [0, 25],
                    to: [0, 10]
                },
                direction: [0, 360],
                blendmode: PIXI.BLEND_MODES.ADD,
                scale: [sn.utils.scale(.2), sn.utils.scale(.7)],
                flurryfrequency: {
                    from: [5, 30],
                    to: [2, 10]
                },
                flurryamplitude: {
                    from: [-130, 130],
                    to: [-30, 30]
                },
                yspeed: {
                    from: [30, -15],
                    to: [-30, -100]
                },
                angle: [0, 360],
                anglespeed: [-200, 200]
            }, {
                x: t,
                y: s,
                amount: sn.utils.freq(20),
                lifetime: 2,
                shape: "rectangle",
                width: ls(2 * Wn.x),
                height: ls(2 * Wn.x)
            })
        }
    }), sn.register("bar_sparks", {
        graphics: ["high", "ultra"],
        play: e => {
            const {
                x: t = 0,
                y: s = 0,
                w: a = 0,
                color: n = 16777215,
                dT: o = 1
            } = e;
            qa.spawnBurst({
                texture: "/res/particles/star.png",
                tint: n,
                lifetime: [.2, 1],
                alpha: {
                    from: [.3, .8],
                    to: 0
                },
                speed: {
                    from: [150, 450],
                    to: [-100, 100]
                },
                direction: [-2, 2],
                xflurry: [0, 50],
                scale: [sn.utils.scale(.08), sn.utils.scale(.2)]
            }, {
                x: t,
                y: s,
                amount: sn.utils.freq(.15 * o),
                shape: "rectangle",
                width: a,
                height: 0
            })
        }
    }), sn.register("stock_explode", {
        play: e => {
            const {
                x: t = 0,
                y: s = 0
            } = e;
            qa.spawnBurst({
                texture: "/res/particles/dust.png",
                tint: 4473924,
                lifetime: [.3, 1],
                alpha: {
                    from: 1,
                    to: 0
                },
                speed: {
                    from: [0, 50],
                    to: [0, 20]
                },
                direction: [0, 360],
                anglespeed: [-20, 20],
                scale: {
                    from: us(1.5),
                    to: [us(2.5), us(3.5)]
                },
                yspeed: {
                    start: 0,
                    inc: [1, -5]
                }
            }, {
                x: t,
                y: s,
                amount: 1,
                shape: "point"
            }), qa.spawnBurst({
                texture: "/res/particles/dust.png",
                tint: 16777215,
                lifetime: [.3, 1],
                alpha: {
                    from: .8,
                    to: 0
                },
                speed: {
                    from: [0, 50],
                    to: [0, 20]
                },
                direction: [0, 360],
                anglespeed: [-20, 20],
                scale: {
                    from: us(1.5),
                    to: [us(1.5), us(2.5)]
                },
                yspeed: {
                    start: 0,
                    inc: [0, -5]
                }
            }, {
                x: t,
                y: s,
                amount: 1,
                shape: "point"
            }), ["high", "ultra"].includes(te.video.graphics) && qa.spawnBurst({
                texture: "/res/particles/star.png",
                tint: 16777215,
                lifetime: [.4, 1.5],
                alpha: {
                    from: [.7, 1],
                    to: 0
                },
                speed: {
                    from: [0, 150],
                    to: [0, 50]
                },
                direction: [0, 360],
                blendmode: PIXI.BLEND_MODES.ADD,
                scale: [sn.utils.scale(.15), sn.utils.scale(.3)],
                flickerfrequency: {
                    from: [20, 100],
                    to: [10, 20]
                },
                flickeramplitude: {
                    from: [0, .5],
                    to: [0, .1]
                },
                yspeed: {
                    start: 0,
                    inc: [-3, -10]
                }
            }, {
                x: t,
                y: s,
                amount: sn.utils.freq(25),
                shape: "rectangle",
                width: ls(Wn.x),
                height: ls(Wn.x)
            })
        }
    }), sn.register("confetti", {
        graphics: ["high", "ultra"],
        play: e => {
            const {
                gui: t = !1,
                count: s = 40,
                hue: a = [0, 360]
            } = e;
            if (!t || kn && "ultra" === te.video.graphics)
                for (let e = 0; e < s; e++) {
                    const e = Math.random() * (a[1] - a[0]) + a[0],
                        s = Math.random() > .5,
                        n = (.3 + .65 * Math.random()) * window.innerHeight,
                        o = (.05 + .4 * Math.random()) * window.innerWidth,
                        i = new Moonbeam.Beam({
                            texture: PIXI.Texture.WHITE,
                            mode: "path",
                            path: [new PIXI.Point(s ? window.innerWidth + 30 * Math.random() : -30 * Math.random(), window.innerHeight + 30 * Math.random()), new PIXI.Point(s ? window.innerWidth - o : o, window.innerHeight - n), new PIXI.Point(s ? window.innerWidth - 2 * o : 2 * o, window.innerHeight + n)],
                            vertices: 10,
                            length: 5 + 20 * Math.random(),
                            duration: .7 + 1 * Math.random(),
                            tint: un(e, 100, 50),
                            blendMode: PIXI.BLEND_MODES.ADD,
                            scale: .2,
                            smoothPath: !0,
                            smoothVertices: !0,
                            repeatTexture: !1,
                            reverse: !1,
                            pathBezier: BezierEasing(.08, .7, .6, .26),
                            jitter: 5 + 20 * Math.random()
                        });
                    (t ? kn.stage : an).addChild(i)
                }
        }
    }), sn.register("waterfall", {
        graphics: ["high", "ultra"],
        play: e => {
            const {
                x: t = 0,
                y: s = 0,
                w: a = 0,
                h: n = 0,
                color: o = 16777215
            } = e, i = {
                texture: "/res/particles/star.png",
                tint: o,
                lifetime: 1,
                alpha: {
                    from: 1,
                    to: 0
                },
                y: s
            };
            ("ultra" === te.video.graphics ? Ka : qa).spawnOne({
                ...i,
                x: t - a / 2 - 16,
                direction: -90,
                scale: .8,
                speed: {
                    from: 100,
                    to: 0
                }
            }), ("ultra" === te.video.graphics ? Ka : qa).spawnOne({
                ...i,
                x: t + a / 2 + 16,
                direction: 90,
                scale: .8,
                speed: {
                    from: 100,
                    to: 0
                }
            }), ("ultra" === te.video.graphics ? Ka : qa).spawnOne({
                ...i,
                x: t - a / 2 - 48,
                direction: -90,
                scale: .6,
                speed: {
                    from: 150,
                    to: 0
                }
            }), ("ultra" === te.video.graphics ? Ka : qa).spawnOne({
                ...i,
                x: t + a / 2 + 48,
                direction: 90,
                scale: .6,
                speed: {
                    from: 150,
                    to: 0
                }
            })
        }
    }), sn.register("button_ultra", {
        graphics: ["ultra"],
        play: e => {
            const {
                x: t = 0,
                y: s = 0,
                w: a = 0,
                h: n = 0,
                color: o = 16777215,
                amt: i = 50
            } = e;
            Ka.spawnBurst({
                texture: "/res/particles/star.png",
                tint: o,
                lifetime: [.2, 1],
                alpha: {
                    from: [.7, 1],
                    to: 0
                },
                speed: {
                    from: [0, 300],
                    to: [0, 50]
                },
                blendmode: PIXI.BLEND_MODES.ADD,
                scale: [sn.utils.scale(.15), sn.utils.scale(.5)],
                flickerfrequency: {
                    from: [20, 100],
                    to: [10, 20]
                },
                flickeramplitude: {
                    from: [0, .5],
                    to: [0, .1]
                }
            }, {
                x: t + a / 2,
                y: s + n / 2,
                amount: sn.utils.freq(i / 2),
                shape: "box",
                width: a,
                height: n,
                directionOverride: 0
            }), Ka.spawnBurst({
                texture: "/res/particles/star.png",
                tint: 16777215,
                lifetime: [.2, .5],
                alpha: {
                    from: [.7, 1],
                    to: 0
                },
                speed: {
                    from: [0, 1200],
                    to: [0, 600]
                },
                blendmode: PIXI.BLEND_MODES.ADD,
                scale: [sn.utils.scale(.1), sn.utils.scale(.3)],
                flickerfrequency: {
                    from: [20, 200],
                    to: [10, 20]
                },
                flickeramplitude: {
                    from: [0, .5],
                    to: [0, .1]
                }
            }, {
                x: t + a / 2,
                y: s + n / 2,
                amount: sn.utils.freq(2 * i),
                shape: "box",
                width: a,
                height: n,
                directionOverride: 0
            })
        }
    }), sn.register("xp_ultra", {
        graphics: ["ultra"],
        play: e => {
            const {
                x: t = 0,
                y: s = 0,
                w: a = 0,
                h: n = 0
            } = e;
            Ka.spawnBurst({
                texture: "/res/particles/star.png",
                tint: [16746496, 16777028],
                lifetime: [.6, 2.5],
                alpha: {
                    from: [.7, 1],
                    to: 0
                },
                speed: {
                    from: [0, 600],
                    to: 0
                },
                blendmode: PIXI.BLEND_MODES.ADD,
                scale: [sn.utils.scale(.15), sn.utils.scale(.5)],
                flickerfrequency: {
                    from: [20, 100],
                    to: [10, 20]
                },
                flickeramplitude: {
                    from: [0, .5],
                    to: [0, .1]
                }
            }, {
                x: t + a / 2,
                y: s + n / 2,
                amount: sn.utils.freq(100),
                shape: "box",
                width: a,
                height: n,
                directionOverride: 0
            }), Ka.spawnBurst({
                texture: "/res/particles/star.png",
                tint: 16777215,
                lifetime: [.6, 1.5],
                alpha: {
                    from: [.7, 1],
                    to: 0
                },
                speed: {
                    from: [0, 2400],
                    to: [0, 300]
                },
                blendmode: PIXI.BLEND_MODES.ADD,
                scale: [sn.utils.scale(.1), sn.utils.scale(.3)],
                flickerfrequency: {
                    from: [20, 200],
                    to: [10, 20]
                },
                flickeramplitude: {
                    from: [0, .5],
                    to: [0, .1]
                }
            }, {
                x: t + a / 2,
                y: s + n / 2,
                amount: sn.utils.freq(200),
                shape: "box",
                width: a,
                height: n,
                directionOverride: 0
            }), Ka.createSpawner({
                texture: "/res/particles/star.png",
                tint: [16746496, 16777028],
                lifetime: [.2, 1],
                alpha: {
                    from: 1,
                    to: 0
                },
                alphamultiplier: {
                    from: 0,
                    to: 3
                },
                speed: {
                    from: [0, 20],
                    to: [0, 20]
                },
                direction: [0, 360],
                blendmode: PIXI.BLEND_MODES.ADD,
                scale: [sn.utils.scale(.1), sn.utils.scale(.3)]
            }, {
                x: t + a / 2,
                y: s + n / 2,
                amount: sn.utils.freq(10),
                lifetime: 6,
                shape: "rectangle",
                width: a,
                height: n
            })
        }
    }), sn.register("mm_ultra", {
        graphics: ["ultra"],
        play: e => {
            const t = {
                texture: "/res/particles/beam.png",
                tint: 16777215,
                lifetime: .6,
                alpha: 1,
                speed: [2 * window.innerWidth, 5 * window.innerWidth],
                blendmode: PIXI.BLEND_MODES.ADD,
                scale: [sn.utils.scale(.2), sn.utils.scale(.4)]
            };
            Ka.createSpawner({
                ...t,
                direction: -90,
                angle: -90
            }, {
                x: 0,
                y: 0,
                amount: sn.utils.freq(50),
                shape: "line",
                linePointA: [window.innerWidth + 200, 0],
                linePointB: [window.innerWidth + 200, window.innerHeight / 2],
                lifetime: 3.4
            }), Ka.createSpawner({
                ...t,
                direction: 90,
                angle: 90
            }, {
                x: 0,
                y: 0,
                amount: sn.utils.freq(50),
                shape: "line",
                linePointA: [-200, window.innerHeight / 2],
                linePointB: [-200, window.innerHeight],
                lifetime: 3.4
            }), setTimeout(() => {
                Ka.spawnBurst({
                    texture: "/res/particles/star.png",
                    tint: 16777215,
                    lifetime: [.6, 1.5],
                    alpha: {
                        from: [.7, 1],
                        to: 0
                    },
                    speed: {
                        from: [0, 1200],
                        to: [0, 300]
                    },
                    blendmode: PIXI.BLEND_MODES.ADD,
                    direction: [0, 360],
                    scale: [sn.utils.scale(.1), sn.utils.scale(.3)],
                    flickerfrequency: {
                        from: [20, 200],
                        to: [10, 20]
                    },
                    flickeramplitude: {
                        from: [0, .5],
                        to: [0, .1]
                    }
                }, {
                    x: 0,
                    y: 0,
                    amount: sn.utils.freq(200),
                    shape: "line",
                    linePointA: [0, .6 * window.innerHeight],
                    linePointB: [window.innerWidth, .4 * window.innerHeight]
                });
                const e = {
                    texture: "/res/particles/fire.png",
                    tint: [16736256, 16777088],
                    lifetime: [1.5, 3],
                    alpha: {
                        from: [.05, .1],
                        to: 0
                    },
                    alphamultiplier: {
                        from: 0,
                        to: 3
                    },
                    speed: {
                        from: [0, 350],
                        to: [0, 700]
                    },
                    blendmode: PIXI.BLEND_MODES.ADD,
                    scale: [sn.utils.scale(1.2), sn.utils.scale(4.5)],
                    flurryfrequency: {
                        from: [5, 30],
                        to: [2, 10]
                    },
                    flurryamplitude: {
                        from: [-130, 130],
                        to: [-30, 30]
                    },
                    angle: [0, 360],
                    anglespeed: [-200, 200]
                };
                Ka.createSpawner({
                    ...e,
                    direction: [-45, 45],
                    tint: [255, 4521983]
                }, {
                    x: 0,
                    y: 0,
                    amount: sn.utils.freq(100),
                    shape: "line",
                    linePointA: [0, .4 * window.innerHeight],
                    linePointB: [window.innerWidth, .2 * window.innerHeight],
                    lifetime: 8.5
                }), Ka.createSpawner({
                    ...e,
                    direction: [135, 225],
                    tint: [16711680, 16746496]
                }, {
                    x: 0,
                    y: 0,
                    amount: sn.utils.freq(100),
                    shape: "line",
                    linePointA: [0, .8 * window.innerHeight],
                    linePointB: [window.innerWidth, .6 * window.innerHeight],
                    lifetime: 8.5
                })
            }, 3443)
        }
    }), sn.register("scoreslide_ultra", {
        graphics: ["ultra"],
        play: e => {
            const {
                right: t = !1
            } = e;
            Ka.createSpawner({
                texture: "/res/particles/fire.png",
                tint: t ? [16711680, 16746496] : [255, 4521983],
                lifetime: [1.5, 3],
                alpha: {
                    from: [.05, .1],
                    to: 0
                },
                alphamultiplier: {
                    from: 0,
                    to: 3
                },
                speed: {
                    from: [0, 1e3],
                    to: [0, 1800]
                },
                direction: t ? [45, 135] : [225, 315],
                blendmode: PIXI.BLEND_MODES.ADD,
                scale: [sn.utils.scale(1.2), sn.utils.scale(4.5)],
                flurryfrequency: {
                    from: [5, 30],
                    to: [2, 10]
                },
                flurryamplitude: {
                    from: [-30, 30],
                    to: [-30, 30]
                },
                angle: [0, 360],
                anglespeed: [-200, 200]
            }, {
                x: 0,
                y: 0,
                amount: sn.utils.freq(100),
                shape: "line",
                linePointA: [window.innerWidth / 2 + (t ? 100 : -100), 0],
                linePointB: [window.innerWidth / 2 + (t ? 100 : -100), window.innerHeight],
                lifetime: 2.5
            })
        }
    }), sn.register("zen_wormhole", {
        play: () => {
            qa.createSpawner({
                texture: "/res/particles/smoke.png",
                tint: 16777215,
                lifetime: [1, 2],
                alpha: {
                    from: [.2, .5],
                    to: 0
                },
                alphamultiplier: {
                    from: 0,
                    to: 4
                },
                speed: {
                    from: [0, 200],
                    to: [0, 200]
                },
                direction: [0, 360],
                blendmode: PIXI.BLEND_MODES.ADD,
                scale: {
                    start: [sn.utils.scale(.5), sn.utils.scale(2.5)],
                    inc: [0, .01]
                }
            }, {
                x: window.innerWidth / 2,
                y: window.innerHeight / 2,
                amount: sn.utils.freq(40),
                shape: "rectangle",
                width: window.innerWidth,
                height: 0,
                lifetime: 4.4
            }), qa.createSpawner({
                texture: "/res/particles/smoke.png",
                tint: 16777215,
                lifetime: [.6, 1.2],
                alpha: {
                    from: [.2, .7],
                    to: 0
                },
                alphamultiplier: {
                    from: 0,
                    to: 4
                },
                speed: {
                    from: [0, 400],
                    to: [0, 400]
                },
                direction: [0, 360],
                blendmode: PIXI.BLEND_MODES.ADD,
                scale: {
                    start: [sn.utils.scale(.3), sn.utils.scale(.8)]
                }
            }, {
                x: window.innerWidth / 2,
                y: window.innerHeight / 2,
                amount: sn.utils.freq(40),
                shape: "rectangle",
                width: window.innerWidth,
                height: 0,
                lifetime: 4.4
            });
            const e = {
                texture: "/res/particles/beam.png",
                tint: 16777215,
                lifetime: [.1, .3],
                alpha: {
                    from: [.4, 1],
                    to: 0
                },
                alphamultiplier: {
                    from: 0,
                    to: 4
                },
                speed: {
                    from: [2400, 3200],
                    to: [3200, 4e3]
                },
                blendmode: PIXI.BLEND_MODES.ADD,
                scale: {
                    start: [sn.utils.scale(.2), sn.utils.scale(.4)]
                }
            };
            qa.createSpawner(e, {
                x: window.innerWidth / 2,
                y: window.innerHeight,
                amount: sn.utils.freq(500),
                shape: "line",
                linePointA: [window.innerWidth / -2, window.innerHeight / -2 - 64],
                linePointB: [window.innerWidth / 2, window.innerHeight / -2 - 64],
                angleOverride: 0,
                directionOverride: 0,
                lifetime: 4.4
            }), qa.createSpawner(e, {
                x: window.innerWidth / 2,
                y: 0,
                amount: sn.utils.freq(500),
                shape: "line",
                linePointA: [window.innerWidth / -2, window.innerHeight / 2 + 64],
                linePointB: [window.innerWidth / 2, window.innerHeight / 2 + 64],
                angleOverride: 0,
                directionOverride: 0,
                lifetime: 4.4
            });
            const t = {
                texture: "/res/particles/particle.png",
                tint: 16777215,
                lifetime: [.3, .8],
                alpha: {
                    from: [.6, 1],
                    to: 0
                },
                alphamultiplier: {
                    from: 0,
                    to: 4
                },
                speed: {
                    from: [600, 1600],
                    to: [1200, 2e3]
                },
                blendmode: PIXI.BLEND_MODES.ADD,
                scale: {
                    start: [sn.utils.scale(.05), sn.utils.scale(.2)]
                },
                flickerfrequency: {
                    from: [20, 100],
                    to: [10, 20]
                },
                flickeramplitude: {
                    from: [0, .5],
                    to: [0, .1]
                }
            };
            qa.createSpawner(t, {
                x: window.innerWidth / 2,
                y: window.innerHeight,
                amount: sn.utils.freq(500),
                shape: "line",
                linePointA: [window.innerWidth / -2, window.innerHeight / -2 - 16],
                linePointB: [window.innerWidth / 2, window.innerHeight / -2 - 16],
                angleOverride: 0,
                directionOverride: 0,
                lifetime: 4.4
            }), qa.createSpawner(t, {
                x: window.innerWidth / 2,
                y: 0,
                amount: sn.utils.freq(500),
                shape: "line",
                linePointA: [window.innerWidth / -2, window.innerHeight / 2 + 16],
                linePointB: [window.innerWidth / 2, window.innerHeight / 2 + 16],
                angleOverride: 0,
                directionOverride: 0,
                lifetime: 4.4
            })
        }
    }), sn.register("zen_wormhole_exit", {
        play: () => {
            qa.spawnBurst({
                texture: "/res/particles/smoke.png",
                tint: 16777215,
                lifetime: [1.6, 3.4],
                alpha: {
                    from: [.5, 1],
                    to: 0
                },
                alphamultiplier: {
                    from: 0,
                    to: 4
                },
                speed: {
                    from: [0, 400],
                    to: [0, 400]
                },
                direction: [0, 360],
                blendmode: PIXI.BLEND_MODES.ADD,
                scale: {
                    start: [sn.utils.scale(.3), sn.utils.scale(.8)]
                }
            }, {
                x: window.innerWidth / 2,
                y: window.innerHeight / 2,
                amount: sn.utils.freq(40),
                shape: "rectangle",
                width: window.innerWidth,
                height: 0
            }), qa.spawnBurst({
                texture: "/res/particles/particle.png",
                tint: 16777215,
                lifetime: [2.6, 5.6],
                alpha: {
                    from: [.5, 1],
                    to: 0
                },
                alphamultiplier: {
                    from: 0,
                    to: 4
                },
                speed: {
                    from: [0, 400],
                    to: [0, 400]
                },
                direction: [0, 360],
                blendmode: PIXI.BLEND_MODES.ADD,
                scale: {
                    start: [sn.utils.scale(.05), sn.utils.scale(.3)]
                }
            }, {
                x: window.innerWidth / 2,
                y: window.innerHeight / 2,
                amount: sn.utils.freq(80),
                shape: "rectangle",
                width: window.innerWidth,
                height: window.innerHeight
            })
        }
    });
    const mn = (() => {
        const e = {};
        let t = 0;

        function s(t) {
            e[t] && (e[t].obj.destroy(), e[t].leader && leader.destroy(), delete e[t])
        }
        return {
            create: function(s) {
                let {
                    pointA: a = [0, 0],
                    pointB: n = [0, 0],
                    type: o = "garbage",
                    intensity: i = 1,
                    duration: r = 1,
                    length: l = 45,
                    layer: c = "front"
                } = s;
                if ("minimal" === te.video.graphics) return;
                if ("gui" === c && (!kn || "ultra" !== te.video.graphics)) return;
                const d = {
                        gui: kn ? kn.stage : null,
                        front: an,
                        back: En
                    } [c],
                    p = {
                        gui: Ka,
                        front: qa,
                        back: Wa
                    } [c],
                    u = ++t,
                    m = un(360 * Math.random(), 100, 50);
                i = Math.max(1, Math.min(20, i));
                let g = void 0;
                ["high", "ultra"].includes(te.video.graphics) && (g = p.createSpawner({
                    texture: "/res/particles/star.png",
                    tint: m,
                    lifetime: [.4, .7],
                    alpha: {
                        from: 1,
                        to: 0
                    },
                    speed: {
                        from: [0, 100 + i / 20 * 300],
                        to: 0
                    },
                    anglespeed: {
                        from: [0, 400 + i / 20 * 1600],
                        to: 0
                    },
                    direction: [0, 360],
                    angle: [0, 360],
                    blendmode: PIXI.BLEND_MODES.ADD,
                    scale: [sn.utils.scale(.2 + i / 20 * .2), .3 + i / 20 * .2]
                }, {
                    x: a[0],
                    y: a[1],
                    amount: sn.utils.freq(10 + i / 20 * 60),
                    shape: "point",
                    lifetime: -1
                }));
                const h = new Moonbeam.Beam({
                    texture: "/res/particles/beams/beam.png",
                    mode: "path",
                    path: [new PIXI.Point(a[0], a[1]), new PIXI.Point((n[0] + a[0]) / 2 + (Math.random() - .5) * (n[0] - a[0]) + (Math.random() - .5) * (window.innerWidth / 10), (n[1] + a[1]) / 2 + (Math.random() - .5) * (n[1] - a[1]) + (Math.random() - .5) * (window.innerHeight / 10)), new PIXI.Point(n[0], n[1])],
                    vertices: Math.round(l * r),
                    length: Math.round(l * r),
                    duration: r,
                    tint: m,
                    blendMode: PIXI.BLEND_MODES.ADD,
                    scale: .5 + i / 20,
                    smoothPath: !0,
                    smoothVertices: !0,
                    repeatTexture: !1,
                    reverse: !1,
                    leader: g,
                    onHit: (t, s) => {
                        sn.play("garbage_beam_impact", {
                            x: s.x,
                            y: s.y,
                            color: m,
                            intensity: i
                        }), g && g.destroy(), delete e[u]
                    }
                });
                return d.addChild(h), e[u] = {
                    id: u,
                    obj: h,
                    leader: g,
                    options: s
                }, u
            },
            destroy: s,
            destroyAll: function() {
                Object.keys(e).forEach(e => {
                    s(e)
                })
            },
            getBeam: function(t) {
                return e[id]
            }
        }
    })();
    let gn, hn, fn, _n;

    function bn(e, t, s) {
        const a = document.createElement("canvas"),
            n = a.getContext("2d");
        a.height = t, a.width = e;
        const o = n.createLinearGradient(0, 0, 0, t);
        return s.forEach(e => {
            o.addColorStop(e[0], e[1])
        }), n.fillStyle = o, n.fillRect(0, 0, e, t), new PIXI.Texture.fromCanvas(a)
    }
    U.ready((function(e) {
        let t = null,
            s = null;
        gn = function() {
            function e() {
                t && t.destroy(), s && s.destroy()
            }

            function a() {
                e(), t = Wa.createSpawner({
                    texture: "/res/particles/bigbox.png",
                    tint: 16777215,
                    lifetime: [1, 30],
                    alpha: {
                        from: [.02, .15],
                        to: 0
                    },
                    alphamultiplier: {
                        from: 0,
                        to: 2
                    },
                    speed: {
                        from: [0, 45],
                        to: [0, 20]
                    },
                    direction: [0, 360],
                    scale: [sn.utils.scale(.02), sn.utils.scale(.3)],
                    wrap: !0
                }, {
                    shape: "rectangle",
                    x: window.innerWidth / 2,
                    y: window.innerHeight / 2,
                    width: window.innerWidth,
                    height: window.innerHeight,
                    amount: sn.utils.freq(3.5),
                    lifetime: -1
                }), s = Wa.createSpawner({
                    texture: "/res/particles/particle.png",
                    tint: 16777215,
                    lifetime: [1, 30],
                    alpha: {
                        from: [.05, .5],
                        to: 0
                    },
                    alphamultiplier: {
                        from: 0,
                        to: 2
                    },
                    speed: {
                        from: [0, 60],
                        to: [0, 30]
                    },
                    direction: [0, 360],
                    scale: [sn.utils.scale(.02), sn.utils.scale(.25)],
                    wrap: !0
                }, {
                    shape: "rectangle",
                    x: window.innerWidth / 2,
                    y: window.innerHeight / 2,
                    width: window.innerWidth,
                    height: window.innerHeight,
                    amount: sn.utils.freq(10),
                    lifetime: -1
                })
            }
            return {
                set: function() {
                    "high" !== te.video.graphics && "ultra" !== te.video.graphics || a()
                },
                unset: function() {
                    e()
                },
                resize: function() {
                    "high" !== te.video.graphics && "ultra" !== te.video.graphics || a()
                }
            }
        }(), hn = function() {
            let e, t, s = 1,
                a = 1,
                n = !1;

            function o(t) {
                const s = t || e;
                s && (_n.position.set(window.innerWidth / 2, window.innerHeight / 2), window.innerWidth / window.innerHeight > s.texture.width / s.texture.height ? s.scale.set(window.innerWidth / s.texture.width, window.innerWidth / s.texture.width) : s.scale.set(window.innerHeight / s.texture.height, window.innerHeight / s.texture.height))
            }
            return PIXI.Ticker.shared.add(t => {
                if (!e || n) return;
                if ("minimal" === te.video.graphics) return;
                const o = s,
                    i = e.alpha;
                if (i === o);
                else if (Math.round(100 * i) === Math.round(100 * o)) {
                    e.alpha = o;
                    const t = void 0 === te.video.bloom ? 1 : te.video.bloom;
                    0 != te.video.bloom && xn && "ultra" === te.video.graphics && (xn.threshold = .35 + .15 * o, xn.bloomScale = (.45 + -.3 * o) * t, xn.blur = (7 + -5 * o) * t)
                } else {
                    const s = o + (i - o) * Math.pow(.9, t);
                    e.alpha = s;
                    const a = void 0 === te.video.bloom ? 1 : te.video.bloom;
                    0 != te.video.bloom && xn && "ultra" === te.video.graphics && (xn.threshold = .35 + .15 * s, xn.bloomScale = (.45 + -.3 * s) * a, xn.blur = (7 + -5 * s) * a)
                }
                const r = a,
                    l = _n.scale.x;
                if (l === r);
                else if (Math.round(1e3 * l) === Math.round(1e3 * r)) _n.scale.set(r, r);
                else {
                    const e = r + (l - r) * Math.pow(.9, t);
                    _n.scale.set(e, e)
                }
            }, this), {
                setBackground: (s, a) => {
                    if (t === s) return;
                    a || (n = !0), t = s;
                    let i = 0;
                    e && (a ? e.destroy() : (Gn.animate(e, {
                        0: {
                            alpha: 1
                        },
                        1: {
                            alpha: 0
                        }
                    }, .5, void 0, e => {
                        e.destroy()
                    }), i = 800));
                    const r = PIXI.Sprite.from(s);
                    r.alpha = 0, r.anchor.set(.5, .5), _n.addChild(r), e = r;
                    let l = Date.now();
                    const c = () => {
                        o(r), a ? r.alpha = 1 : setTimeout(() => {
                            Gn.animate(r, {
                                0: {
                                    alpha: 0
                                },
                                1: {
                                    alpha: 1
                                }
                            }, .5, void 0, () => {
                                n = !1
                            })
                        }, Math.max(0, i - (Date.now() - l)))
                    };
                    r.texture.valid ? c() : r.texture.once("update", c)
                },
                fit: e => {
                    o(e)
                },
                opacity: e => {
                    "low" !== te.video.graphics && "minimal" !== te.video.graphics && (s = e)
                },
                scale: e => {
                    "low" !== te.video.graphics && "minimal" !== te.video.graphics && (a = e)
                }
            }
        }()
    })), window.DEVHOOK_BG_ANIM = (e = 100) => {
        let t = 0,
            s = !1;
        console.warn("The background will flash and errors may appear while the frames of the animation load in, please hang tight..."), setInterval(() => {
            ++t > 32 && (t = 1, s || (console.warn("Backgrounds have been loaded in."), s = !0)), hn.setBackground(`https://kagari.moe/:/bggame${t}.png`, !0)
        }, e)
    };
    const yn = (() => {
        const e = new Map,
            t = {
                hun: {
                    fnt: "res/font/hun.fnt",
                    type: "sdf",
                    rasterizeSize: 1024
                }
            };
        let s = 0;
        const a = [];
        return g(() => {
            U.setState("fonts", `loading fonts… (${s}/${Object.keys(t).length})`), Object.keys(t).forEach(n => {
                const o = new TheoryType.Font({
                    ...t[n],
                    onload: () => {
                        e.set(n, o), s++, U.setState("fonts", `loading fonts… (${s}/${Object.keys(t).length})`), s >= Object.keys(t).length && (a.forEach(e => {
                            e()
                        }), U.finishLoad("fonts"))
                    }
                })
            })
        }), {
            get: t => e.get(t),
            ready: e => {
                s >= Object.keys(t).length ? e() : a.push(e)
            },
            setRasterizeRenderer: t => {
                for (const [, s] of e) s.setRasterizeRenderer(t)
            }
        }
    })();
    let vn, kn, wn, Ln, En, xn;
    PIXI.settings.FAIL_IF_MAJOR_PERFORMANCE_CAVEAT = !1, g(() => {
        PIXI.utils.skipHello(), yn.ready(() => {
            null === localStorage.getItem("feecofScore") ? (console.log("Eligible for feecof test."), U.setState("feecof", "initializing benchmark..."), setTimeout(() => {
                console.log("Feecof test starting..."), U.setState("feecof", "running benchmark...");
                const e = document.createElement("canvas");
                e.setAttribute("width", "640"), e.setAttribute("height", "320"), e.setAttribute("style", "position:fixed;left:100vw;top:0;opacity:0;will-change:transform;pointer-events:none;"), document.body.appendChild(e), Feecof({
                    view: e,
                    speed: 100,
                    smartstop: !0,
                    maxcount: 10,
                    mincount: 3,
                    img: "/res/kagari.png",
                    font: yn.get("hun"),
                    maxtime: 3e4
                }, t => {
                    if (e.remove(), t.success) {
                        localStorage.setItem("feecofScore", t.feecof), console.log(`Feecof test completed with score of ${t.feecof} feecof.`);
                        try {
                            _paq.push(["trackEvent", "Performance", "Feecof", "Complete", t.feecof])
                        } catch (e) {}
                        U.finishLoad("feecof")
                    } else {
                        console.error("Feecof test did not complete. Will try again next time.");
                        try {
                            _paq.push(["trackEvent", "Performance", "Feecof", "Failure"])
                        } catch (e) {}
                        U.finishLoad("feecof")
                    }
                })
            }, 1500)) : U.finishLoad("feecof")
        })
    });
    const Tn = {
            vertices: !1,
            position: !0,
            rotation: !1,
            uvs: !1,
            tint: !0
        },
        In = {
            vertices: !0,
            position: !0,
            rotation: !0,
            uvs: !1,
            tint: !0
        };
    let Sn = !0,
        Mn = 0;

    function Cn() {
        vn.renderer.resize(window.innerWidth, window.innerHeight), kn && kn.renderer.resize(window.innerWidth, window.innerHeight), Hn(), Sn = !0
    }

    function An(e) {
        if (window.IS_ELECTRON) switch (te.electron.frameratelimit) {
            case "1x":
                PIXI.Ticker.shared.maxFPS = e || window.REFRESH_RATE || 60;
                break;
            case "2x":
                PIXI.Ticker.shared.maxFPS = e || 2 * (window.REFRESH_RATE || 60);
                break;
            case "off":
                PIXI.Ticker.shared.maxFPS = e || 0;
                break;
            case "4x":
            default:
                PIXI.Ticker.shared.maxFPS = e || 4 * (window.REFRESH_RATE || 60)
        } else PIXI.Ticker.shared.maxFPS = e || 0
    }

    function Hn() {
        if (wn) {
            if ("ultra" !== te.video.graphics) return wn.filters = null, void(wn.filterArea = null);
            if (wn.filters = [], 0 != te.video.bloom) {
                const e = void 0 === te.video.bloom ? 1 : te.video.bloom;
                xn = new PIXI.filters.AdvancedBloomFilter({
                    threshold: .5,
                    bloomScale: .15 * e,
                    brightness: 1,
                    blur: 2 * e,
                    quality: Math.floor(Math.min(Math.max(4, e + 2), 20))
                }), wn.filters.push(xn)
            }
            if (0 != te.video.chroma) {
                const e = void 0 === te.video.chroma ? .5 : te.video.chroma;
                wn.filters.push(new PIXI.filters.RGBSplitFilter(new PIXI.Point(0, -e), new PIXI.Point(0, 0), new PIXI.Point(-e, 0)))
            }
            wn.filterArea = new PIXI.Rectangle(0, 0, window.innerWidth, window.innerHeight), vn.stage.filterArea = new PIXI.Rectangle(0, 0, window.innerWidth, window.innerHeight)
        }
    }

    function Rn(e) {
        for (; e.children.length;) {
            e.children[0].destroy()
        }
    }

    function $n(e, t, s) {
        const a = e.worldTransform.apply(new PIXI.Point(t, s));
        return {
            x: a.x,
            y: a.y
        }
    }

    function On(e, t, s, a = 1) {
        const n = e.getGlobalPosition(void 0, !0);
        return {
            x: n.x + t * a,
            y: n.y + s * a
        }
    }

    function Pn(e, t, s) {
        const a = new PIXI.BaseRenderTexture({
                width: e,
                height: t
            }),
            n = new PIXI.RenderTexture(a);
        return vn.renderer.render(s, {
            renderTexture: n
        }), a
    }

    function Dn(e, t) {
        const s = new PIXI.BaseRenderTexture({
                width: 256 * e,
                height: 256 * e
            }),
            a = new PIXI.RenderTexture(s),
            n = new PIXI.Container;
        for (let s = 0; s < 25; s++) {
            const a = s % 5,
                o = Math.floor(s / 5),
                i = s / 25,
                r = 46 * e,
                l = new PIXI.Sprite(t);
            l.position.set(e * (1 + 48 * a), e * (1 + 48 * o)), l.filters = [new PIXI.filters.AdjustmentFilter({
                contrast: 0,
                brightness: 2
            })];
            const c = new PIXI.Graphics;
            c.beginFill(16711680, 1), i <= .5 ? c.drawShape(new PIXI.Polygon([r * i * 2, 0, r, 0, r, r, 0, r, 0, r * i * 2])) : c.drawShape(new PIXI.Polygon([r, r * i * 2 - r, r, r, r * i * 2 - r, r])), c.endFill(), c.position.set(e * (1 + 48 * a), e * (1 + 48 * o)), l.mask = c, n.addChild(l), n.addChild(c)
        }
        return vn.renderer.render(n, {
            renderTexture: a
        }), s
    }
    U.ready((function(t) {
        switch (te.video.webgl) {
            case "legacy":
                PIXI.settings.PREFER_ENV = PIXI.ENV.WEBGL_LEGACY;
                break;
            case "webgl1":
                PIXI.settings.PREFER_ENV = PIXI.ENV.WEBGL;
                break;
            case "webgl2":
            default:
                PIXI.settings.PREFER_ENV = PIXI.ENV.WEBGL2
        }
        if ("low" !== te.video.graphics && "minimal" !== te.video.graphics || (PIXI.settings.PRECISION_FRAGMENT = PIXI.PRECISION.LOW, PIXI.settings.PRECISION_VERTEX = PIXI.PRECISION.LOW), "minimal" === te.video.graphics && (PIXI.settings.SCALE_MODE = PIXI.SCALE_MODES.NEAREST), vn = new PIXI.Application({
                width: 256,
                height: 256,
                view: e("pixi"),
                antialias: "low" !== te.video.graphics && "minimal" !== te.video.graphics,
                transparent: !1,
                powerPreference: te.video.powersave ? "default" : "high-performance",
                forceFXAA: "high" !== te.video.graphics && "ultra" !== te.video.graphics,
                sharedTicker: "minimal" !== te.video.graphics,
                autoDensity: !0,
                clearBeforeRender: !1,
                resolution: te.video.lowres ? .7 : window.devicePixelRatio,
                autoStart: "minimal" !== te.video.graphics
            }), PIXI.Ticker.shared.maxFPS = 0, "ultra" === te.video.graphics && (kn = new PIXI.Application({
                width: 256,
                height: 256,
                view: e("pixi-fg"),
                antialias: !1,
                transparent: !0,
                powerPreference: te.video.powersave ? "default" : "high-performance",
                forceFXAA: !1,
                sharedTicker: !0,
                autoDensity: !0,
                resolution: te.video.lowres ? .7 : window.devicePixelRatio,
                autoStart: !0
            })), "minimal" === te.video.graphics) {
            const e = new PIXI.Ticker;
            e.add(() => {
                (Mn > 0 || Sn) && (vn.renderer.render(vn.stage), Sn = !1)
            }, vn, PIXI.UPDATE_PRIORITY.LOW), e.start()
        }
        if (vn && vn.renderer && vn.renderer.type === PIXI.RENDERER_TYPE.WEBGL ? console.log(`%cPixiJS ${PIXI.VERSION} - ${2 === vn.renderer.context.webGLVersion ? "WebGL 2" : "WebGL 1"}${PIXI.settings.PREFER_ENV === PIXI.ENV.WEBGL_LEGACY ? " (LEGACY)" : ""}`, `color: ${2 === vn.renderer.context.webGLVersion ? "#F3C0E6" : "#D9C0F3"};\n\t\t\t\t\t font-size: 1.2em;\n\t\t\t\t\t font-weight: 900;\n\t\t\t\t\t text-shadow: 0px 0px 2px ${2 === vn.renderer.context.webGLVersion ? "#BA509B" : "#7050BA"};\n\t\t\t\t\t background-color: ${2 === vn.renderer.context.webGLVersion ? "#50344988" : "#3D345088"};\n\t\t\t\t\t padding: 0 1em;\n\t\t\t\t\t border-radius: 3px;`) : vn && vn.renderer && vn.renderer.type === PIXI.RENDERER_TYPE.CANVAS ? (console.log(`%cPixiJS ${PIXI.VERSION} - Canvas`, "color: #F97676;\n\t\t\t\t\t font-size: 1.2em;\n\t\t\t\t\t font-weight: 900;\n\t\t\t\t\t text-shadow: 0px 0px 2px #BA5050;\n\t\t\t\t\t background-color: #87353588;\n\t\t\t\t\t padding: 0 1em;\n\t\t\t\t\t border-radius: 3px;"), console.error("Canvas renderers are not supported.")) : (console.log(`%cPixiJS ${PIXI.VERSION} - No renderer`, "color: #FFFFFF;\n\t\t\t\t\t font-size: 1.2em;\n\t\t\t\t\t font-weight: 900;\n\t\t\t\t\t text-shadow: 0px 0px 2px #FFFFFF;\n\t\t\t\t\t background-color: #FF0000;\n\t\t\t\t\t padding: 0 1em;\n\t\t\t\t\t border-radius: 3px;"), console.error("No supported renderer found. Cannot launch.")), console.log(`%c- ${navigator.userAgent ? navigator.userAgent : "Unknown browser"} -\nCPU: ${navigator.hardwareConcurrency ? `${navigator.hardwareConcurrency}-core` : "<unknown>"}\nMemory: ${navigator.deviceMemory ? `~${navigator.deviceMemory} GB` : "<unknown>"}\nConnection: ${navigator.connection ? `${navigator.connection.downlink} Mbps, ${navigator.connection.rtt}ms RTT [${navigator.connection.effectiveType}]` : "<unknown>"}`, "color: #FFFFFF88;\n\t\t\t\t\t\t font-size: 1.2em;\n\t\t\t\t\t\t font-weight: 900;\n\t\t\t\t\t\t text-shadow: 0px 0px 2px #FFFFFF88;\n\t\t\t\t\t\t background-color: #111111AA;\n\t\t\t\t\t\t padding: 0 1em;\n\t\t\t\t\t\t border-radius: 3px;"), vn && vn.renderer) {
            const t = vn.renderer.gl.getExtension("WEBGL_debug_renderer_info");
            t && (console.log(`%cRenderer: ${vn.renderer.gl.getParameter(t.UNMASKED_RENDERER_WEBGL)}`, "color: #FFFFFF88;\n\t\t\t\t\t\t font-size: 1.2em;\n\t\t\t\t\t\t font-weight: 900;\n\t\t\t\t\t\t text-shadow: 0px 0px 2px #FFFFFF88;\n\t\t\t\t\t\t background-color: #111111AA;\n\t\t\t\t\t\t padding: 0 1em;\n\t\t\t\t\t\t border-radius: 3px;"), e("rendererinfo").textContent = `${2 === vn.renderer.context.webGLVersion ? "WebGL 2" : "WebGL 1"}${PIXI.settings.PREFER_ENV === PIXI.ENV.WEBGL_LEGACY ? " (LEGACY)" : ""} | ${vn.renderer.gl.getParameter(t.UNMASKED_RENDERER_WEBGL)}`)
        }
        if (yn.setRasterizeRenderer(vn.renderer), Cn(), vn.stage.filters = null, (_n = new PIXI.Container).name = "bgImgContainer", _n.interactive = !1, _n.interactiveChildren = !1, _n.alpha = te.video.background, vn.stage.addChild(_n), (fn = new PIXI.Container).name = "bgContainer", fn.interactive = !1, fn.interactiveChildren = !1, fn.alpha = Math.min(1, 10 * (te.video.background || 0)), vn.stage.addChild(fn), Wa = new Regolith.ParticleManager, fn.addChild(Wa), gn.set(), (wn = new PIXI.Container).name = "gScene", vn.stage.addChild(wn), (En = new PIXI.Container).name = "gSceneBG", wn.addChild(En), (Ln = new PIXI.Container).name = "gSceneFG", wn.addChild(Ln), (an = new PIXI.Container).name = "fxContainer", an.interactive = !1, an.interactiveChildren = !1, vn.stage.addChild(an), qa = new Regolith.ParticleManager, an.addChild(qa), kn && (kn.stage.interactive = !1, kn.stage.interactiveChildren = !1, Ka = new Regolith.ParticleManager, kn.stage.addChild(Ka)), e("pixi").addEventListener("webglcontextlost", () => {
                ut(), e("dirtyflag_gl").innerHTML = "CRASHED", D({
                    title: "WEBGL CRASHED",
                    msg: 'an error has caused WEBGL to crash.</p><p>this could be caused by many issues, like a driver error, a GPU error, a browser error or insufficient resources.</p><p class="modal_also">you can choose to continue the current session, which may not work properly, or reload to try again. sometimes, exiting the ongoing game can fix the error.',
                    classes: ["crash_modal", "noclickout"],
                    buttons: [{
                        label: "CONTINUE",
                        classes: [],
                        callback: e => {
                            e(), gt()
                        }
                    }, {
                        label: "RESTART",
                        classes: ["pri"],
                        callback: e => {
                            e(), F = !0, location.reload()
                        }
                    }]
                })
            }), Sn = !0, window.IS_ELECTRON) {
            let e = 0,
                t = 0,
                s = 0,
                a = !1;
            PIXI.Ticker.shared.add(() => {
                e++
            }, this), setInterval(() => {
                if (t !== e) return t = e, a ? void(a = !1) : void(s = 0);
                ++s >= 3 && (a = !0, PIXI.Ticker.shared.update())
            }, 100)
        }
        Hn()
    }));
    const Nn = "0123456789#%&()*+,-./:<=>?ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        Fn = "ÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿĀāĂă";

    function Un(e) {
        let t = "";
        for (let s = 0; s < e.length; s++) {
            const a = Nn.indexOf(e[s]);
            t += -1 === a ? e[s] : Fn[a]
        }
        return t
    }
    const Bn = (() => {
            let e = [];

            function t(t) {
                e = e.filter(e => e.name !== t.name)
            }

            function s(t) {
                const s = e.filter(e => e.name === t);
                return s ? s[0] : void 0
            }
            return {
                register: (a, n, o = []) => {
                    Array.isArray("array") || (o = [o]);
                    const i = s(n);
                    i && t(i), e.push({
                        obj: a,
                        name: n,
                        classes: o
                    })
                },
                unregister: e => {
                    Array.isArray(e) ? e.forEach(e => {
                        t(e)
                    }) : t(e)
                },
                unregisterStartingWith: t => {
                    e = e.filter(e => !e.name.startsWith(t))
                },
                get: e => s(e),
                getAll: t => (function(t) {
                    const s = e.filter(e => e.classes.includes(t));
                    return s || []
                })(t)
            }
        })(),
        Xn = {
            0: {
                y: 0
            },
            1: {
                y: 500
            }
        },
        zn = BezierEasing(0, 0, 1, 1),
        Gn = (() => {
            const e = {};
            let t = 0;

            function s(t) {
                delete e[t], Mn--
            }
            return PIXI.Ticker.shared.add((function(t) {
                Object.keys(e).forEach(a => {
                    const n = e[a];
                    n.obj._destroyed ? s(a) : (n.progress = Math.min(1, n.progress + n.speed * t), function(e, t, s) {
                        const a = Object.keys(t).sort((e, t) => parseFloat(e) - parseFloat(t));
                        let n = 0;
                        for (let e = a.length - 2; e >= 0; e--)
                            if (parseFloat(a[e]) <= s) {
                                n = a[e];
                                break
                            } let o = 1;
                        for (let e = 1; e < a.length; e++)
                            if (parseFloat(a[e]) > s) {
                                o = a[e];
                                break
                            } Object.keys(t[0]).forEach(a => {
                            let i = t[n][a],
                                r = t[o][a];
                            "inherit" === i && (t[n][a] = getSetDescendantProp(e, a), i = t[n][a]), "inherit" === r && (t[o][a] = getSetDescendantProp(e, a), r = t[o][a]), "string" == typeof i && "r" === i.slice(-1) && (i = ls(parseFloat(i.slice(0, -1)))), "string" == typeof r && "r" === r.slice(-1) && (r = ls(parseFloat(r.slice(0, -1)))), getSetDescendantProp(e, a, function(e, t, s, a, n) {
                                return a + (s - e) / (t - e) * (n - a)
                            }(n, o, s, i, r))
                        })
                    }(n.obj, n.animation, n.curve(n.progress)), n.progress >= 1 && (n.onend(n.obj), s(a)))
                })
            })), {
                animate: (s, a, n, o, i = (() => {})) => (function(s, a, n, o, i) {
                    const r = `${++t}`;
                    return e[r] = {
                        obj: s,
                        animation: a,
                        speed: 1 / (60 * n),
                        progress: 0,
                        curve: void 0 !== o ? o : zn,
                        onend: i
                    }, Mn++, r
                })(s, a, n, o, i),
                stop(e) {
                    s(e)
                }
            }
        })(),
        jn = 1.8,
        Wn = {
            x: 30
        };

    function qn() {
        return window.innerWidth > 1920 || window.innerHeight > 1080 ? "uhd" : "hd"
    }
    const Kn = {
            255: "NM_MID",
            241: "VS_TOP",
            17: "VS_MID",
            31: "VS_BTM",
            81: "VS_TOP",
            95: "NM_MID",
            245: "NM_MID",
            21: "VS_BTM",
            85: "NM_MID",
            199: "HS_LFT",
            68: "HS_MID",
            124: "HS_RGT",
            201: "CN_TLF",
            114: "CN_TRG",
            156: "CN_BRG",
            39: "CN_BLF",
            220: "HS_RGT",
            103: "HS_LFT",
            205: "HS_LFT",
            118: "HS_RGT",
            64: "ED_TOP",
            16: "ED_RGT",
            4: "ED_BTM",
            1: "ED_LFT",
            80: "SQ_TRG",
            65: "SQ_TLF",
            20: "SQ_BRG",
            5: "SQ_BLF",
            84: "HS_RGT",
            69: "HS_LFT",
            0: "MM_MID",
            193: "SQ_TLF",
            112: "SQ_TRG",
            28: "SQ_BRG",
            7: "SQ_BLF",
            92: "HS_RGT",
            71: "HS_LFT",
            197: "HS_LFT",
            116: "HS_RGT",
            164: "TS_TOP",
            41: "TS_RGT",
            74: "TS_BTM",
            146: "TS_LFT",
            228: "HS_MID",
            105: "CN_TLF",
            210: "CN_TRG",
            45: "CN_BLF",
            78: "HS_MID",
            150: "CN_BRG",
            109: "HS_LFT",
            214: "HS_RGT"
        },
        Yn = {
            NM_MID: [0, 3],
            VS_TOP: [0, 0],
            VS_MID: [0, 1],
            VS_BTM: [0, 2],
            HS_LFT: [1, 3],
            HS_MID: [2, 3],
            HS_RGT: [3, 3],
            CN_TLF: [0, 4],
            CN_TRG: [1, 4],
            CN_BRG: [1, 5],
            CN_BLF: [0, 5],
            ED_TOP: [2, 0],
            ED_RGT: [3, 1],
            ED_BTM: [2, 2],
            ED_LFT: [1, 1],
            MM_MID: [2, 1],
            SQ_TLF: [1, 0],
            SQ_TRG: [3, 0],
            SQ_BRG: [3, 2],
            SQ_BLF: [1, 2],
            TS_TOP: [2, 4],
            TS_RGT: [3, 4],
            TS_BTM: [2, 5],
            TS_LFT: [3, 5]
        },
        Vn = {
            NM_MID: [0, 3],
            VS_TOP: [0, 0],
            VS_MID: [0, 1],
            VS_BTM: [0, 2],
            HS_LFT: [1, 3],
            HS_MID: [2, 3],
            HS_RGT: [3, 3],
            ED_TOP: [2, 0],
            ED_RGT: [3, 1],
            ED_BTM: [2, 2],
            ED_LFT: [1, 1],
            MM_MID: [2, 1],
            SQ_TLF: [1, 0],
            SQ_TRG: [3, 0],
            SQ_BRG: [3, 2],
            SQ_BLF: [1, 2]
        };

    function Zn(e, t, s, a, n, o) {
        const i = {};
        return Object.keys(t).forEach(r => {
            i[r] = new PIXI.Texture(e, new PIXI.Rectangle(a + (t[r][0] + n) * (s + 2 * a), a + (t[r][1] + o) * (s + 2 * a), s, s))
        }), i
    }
    window.DEVHOOK_CONNECTED_SKIN = () => {
        Jn.tetrio = Jn.connected_test, Qn.tetrio = Qn.connected_test
    };
    const Jn = {
            tetrio: {
                id: "tetrio",
                name: "TETR.IO",
                assets: {
                    hd: {
                        url: "/res/skins/minos/tetrio.png",
                        loaded: !1,
                        loading: !1,
                        basetexture: null,
                        textures: {}
                    },
                    uhd: {
                        url: "/res/skins/minos/tetrio.2x.png",
                        loaded: !1,
                        loading: !1,
                        basetexture: null,
                        textures: {}
                    }
                },
                format: "simple",
                colors: {
                    base: {
                        z: 13521497,
                        l: 13533522,
                        o: 13550930,
                        s: 8441426,
                        i: 5426860,
                        j: 6705870,
                        t: 12800718,
                        d: 4605510,
                        gb: 6181727,
                        gbd: 2359335
                    },
                    glow: {
                        z: 16744069,
                        l: 16749136,
                        o: 16773982,
                        s: 10813295,
                        i: 8716253,
                        j: 10324735,
                        t: 16091903,
                        d: 6250335,
                        gb: 12956103,
                        gbd: 4405060
                    }
                }
            },
            connected_test: {
                id: "connected_test",
                name: "Connected skin test",
                assets: {
                    hd: {
                        url: "/res/skins/minos/connected.png",
                        loaded: !1,
                        loading: !1,
                        basetexture: null,
                        textures: {}
                    },
                    uhd: {
                        url: "/res/skins/minos/connected.2x.png",
                        loaded: !1,
                        loading: !1,
                        basetexture: null,
                        textures: {}
                    }
                },
                format: "connected",
                colors: {
                    base: {
                        z: 16727357,
                        l: 16750653,
                        o: 16580413,
                        s: 5111613,
                        i: 4063176,
                        j: 4020223,
                        t: 15678975,
                        d: 6250335,
                        gb: 10066329,
                        gbd: 6634081
                    },
                    glow: {
                        z: 16744069,
                        l: 16749136,
                        o: 16773982,
                        s: 10813295,
                        i: 8716253,
                        j: 10324735,
                        t: 16091903,
                        d: 6250335,
                        gb: 12956103,
                        gbd: 4405060
                    }
                }
            }
        },
        Qn = {
            tetrio: {
                id: "tetrio",
                name: "TETR.IO",
                assets: {
                    hd: {
                        url: "/res/skins/ghost/tetrio.png",
                        loaded: !1,
                        loading: !1,
                        basetexture: null,
                        textures: {}
                    },
                    uhd: {
                        url: "/res/skins/ghost/tetrio.2x.png",
                        loaded: !1,
                        loading: !1,
                        basetexture: null,
                        textures: {}
                    }
                },
                format: "simple",
                colorizeGhost: !0,
                colorizeX: !1
            },
            connected_test: {
                id: "connected_test",
                name: "Connected skin test",
                assets: {
                    hd: {
                        url: "/res/skins/ghost/connected.png",
                        loaded: !1,
                        loading: !1,
                        basetexture: null,
                        textures: {}
                    },
                    uhd: {
                        url: "/res/skins/ghost/connected.2x.png",
                        loaded: !1,
                        loading: !1,
                        basetexture: null,
                        textures: {}
                    }
                },
                format: "connected",
                colorizeGhost: !0,
                colorizeX: !1
            }
        },
        eo = (() => {
            function e(e, t, s = 255, a = 1, n = {}) {
                let o = Jn[e];
                o || (e = "tetrio", o = Jn.tetrio);
                const i = new PIXI.Sprite(PIXI.Texture.WHITE);
                return i.width = ls(Wn.x) * a, i.height = ls(Wn.x) * a, i.tint = o.colors.base[t] || 0, i
            }

            function t(e) {
                const t = Jn[e];
                if (!t) return;
                const a = qn(),
                    n = t.assets[a];
                n.loaded || n.loading || (n.loading = !0, n.baseTexture = new PIXI.BaseTexture(n.url), n.baseTexture.valid ? s(t, n, a) : n.baseTexture.on("loaded", () => {
                    s(t, n, a)
                }))
            }

            function s(e, t, s) {
                t.textures = to[e.format](t, t.baseTexture, s), t.loaded = !0, rs()
            }
            return {
                generate: function(s, a, n = 255, o = 1, i = {}) {
                    let r = Jn[s];
                    if (r || (s = "tetrio", r = Jn.tetrio), !r.assets[qn()].loaded) return r.assets[qn()].loading || t(s), e(s, a, n, o, i);
                    let l = PIXI.Texture.WHITE;
                    switch (r.assets[qn()].textures.format) {
                        case "10":
                            l = r.assets[qn()].textures[a];
                            break;
                        case "wang24":
                            l = r.assets[qn()].textures[a][Kn[n] || 255]
                    }
                    const c = new PIXI.Sprite(l);
                    return c.width = ls(Wn.x) * o, c.height = ls(Wn.x) * o, c
                },
                generatePlaceholder: e,
                generateFlash: function(e) {
                    let t = Jn[e];
                    if (t || (e = "tetrio", t = Jn.tetrio), !t.assets[qn()].loaded || !t.assets[qn()].textures.flashsheet) return;
                    const s = new PIXI.AnimatedSprite(t.assets[qn()].textures.flashsheet, !0);
                    return s.loop = !1, s.animationSpeed = 2, s.onComplete = () => {
                        s.destroy()
                    }, s.play(), Gn.animate(s, {
                        0: {
                            alpha: .3
                        },
                        1: {
                            alpha: .2
                        }
                    }, .2, BezierEasing(.02, .58, 0, .88)), s
                },
                getColor: function(e, t, s = !1) {
                    let a = Jn[e];
                    a || (e = "tetrio", a = Jn.tetrio);
                    const n = a.colors.base[t] || 0;
                    return s ? `#${n.toString(16).padStart(6, "0")}` : n
                },
                getGlowColor: function(e, t, s = !1) {
                    let a = Jn[e];
                    a || (e = "tetrio", a = Jn.tetrio);
                    const n = a.colors.glow[t] || 0;
                    return s ? `#${n.toString(16).padStart(6, "0")}` : n
                },
                load: t
            }
        })(),
        to = {
            simple: (e, t, s) => {
                const a = new PIXI.Sprite(new PIXI.Texture(t));
                a.filters = [new PIXI.filters.AdjustmentFilter({
                    brightness: 1.2,
                    contrast: 1.2
                })];
                const n = Pn("uhd" === s ? 512 : 256, "uhd" === s ? 512 : 256, a),
                    o = "uhd" === s ? 92 : 46,
                    i = "uhd" === s ? 2 : 1,
                    r = [],
                    l = Dn("uhd" === s ? 2 : 1, new PIXI.Texture(t, new PIXI.Rectangle(i, i, o, o)));
                for (let e = 0; e < 25; e++) {
                    const t = e % 5,
                        s = Math.floor(e / 5);
                    r.push(new PIXI.Texture(l, new PIXI.Rectangle(i + t * (o + 2 * i), i + s * (o + 2 * i), o, o)))
                }
                return {
                    format: "10",
                    z: new PIXI.Texture(t, new PIXI.Rectangle(i + 0 * (o + 2 * i), i + 0 * (o + 2 * i), o, o)),
                    l: new PIXI.Texture(t, new PIXI.Rectangle(i + 1 * (o + 2 * i), i + 0 * (o + 2 * i), o, o)),
                    o: new PIXI.Texture(t, new PIXI.Rectangle(i + 2 * (o + 2 * i), i + 0 * (o + 2 * i), o, o)),
                    s: new PIXI.Texture(t, new PIXI.Rectangle(i + 3 * (o + 2 * i), i + 0 * (o + 2 * i), o, o)),
                    i: new PIXI.Texture(t, new PIXI.Rectangle(i + 4 * (o + 2 * i), i + 0 * (o + 2 * i), o, o)),
                    j: new PIXI.Texture(t, new PIXI.Rectangle(i + 0 * (o + 2 * i), i + 1 * (o + 2 * i), o, o)),
                    t: new PIXI.Texture(t, new PIXI.Rectangle(i + 1 * (o + 2 * i), i + 1 * (o + 2 * i), o, o)),
                    d: new PIXI.Texture(t, new PIXI.Rectangle(i + 2 * (o + 2 * i), i + 1 * (o + 2 * i), o, o)),
                    gb: new PIXI.Texture(t, new PIXI.Rectangle(i + 3 * (o + 2 * i), i + 1 * (o + 2 * i), o, o)),
                    gbd: new PIXI.Texture(t, new PIXI.Rectangle(i + 4 * (o + 2 * i), i + 1 * (o + 2 * i), o, o)),
                    s_z: new PIXI.Texture(n, new PIXI.Rectangle(i + 0 * (o + 2 * i), i + 0 * (o + 2 * i), o, o)),
                    s_l: new PIXI.Texture(n, new PIXI.Rectangle(i + 1 * (o + 2 * i), i + 0 * (o + 2 * i), o, o)),
                    s_o: new PIXI.Texture(n, new PIXI.Rectangle(i + 2 * (o + 2 * i), i + 0 * (o + 2 * i), o, o)),
                    s_s: new PIXI.Texture(n, new PIXI.Rectangle(i + 3 * (o + 2 * i), i + 0 * (o + 2 * i), o, o)),
                    s_i: new PIXI.Texture(n, new PIXI.Rectangle(i + 4 * (o + 2 * i), i + 0 * (o + 2 * i), o, o)),
                    s_j: new PIXI.Texture(n, new PIXI.Rectangle(i + 0 * (o + 2 * i), i + 1 * (o + 2 * i), o, o)),
                    s_t: new PIXI.Texture(n, new PIXI.Rectangle(i + 1 * (o + 2 * i), i + 1 * (o + 2 * i), o, o)),
                    flashsheet: r
                }
            },
            connected: (e, t, s) => {
                const a = new PIXI.Sprite(new PIXI.Texture(t));
                a.filters = [new PIXI.filters.AdjustmentFilter({
                    brightness: 1.2,
                    contrast: 1.2
                })];
                const n = Pn("uhd" === s ? 2048 : 1024, "uhd" === s ? 2048 : 1024, a),
                    o = "uhd" === s ? 92 : 46,
                    i = "uhd" === s ? 2 : 1,
                    r = [],
                    l = Dn("uhd" === s ? 2 : 1, new PIXI.Texture(t, new PIXI.Rectangle(i, i, o, o)));
                for (let e = 0; e < 25; e++) {
                    const t = e % 5,
                        s = Math.floor(e / 5);
                    r.push(new PIXI.Texture(l, new PIXI.Rectangle(i + t * (o + 2 * i), i + s * (o + 2 * i), o, o)))
                }
                return {
                    format: "wang24",
                    z: Zn(t, Yn, o, i, 0, 0),
                    l: Zn(t, Yn, o, i, 4, 0),
                    o: Zn(t, Yn, o, i, 8, 0),
                    s: Zn(t, Yn, o, i, 12, 0),
                    i: Zn(t, Yn, o, i, 0, 6),
                    j: Zn(t, Yn, o, i, 4, 6),
                    t: Zn(t, Yn, o, i, 8, 6),
                    d: Zn(t, Yn, o, i, 12, 6),
                    gb: Zn(t, Vn, o, i, 16, 0),
                    gbd: Zn(t, Vn, o, i, 16, 4),
                    s_z: Zn(n, Yn, o, i, 0, 0),
                    s_l: Zn(n, Yn, o, i, 4, 0),
                    s_o: Zn(n, Yn, o, i, 8, 0),
                    s_s: Zn(n, Yn, o, i, 12, 0),
                    s_i: Zn(n, Yn, o, i, 0, 6),
                    s_j: Zn(n, Yn, o, i, 4, 6),
                    s_t: Zn(n, Yn, o, i, 8, 6),
                    flashsheet: r
                }
            }
        },
        so = (() => {
            function e(e, t, s = 255, a = 1, n = {}) {
                let o = Qn[e];
                o || (e = "tetrio", o = Qn.tetrio);
                const i = new PIXI.Sprite(PIXI.Texture.WHITE);
                return i.width = ls(Wn.x) * a, i.height = ls(Wn.x) * a, i
            }

            function t(e) {
                const t = Qn[e];
                if (!t) return;
                const a = qn(),
                    n = t.assets[a];
                n.loaded || n.loading || (n.loading = !0, n.baseTexture = new PIXI.BaseTexture(n.url), n.baseTexture.valid ? s(t, n, a) : n.baseTexture.on("loaded", () => {
                    s(t, n, a)
                }))
            }

            function s(e, t, s) {
                t.textures = ao[e.format](t, t.baseTexture, s), t.loaded = !0, rs()
            }
            return {
                generate: function(s, a, n = 255, o = 1, i = {}) {
                    let r = Qn[s];
                    if (r || (s = "tetrio", r = Qn.tetrio), !r.assets[qn()].loaded) return r.assets[qn()].loading || t(s), e(s, a, n, o, i);
                    let l = PIXI.Texture.WHITE;
                    switch (r.assets[qn()].textures.format) {
                        case "2":
                            l = r.assets[qn()].textures[a];
                            break;
                        case "wang24":
                            l = r.assets[qn()].textures[a][Kn[n] || 255]
                    }
                    const c = new PIXI.Sprite(l);
                    return c.width = ls(Wn.x) * o, c.height = ls(Wn.x) * o, c
                },
                generatePlaceholder: e,
                load: t
            }
        })(),
        ao = {
            simple: (e, t, s) => {
                const a = "uhd" === s ? 92 : 46,
                    n = "uhd" === s ? 2 : 1;
                return {
                    format: "2",
                    g: new PIXI.Texture(t, new PIXI.Rectangle(n + 0 * (a + 2 * n), n + 0 * (a + 2 * n), a, a)),
                    x: new PIXI.Texture(t, new PIXI.Rectangle(n + 1 * (a + 2 * n), n + 0 * (a + 2 * n), a, a))
                }
            },
            connected: (e, t, s) => {
                const a = "uhd" === s ? 92 : 46,
                    n = "uhd" === s ? 2 : 1;
                return {
                    format: "wang24",
                    g: Zn(t, Yn, a, n, 0, 0),
                    x: Zn(t, Yn, a, n, 4, 0)
                }
            }
        },
        no = {
            superlobby: {
                timeout: 3500,
                starter: e => (vs.play("cutin_superlobby"), `<img class="cutin_superlobby_backer" src="/res/cutin/superlobby/backing.png" /><p><span>${e}</span>PLAYERS</p>`)
            }
        };

    function oo(t, ...s) {
        if (!no[t]) return;
        const a = document.createElement("div");
        a.className = `cutin cutin_${t}`, a.innerHTML = no[t].starter(...s), e("cutins").appendChild(a), "ultra" === te.video.graphics && no[t].ultra && no[t].ultra(), setTimeout(() => {
            a.remove()
        }, no[t].timeout)
    }
    const io = {
            cleartypes: ["NONE", "SINGLE", "DOUBLE", "TRIPLE", "QUAD", "PENTA", "HEXA", "HEPTA", "OCTA", "ENNEA", "DECA", "HENDECA", "DODECA", "TRIADECA", "TESSARADECA", "PENTEDECA", "HEXADECA", "HEPTADECA", "OCTADECA", "ENNEADECA", "EICOSA", "KAGARIS"],
            tspins: {
                mini: "\fc3MINI\f5 %%PIECE%%-spin",
                normal: "%%PIECE%%-spin"
            },
            extra: {
                btb: "back-to-back",
                btb_short: "BACK-TO-BACK",
                clear: "ALL\nCLEAR",
                zenlevel: "LEVEL\nCOMPLETE"
            },
            longTypeNames: {
                "40l": "40 LINES",
                blitz: "BLITZ",
                zen: "ZEN",
                custom: "CUSTOM GAME"
            },
            gameMissions: {
                "40l": "CLEAR 40 LINES!",
                blitz: "TWO-MINUTE BLITZ",
                "40 LINES": "CLEAR 40 LINES!",
                BLITZ: "TWO-MINUTE BLITZ",
                zen: "ZEN",
                ZEN: "ZEN"
            }
        },
        ro = {
            AD: "Andorra",
            AE: "United Arab Emirates",
            AF: "Afghanistan",
            AG: "Antigua and Barbuda",
            AI: "Anguilla",
            AL: "Albania",
            AM: "Armenia",
            AN: "Netherlands Antilles",
            AO: "Angola",
            AQ: "Antarctica",
            AR: "Argentina",
            AS: "American Samoa",
            AT: "Austria",
            AU: "Australia",
            AW: "Aruba",
            AX: "Åland Islands",
            AZ: "Azerbaijan",
            BA: "Bosnia and Herzegovina",
            BB: "Barbados",
            BD: "Bangladesh",
            BE: "Belgium",
            BF: "Burkina Faso",
            BG: "Bulgaria",
            BH: "Bahrain",
            BI: "Burundi",
            BJ: "Benin",
            BL: "Saint Barthélemy",
            BM: "Bermuda",
            BN: "Brunei Darussalam",
            BO: "Bolivia, Plurinational State of",
            BQ: "Caribbean Netherlands",
            BR: "Brazil",
            BS: "Bahamas",
            BT: "Bhutan",
            BV: "Bouvet Island",
            BW: "Botswana",
            BY: "Belarus",
            BZ: "Belize",
            CA: "Canada",
            CC: "Cocos (Keeling) Islands",
            CD: "Congo, the Democratic Republic of the",
            CF: "Central African Republic",
            CG: "Congo",
            CH: "Switzerland",
            CI: "Côte d'Ivoire",
            CK: "Cook Islands",
            CL: "Chile",
            CM: "Cameroon",
            CN: "China",
            CO: "Colombia",
            CR: "Costa Rica",
            CU: "Cuba",
            CV: "Cape Verde",
            CW: "Curaçao",
            CX: "Christmas Island",
            CY: "Cyprus",
            CZ: "Czech Republic",
            DE: "Germany",
            DJ: "Djibouti",
            DK: "Denmark",
            DM: "Dominica",
            DO: "Dominican Republic",
            DZ: "Algeria",
            EC: "Ecuador",
            EE: "Estonia",
            EG: "Egypt",
            EH: "Western Sahara",
            ER: "Eritrea",
            ES: "Spain",
            ET: "Ethiopia",
            EU: "Europe",
            FI: "Finland",
            FJ: "Fiji",
            FK: "Falkland Islands (Malvinas)",
            FM: "Micronesia, Federated States of",
            FO: "Faroe Islands",
            FR: "France",
            GA: "Gabon",
            "GB-ENG": "England",
            "GB-NIR": "Northern Ireland",
            "GB-SCT": "Scotland",
            "GB-WLS": "Wales",
            GB: "United Kingdom",
            GD: "Grenada",
            GE: "Georgia",
            GF: "French Guiana",
            GG: "Guernsey",
            GH: "Ghana",
            GI: "Gibraltar",
            GL: "Greenland",
            GM: "Gambia",
            GN: "Guinea",
            GP: "Guadeloupe",
            GQ: "Equatorial Guinea",
            GR: "Greece",
            GS: "South Georgia and the South Sandwich Islands",
            GT: "Guatemala",
            GU: "Guam",
            GW: "Guinea-Bissau",
            GY: "Guyana",
            HK: "Hong Kong",
            HM: "Heard Island and McDonald Islands",
            HN: "Honduras",
            HR: "Croatia",
            HT: "Haiti",
            HU: "Hungary",
            ID: "Indonesia",
            IE: "Ireland",
            IL: "Israel",
            IM: "Isle of Man",
            IN: "India",
            IO: "British Indian Ocean Territory",
            IQ: "Iraq",
            IR: "Iran, Islamic Republic of",
            IS: "Iceland",
            IT: "Italy",
            JE: "Jersey",
            JM: "Jamaica",
            JO: "Jordan",
            JP: "Japan",
            KE: "Kenya",
            KG: "Kyrgyzstan",
            KH: "Cambodia",
            KI: "Kiribati",
            KM: "Comoros",
            KN: "Saint Kitts and Nevis",
            KP: "Korea, Democratic People's Republic of",
            KR: "Korea, Republic of",
            KW: "Kuwait",
            KY: "Cayman Islands",
            KZ: "Kazakhstan",
            LA: "Lao People's Democratic Republic",
            LB: "Lebanon",
            LC: "Saint Lucia",
            LI: "Liechtenstein",
            LK: "Sri Lanka",
            LR: "Liberia",
            LS: "Lesotho",
            LT: "Lithuania",
            LU: "Luxembourg",
            LV: "Latvia",
            LY: "Libya",
            MA: "Morocco",
            MC: "Monaco",
            MD: "Moldova, Republic of",
            ME: "Montenegro",
            MF: "Saint Martin",
            MG: "Madagascar",
            MH: "Marshall Islands",
            MK: "Macedonia, the former Yugoslav Republic of",
            ML: "Mali",
            MM: "Myanmar",
            MN: "Mongolia",
            MO: "Macao",
            MP: "Northern Mariana Islands",
            MQ: "Martinique",
            MR: "Mauritania",
            MS: "Montserrat",
            MT: "Malta",
            MU: "Mauritius",
            MV: "Maldives",
            MW: "Malawi",
            MX: "Mexico",
            MY: "Malaysia",
            MZ: "Mozambique",
            NA: "Namibia",
            NC: "New Caledonia",
            NE: "Niger",
            NF: "Norfolk Island",
            NG: "Nigeria",
            NI: "Nicaragua",
            NL: "Netherlands",
            NO: "Norway",
            NP: "Nepal",
            NR: "Nauru",
            NU: "Niue",
            NZ: "New Zealand",
            OM: "Oman",
            PA: "Panama",
            PE: "Peru",
            PF: "French Polynesia",
            PG: "Papua New Guinea",
            PH: "Philippines",
            PK: "Pakistan",
            PL: "Poland",
            PM: "Saint Pierre and Miquelon",
            PN: "Pitcairn",
            PR: "Puerto Rico",
            PS: "Palestine",
            PT: "Portugal",
            PW: "Palau",
            PY: "Paraguay",
            QA: "Qatar",
            RE: "Réunion",
            RO: "Romania",
            RS: "Serbia",
            RU: "Russian Federation",
            RW: "Rwanda",
            SA: "Saudi Arabia",
            SB: "Solomon Islands",
            SC: "Seychelles",
            SD: "Sudan",
            SE: "Sweden",
            SG: "Singapore",
            SH: "Saint Helena, Ascension and Tristan da Cunha",
            SI: "Slovenia",
            SJ: "Svalbard and Jan Mayen Islands",
            SK: "Slovakia",
            SL: "Sierra Leone",
            SM: "San Marino",
            SN: "Senegal",
            SO: "Somalia",
            SR: "Suriname",
            SS: "South Sudan",
            ST: "Sao Tome and Principe",
            SV: "El Salvador",
            SX: "Sint Maarten (Dutch part)",
            SY: "Syrian Arab Republic",
            SZ: "Swaziland",
            TC: "Turks and Caicos Islands",
            TD: "Chad",
            TF: "French Southern Territories",
            TG: "Togo",
            TH: "Thailand",
            TJ: "Tajikistan",
            TK: "Tokelau",
            TL: "Timor-Leste",
            TM: "Turkmenistan",
            TN: "Tunisia",
            TO: "Tonga",
            TR: "Turkey",
            TT: "Trinidad and Tobago",
            TV: "Tuvalu",
            TW: "Taiwan",
            TZ: "Tanzania, United Republic of",
            UA: "Ukraine",
            UG: "Uganda",
            UM: "US Minor Outlying Islands",
            US: "United States",
            UY: "Uruguay",
            UZ: "Uzbekistan",
            VA: "Holy See (Vatican City State)",
            VC: "Saint Vincent and the Grenadines",
            VE: "Venezuela, Bolivarian Republic of",
            VG: "Virgin Islands, British",
            VI: "Virgin Islands, U.S.",
            VN: "Vietnam",
            VU: "Vanuatu",
            WF: "Wallis and Futuna Islands",
            XK: "Kosovo",
            WS: "Samoa",
            YE: "Yemen",
            YT: "Mayotte",
            ZA: "South Africa",
            ZM: "Zambia",
            ZW: "Zimbabwe",
            XX: "Unknown",
            XM: "The Moon"
        };
    class lo {
        constructor() {
            this.textures = new Map, this.elements = new Map, this.effects = new Map, this.progressive = new Map
        }
        el(e) {
            return this.elements.get(e) || po
        }
        fx(e) {
            return this.effects.get(e) || mo
        }
        progress(e) {
            for (const [, t] of this.progressive) t.progress(e)
        }
    }
    class co {
        constructor(e, t) {
            this.parent = e, this.options = t
        }
        create() {}
        update() {}
        delete() {}
        action(e) {}
        progress(e) {}
    }
    const po = new co;
    class uo {
        constructor(e, t) {
            this.parent = e, this.options = t
        }
        create() {}
        delete() {}
        progress(e) {}
    }
    const mo = new uo,
        go = {
            generic: {
                id: "generic",
                name: "generic testing boardskin",
                ns: {}
            },
            tetrio: {
                id: "tetrio",
                name: "TETR.IO",
                ns: {}
            }
        };
    go.generic.ns.Board = class extends lo {
        constructor(e, t, s) {
            super(), this.H = e, this.HS = e.holderstate, this.S = t, this.X = {
                W: () => t.setoptions.boardwidth || 10,
                H: () => t.setoptions.boardheight || 20,
                B: () => t.setoptions.boardbuffer || 20,
                T: () => (t.setoptions.boardbuffer || 20) + (t.setoptions.boardheight || 20),
                Wh: () => (t.setoptions.boardwidth || 10) / 2,
                Hh: () => (t.setoptions.boardheight || 20) / 2,
                S: () => this.HS.cos * this.HS.asf
            }, this.ctx = s, this.textures.set("board", PIXI.BaseTexture.from("/res/skins/board/generic/board.png")), this.textures.set("queue", PIXI.BaseTexture.from("/res/skins/board/generic/queue.png")), this.barWidth = Wn.x / 1.5, this.sidesOffset = 9, this.barWidthOffset = 9, this.elements.set("boardsides", new go.generic.ns.boardsides(this, {})), this.elements.set("background", new go.generic.ns.background(this, {
                texture: new PIXI.Texture(this.textures.get("board"), new PIXI.Rectangle(2, 2, 16, 16)),
                texture_tiny: new PIXI.Texture(this.textures.get("board"), new PIXI.Rectangle(22, 2, 26, 16)),
                slices: [0, 0, 0, 0],
                slices_tiny: [10, 0, 10, 10],
                offsets_tiny: [10, 0, 10, 10]
            })), this.elements.set("grid", new go.generic.ns.grid(this, {
                texture: PIXI.BaseTexture.from("/res/skins/board/generic/grid.png")
            })), this.elements.set("username", new go.generic.ns.username(this, {
                texture: new PIXI.Texture(this.textures.get("board"), new PIXI.Rectangle(52, 2, 16, 16)),
                texture_fire: new PIXI.Texture(this.textures.get("board"), new PIXI.Rectangle(74, 2, 16, 16)),
                slices: [0, 0, 0, 0],
                slices_fire: [0, 0, 0, 0],
                offsets: [9, 0, 9, 0],
                offsets_fire: [9, 0, 9, 0],
                font_opts: {}
            })), this.elements.set("stack", new go.generic.ns.stack(this, {})), this.elements.set("stock", new go.generic.ns.stock(this, {
                texture: new PIXI.Texture(this.textures.get("board"), new PIXI.Rectangle(2, 22, 92, 92))
            })), this.elements.set("next", new go.generic.ns.next(this, {
                texture: new PIXI.Texture(this.textures.get("queue"), new PIXI.Rectangle(2, 2, 474, 142)),
                slices: [180, 82, 50, 50]
            })), this.elements.set("hold", new go.generic.ns.hold(this, {
                texture: new PIXI.Texture(this.textures.get("queue"), new PIXI.Rectangle(2, 148, 474, 142)),
                slices: [180, 82, 50, 50]
            })), this.elements.set("skyline", new go.generic.ns.skyline(this, {
                texture: new PIXI.Texture(this.textures.get("board"), new PIXI.Rectangle(98, 2, 9, 73)),
                slices: [0, 9, 0, 0],
                height: 300
            })), this.elements.set("garbagedangericon", new go.generic.ns.garbagedangericon(this, {
                texture: new PIXI.Texture(this.textures.get("board"), new PIXI.Rectangle(2, 118, 92, 92)),
                scale: 2
            })), this.elements.set("targeticon", new go.generic.ns.targeticon(this, {
                texture: new PIXI.Texture(this.textures.get("board"), new PIXI.Rectangle(98, 100, 69, 69)),
                scale: 4
            })), this.elements.set("falling", new go.generic.ns.falling(this, {})), this.elements.set("border", new go.generic.ns.border(this, {
                texture: new PIXI.Texture(this.textures.get("board"), new PIXI.Rectangle(111, 2, 27, 18)),
                slices: [9, 0, 9, 9],
                offsets: [9, 0, 9, 9]
            })), this.elements.set("replaytag", new go.generic.ns.replaytag(this, {
                texture: new PIXI.Texture(this.textures.get("queue"), new PIXI.Rectangle(2, 294, 396, 77))
            })), this.progressive.set("replaytag", this.elements.get("replaytag")), this.elements.set("backer", new go.generic.ns.backer(this, {
                font_opts: {}
            })), this.progressive.set("backer", this.elements.get("backer")), this.elements.set("zen", new go.generic.ns.zen(this, {
                font_opts_score: {},
                font_opts_level: {},
                font_opts_level_hiero: {}
            })), this.elements.set("b2b", new go.generic.ns.b2b(this, {
                font_opts: {},
                size: 30,
                y: 220
            })), t.setoptions.slot_counter1 && this.elements.set("counter1", new go.generic.ns.counter(this, {
                font_opts_title: {},
                font_opts_value: {},
                font_opts_subtitle: {},
                has_subtitle: !1,
                side: "left",
                y: Wn.x * Math.min(30, Math.max(20, this.X.H())) - 55
            })), t.setoptions.slot_counter2 && this.elements.set("counter2", new go.generic.ns.counter(this, {
                font_opts_title: {},
                font_opts_value: {},
                font_opts_subtitle: {},
                has_subtitle: !1,
                side: "left",
                y: Wn.x * Math.min(30, Math.max(20, this.X.H())) - 125
            })), t.setoptions.slot_counter3 && this.elements.set("counter3", new go.generic.ns.counter(this, {
                font_opts_title: {},
                font_opts_value: {},
                font_opts_subtitle: {},
                has_subtitle: !1,
                side: "left",
                y: Wn.x * Math.min(30, Math.max(20, this.X.H())) - 195
            })), t.setoptions.slot_counter4 && this.elements.set("counter4", new go.generic.ns.counter(this, {
                font_opts_title: {},
                font_opts_value: {},
                font_opts_subtitle: {},
                has_subtitle: !1,
                side: "left",
                y: Wn.x * Math.min(30, Math.max(20, this.X.H())) - 265
            })), t.setoptions.slot_counter5 && this.elements.set("counter5", new go.generic.ns.counter(this, {
                font_opts_title: {},
                font_opts_value: {},
                font_opts_subtitle: {},
                has_subtitle: !0,
                side: "right",
                y: !1 !== t.setoptions.display_next ? 40 + 3 * Wn.x * (this.S.setoptions.nextcount || 5) : 4
            })), t.setoptions.slot_bar1 && (this.elements.set("bar1", new go.generic.ns.bar_segmented(this, {
                side: "left",
                bar_texture: new PIXI.Texture(this.textures.get("board"), new PIXI.Rectangle(142, 2, 27, 18)),
                bar_slices: [9, 0, 9, 9],
                bar_offsets: [9, 0, 9, 9],
                offset: this.barWidthOffset,
                ticker_texture: new PIXI.Texture(this.textures.get("board"), new PIXI.Rectangle(111, 88, 60, 8)),
                styles: {
                    generic: {
                        texture: new PIXI.Texture(this.textures.get("board"), new PIXI.Rectangle(111, 24, 60, 60)),
                        slices: [6, 12, 6, 6],
                        offsets: [0, 0, 0, 0],
                        color: 16717824,
                        flash_color: 16545127
                    },
                    garbage_inactive: {
                        texture: new PIXI.Texture(this.textures.get("board"), new PIXI.Rectangle(175, 88, 60, 60)),
                        slices: [6, 12, 6, 6],
                        offsets: [0, 0, 0, 0],
                        color: 16717824,
                        flash_color: 16545127
                    }
                },
                general_flash_color: 65460
            })), this.progressive.set("bar1", this.elements.get("bar1"))), t.setoptions.slot_bar2 && (this.elements.set("bar2", new go.generic.ns.bar_smooth(this, {
                side: "right",
                bar_texture: new PIXI.Texture(this.textures.get("board"), new PIXI.Rectangle(173, 2, 27, 18)),
                bar_slices: [9, 0, 9, 9],
                bar_offsets: [9, 0, 9, 9],
                offset: this.barWidthOffset,
                fill_texture: new PIXI.Texture(this.textures.get("board"), new PIXI.Rectangle(175, 24, 60, 60)),
                fill_slices: [0, 30, 0, 0],
                fill_offsets: [0, 30, 0, 0],
                ticker_texture: new PIXI.Texture(this.textures.get("board"), new PIXI.Rectangle(111, 88, 60, 8)),
                colors: [12078599, 16763904],
                flash_color: 16763904
            })), this.progressive.set("bar2", this.elements.get("bar2"))), "full" === this.H.displaymode && (this.effects.set("popup_offence", new go.generic.ns.popup_offence(this, {
                font_opts: {}
            })), this.progressive.set("popup_offence", this.effects.get("popup_offence")), this.effects.set("popup_defense", new go.generic.ns.popup_defense(this, {
                font_opts: {}
            })), this.effects.set("clear", new go.generic.ns.splash(this, {
                size: 45,
                color: 16777215,
                y: 170,
                animation: "normal",
                font_opts: {}
            })), this.effects.set("tspin", new go.generic.ns.splash(this, {
                size: 30,
                color: 16777215,
                y: 140,
                animation: "normal",
                font_opts: {}
            })), this.effects.set("also", new go.generic.ns.splash(this, {
                size: 30,
                color: 16767332,
                y: 220,
                animation: "normal",
                font_opts: {}
            })), this.effects.set("combo", new go.generic.ns.splash(this, {
                size: 60,
                color: 16777215,
                y: 255,
                animation: "bounce",
                font_opts: {}
            })), this.effects.set("countdown", new go.generic.ns.shout(this, {
                size: 120,
                color: 16762368,
                y: ls(Wn.x * this.X.Hh()),
                font_opts: {},
                animation: {
                    0: {
                        "scale.x": .9,
                        "scale.y": .9,
                        alpha: 0,
                        weight: 630
                    },
                    .05: {
                        "scale.x": 1.1,
                        "scale.y": 1.1,
                        alpha: 1,
                        weight: 700
                    },
                    .3: {
                        "scale.x": 1,
                        "scale.y": 1,
                        alpha: .95,
                        weight: 665
                    },
                    1: {
                        "scale.x": .9,
                        "scale.y": .9,
                        alpha: 0,
                        weight: 0
                    }
                },
                animationDuration: 2.5,
                flatAnimationDuration: .75,
                animationEasing: BezierEasing(.1, .38, 0, .88),
                hasShadow: !0,
                shadowColor: 2432256,
                animationShadow: {
                    0: {
                        "scale.x": 1,
                        "scale.y": 1,
                        alpha: .8,
                        weight: 560
                    },
                    .6: {
                        "scale.x": 2.2,
                        "scale.y": 2.2,
                        alpha: .5,
                        weight: 350
                    },
                    1: {
                        "scale.x": 3,
                        "scale.y": 3,
                        alpha: 0,
                        weight: 0
                    }
                },
                animationShadowDuration: 2,
                animationShadowEasing: BezierEasing(.1, .38, 0, .88)
            })), this.effects.set("countdown_stride", new go.generic.ns.shout(this, {
                size: 120,
                color: 16762368,
                y: ls(Wn.x * this.X.Hh()),
                font_opts: {},
                animation: {
                    0: {
                        "scale.x": .9,
                        "scale.y": .9,
                        alpha: 0,
                        weight: 630
                    },
                    .05: {
                        "scale.x": 1.1,
                        "scale.y": 1.1,
                        alpha: 1,
                        weight: 700
                    },
                    .3: {
                        "scale.x": 1,
                        "scale.y": 1,
                        alpha: .95,
                        weight: 665
                    },
                    1: {
                        "scale.x": .9,
                        "scale.y": .9,
                        alpha: 0,
                        weight: 0
                    }
                },
                animationDuration: 1.25,
                flatAnimationDuration: .5,
                animationEasing: BezierEasing(.1, .38, 0, .88),
                hasShadow: !0,
                shadowColor: 2432256,
                animationShadow: {
                    0: {
                        "scale.x": 1,
                        "scale.y": 1,
                        alpha: .8,
                        weight: 560
                    },
                    .6: {
                        "scale.x": 2.2,
                        "scale.y": 2.2,
                        alpha: .5,
                        weight: 350
                    },
                    1: {
                        "scale.x": 3,
                        "scale.y": 3,
                        alpha: 0,
                        weight: 0
                    }
                },
                animationShadowDuration: 1,
                animationShadowEasing: BezierEasing(.1, .38, 0, .88)
            })), this.effects.set("levelup", new go.generic.ns.shout(this, {
                size: 120,
                color: 6256003,
                y: ls(Wn.x * (this.X.Hh() + 5)),
                font_opts: {},
                animation: {
                    0: {
                        y: ls(Wn.x * (this.X.Hh() + 5)),
                        alpha: 0,
                        weight: 0
                    },
                    .05: {
                        y: ls(Wn.x * (this.X.Hh() + 4.5)),
                        alpha: 1,
                        weight: 700
                    },
                    1: {
                        y: ls(Wn.x * (this.X.Hh() - 5)),
                        alpha: 0,
                        weight: 0
                    }
                },
                animationDuration: 1.5,
                animationEasing: BezierEasing(.2, .65, .88, .64),
                hasShadow: !1
            })), this.effects.set("timeleft", new go.generic.ns.shout(this, {
                size: 40,
                color: 16732200,
                y: ls(Wn.x * this.X.H() / 4),
                font_opts: {},
                animation: {
                    0: {
                        alpha: 0,
                        weight: 0,
                        letterSpacing: 0,
                        tint: 16777215
                    },
                    .05: {
                        alpha: 1,
                        weight: 700,
                        letterSpacing: .25,
                        tint: 16777215
                    },
                    .8: {
                        alpha: 1,
                        weight: 700,
                        letterSpacing: 5,
                        tint: 16732200
                    },
                    1: {
                        alpha: 0,
                        weight: 0,
                        letterSpacing: 8,
                        tint: 12067584
                    }
                },
                animationDuration: 4,
                animationEasing: BezierEasing(.2, .65, .88, .64),
                hasShadow: !1
            })), this.effects.set("clutch", new go.generic.ns.shout(this, {
                size: 30,
                color: 16771199,
                y: ls(-1 * Wn.x),
                font_opts: {},
                animation: {
                    0: {
                        alpha: 1.5,
                        weight: 900,
                        letterSpacing: 0
                    },
                    .05: {
                        alpha: 1.5,
                        weight: 900,
                        letterSpacing: 30
                    },
                    1: {
                        alpha: 0,
                        weight: 0,
                        letterSpacing: 50
                    }
                },
                animationDuration: 1,
                animationEasing: BezierEasing(.2, .65, .88, .64),
                hasShadow: !1
            })), this.effects.set("allclear", new go.generic.ns.shout(this, {
                size: 60,
                color: 16777215,
                y: ls(Wn.x * this.X.Hh()),
                font_opts: {},
                animation: {
                    0: {
                        rotation: -10,
                        "scale.x": 0,
                        "scale.y": 0,
                        alpha: 1,
                        weight: 700,
                        tint: 16777215
                    },
                    .1: {
                        rotation: 0,
                        "scale.x": 1.4,
                        "scale.y": 1.4,
                        alpha: 1,
                        weight: 700,
                        tint: 16737894
                    },
                    .15: {
                        rotation: 0,
                        "scale.x": 1.3,
                        "scale.y": 1.3,
                        alpha: 1,
                        weight: 700,
                        tint: 16777215
                    },
                    .8: {
                        rotation: 0,
                        "scale.x": 1,
                        "scale.y": 1,
                        alpha: .9,
                        weight: 630,
                        tint: 16753152
                    },
                    1: {
                        rotation: 0,
                        "scale.x": .5,
                        "scale.y": .5,
                        alpha: 0,
                        weight: 0,
                        tint: 16777215
                    }
                },
                animationDuration: 5,
                animationEasing: BezierEasing(.06, .18, .65, 1.01),
                hasShadow: !0,
                shadowColor: 2235150,
                animationShadow: {
                    0: {
                        "scale.x": 1,
                        "scale.y": 1,
                        alpha: 0,
                        weight: 0
                    },
                    .09: {
                        "scale.x": 1,
                        "scale.y": 1,
                        alpha: 0,
                        weight: 0
                    },
                    .1: {
                        "scale.x": 1,
                        "scale.y": 1,
                        alpha: 1,
                        weight: 700
                    },
                    1: {
                        "scale.x": 5,
                        "scale.y": 5,
                        alpha: 0,
                        weight: 0
                    }
                },
                animationShadowDuration: 5,
                animationShadowEasing: BezierEasing(.06, .18, .65, 1.01)
            })), this.effects.set("zenlevel", new go.generic.ns.shout(this, {
                size: 60,
                color: 16777215,
                y: ls(Wn.x * this.X.Hh()),
                font_opts: {},
                animation: {
                    0: {
                        "scale.x": 2.5,
                        "scale.y": 0,
                        alpha: 1,
                        weight: 700,
                        tint: 16777215
                    },
                    .05: {
                        "scale.x": .8,
                        "scale.y": 1.9,
                        alpha: 1,
                        weight: 700,
                        tint: 16755370
                    },
                    .1: {
                        "scale.x": 1.4,
                        "scale.y": 1.4,
                        alpha: 1,
                        weight: 700,
                        tint: 16737894
                    },
                    .15: {
                        "scale.x": 1.3,
                        "scale.y": 1.3,
                        alpha: 1,
                        weight: 700,
                        tint: 16777215
                    },
                    1: {
                        "scale.x": 1,
                        "scale.y": 1,
                        alpha: .9,
                        weight: 630,
                        tint: 16753152
                    }
                },
                animationDuration: 5,
                animationEasing: BezierEasing(.06, .18, .65, 1.01),
                hasShadow: !0,
                shadowColor: 2235150,
                animationShadow: {
                    0: {
                        "scale.x": 1,
                        "scale.y": 1,
                        alpha: 0,
                        weight: 0
                    },
                    .09: {
                        "scale.x": 1,
                        "scale.y": 1,
                        alpha: 0,
                        weight: 0
                    },
                    .1: {
                        "scale.x": 1,
                        "scale.y": 1,
                        alpha: 1,
                        weight: 700
                    },
                    1: {
                        "scale.x": 5,
                        "scale.y": 5,
                        alpha: 0,
                        weight: 0
                    }
                },
                animationShadowDuration: 5,
                animationShadowEasing: BezierEasing(.06, .18, .65, 1.01)
            })))
        }
    }, go.generic.ns.background = class extends co {
        create() {
            this.options.offsets_tiny;
            return "tiny" === this.parent.H.displaymode ? (this.nsp = new PIXI.NineSlicePlane(this.options.texture_tiny, ...this.options.slices_tiny.map(e => e ? e + 2 : e)), this.nsp.width = Wn.x * this.parent.X.W() + this.options.offsets_tiny[0] + this.options.offsets_tiny[2], this.nsp.height = Wn.x * this.parent.X.H() + this.options.offsets_tiny[1] + this.options.offsets_tiny[3], this.nsp.position.set(ls(-this.options.offsets_tiny[0]), ls(-this.options.offsets_tiny[1]))) : (this.nsp = new PIXI.NineSlicePlane(this.options.texture, ...this.options.slices.map(e => e ? e + 2 : e)), this.nsp.width = Wn.x * this.parent.X.W(), this.nsp.height = Wn.x * this.parent.X.H(), this.nsp.alpha = void 0 === te.video.boardopacity ? .85 : te.video.boardopacity), this.nsp.scale.set(ls(1)), this.parent.H.holder.addChild(this.nsp), this.parent.H.tintables.push(this.nsp), this.nsp
        }
    }, go.generic.ns.grid = class extends co {
        create() {
            if ("full" !== this.parent.H.displaymode) return;
            this.container = new PIXI.Container, this.container.scale.set(us(1)), this.container.alpha = void 0 === te.video.gridopacity ? .1 : te.video.gridopacity;
            const e = {
                    top: {
                        left: new PIXI.Texture(this.options.texture, new PIXI.Rectangle(2, 2, 184, 184)),
                        center: new PIXI.Texture(this.options.texture, new PIXI.Rectangle(190, 2, 184, 184)),
                        right: new PIXI.Texture(this.options.texture, new PIXI.Rectangle(378, 2, 184, 184)),
                        right3: new PIXI.Texture(this.options.texture, new PIXI.Rectangle(566, 2, 276, 184))
                    },
                    middle: {
                        left: new PIXI.Texture(this.options.texture, new PIXI.Rectangle(2, 190, 184, 184)),
                        center: new PIXI.Texture(this.options.texture, new PIXI.Rectangle(190, 190, 184, 184)),
                        right: new PIXI.Texture(this.options.texture, new PIXI.Rectangle(378, 190, 184, 184)),
                        right3: new PIXI.Texture(this.options.texture, new PIXI.Rectangle(566, 190, 276, 184))
                    },
                    bottom: {
                        left: new PIXI.Texture(this.options.texture, new PIXI.Rectangle(2, 378, 184, 184)),
                        left3: new PIXI.Texture(this.options.texture, new PIXI.Rectangle(2, 566, 184, 276)),
                        center: new PIXI.Texture(this.options.texture, new PIXI.Rectangle(190, 378, 184, 184)),
                        center3: new PIXI.Texture(this.options.texture, new PIXI.Rectangle(190, 566, 184, 276)),
                        right: new PIXI.Texture(this.options.texture, new PIXI.Rectangle(378, 378, 184, 184)),
                        right3wide: new PIXI.Texture(this.options.texture, new PIXI.Rectangle(566, 378, 276, 184)),
                        right3tall: new PIXI.Texture(this.options.texture, new PIXI.Rectangle(378, 566, 184, 276)),
                        right3max: new PIXI.Texture(this.options.texture, new PIXI.Rectangle(566, 566, 276, 276))
                    }
                },
                t = !!(this.parent.X.W() % 2),
                s = !!(this.parent.X.H() % 2);
            for (let a = 0; a < this.parent.X.H() - 1; a += 2)
                for (let n = 0; n < this.parent.X.W() - 1; n += 2) {
                    let o = "middle";
                    0 === a && (o = "top"), a === this.parent.X.H() - (s ? 3 : 2) && (o = "bottom");
                    let i = "center";
                    0 === n && (i = "left"), n === this.parent.X.W() - (t ? 3 : 2) && (i = "right"), "top" === o && "right" === i && t ? i = "right3" : "middle" === o && "right" === i && t ? i = "right3" : "bottom" === o && ("left" === i && s ? i = "left3" : "center" === i && s ? i = "center3" : "right" === i && (s && t ? i = "right3max" : s ? i = "right3tall" : t && (i = "right3wide")));
                    const r = new PIXI.Sprite(e[o][i]);
                    r.position.set(ps(Wn.x * n), ps(Wn.x * a)), this.container.addChild(r), this.parent.H.tintables.push(r)
                }
            return this.parent.H.holder.addChild(this.container), this.container
        }
    }, go.generic.ns.border = class extends co {
        create() {
            if ("tiny" === this.parent.H.displaymode) return;
            const e = this.options.offsets || [0, 0, 0, 0];
            return this.nsp = new PIXI.NineSlicePlane(this.options.texture, ...this.options.slices.map(e => e ? e + 2 : e)), this.nsp.width = ps(Wn.x * this.parent.X.W()) + e[0] + e[2], this.nsp.height = ps(Wn.x * this.parent.X.H()) + e[1] + e[3], this.nsp.position.set(-us(e[0]), -us(e[1])), this.nsp.scale.set(us(1)), this.parent.H.holder.addChild(this.nsp), this.parent.H.tintables.push(this.nsp), this
        }
    }, go.generic.ns.bar = class extends co {
        constructor(e, t) {
            super(e, t), this.d = {
                ticker: 0,
                ticker_appr: 0
            }
        }
        create() {
            if ("tiny" === this.parent.H.displaymode) return;
            const e = this.options.bar_offsets || [0, 0, 0, 0];
            this.nsp = new PIXI.NineSlicePlane(this.options.bar_texture, ...this.options.bar_slices.map(e => e ? e + 2 : e)), this.nsp.width = ps(this.parent.barWidth) + e[0] + e[2], this.nsp.height = ps(Wn.x * this.parent.X.H()) + e[1] + e[3];
            let t = 0;
            t = "right" === this.options.side ? ls(Wn.x * this.parent.X.W()) + us(this.options.offset) : -ls(this.parent.barWidth) - us(this.options.offset), t -= us(e[0]), this.nsp.position.set(t, -us(e[1])), this.nsp.scale.set(us(1)), this.parent.H.holder.addChild(this.nsp), this.parent.H.tintables.push(this.nsp), this.container = new PIXI.Container, this.container.position.set(e[0], e[1]), this.nsp.addChild(this.container), this.container_extra = new PIXI.Container, this.container_extra.position.set(e[0], e[1]), this.nsp.addChild(this.container_extra), this.ticker = new PIXI.Sprite(this.options.ticker_texture), this.ticker.anchor.set(0, .5), this.ticker.position.set(e[0], ps(Wn.x * this.parent.X.H())), this.ticker.alpha = 0, this.nsp.addChild(this.ticker), this.parent.H.tintables.push(this.ticker)
        }
        update(e, t) {
            if ("tiny" !== this.parent.H.displaymode) switch (e) {
                case "ticker":
                    t !== this.d.ticker && (this.d.ticker = t)
            }
        }
        progress(e) {
            "tiny" !== this.parent.H.displaymode && this.d.ticker_appr !== this.d.ticker && ("minimal" === te.video.graphics || Math.abs(this.d.ticker_appr - this.d.ticker) < 2e-4 ? this.d.ticker_appr = this.d.ticker : this.d.ticker_appr = this.d.ticker + (this.d.ticker_appr - this.d.ticker) * Math.pow(.9, e), this.ticker.position.y = ps(Wn.x * (this.parent.X.H() - this.parent.X.H() * this.d.ticker_appr)), this.ticker.alpha = 1, this.d.ticker_appr < .025 ? this.ticker.alpha = Math.max(0, 40 * this.d.ticker_appr) : this.d.ticker_appr > .975 && (this.ticker.alpha = Math.max(0, 40 - 40 * this.d.ticker_appr)))
        }
    }, go.generic.ns.bar_smooth = class extends go.generic.ns.bar {
        create() {
            "tiny" !== this.parent.H.displaymode && (super.create(), this.d.value = 0, this.d.value_appr = 0)
        }
        update(e, t) {
            if ("tiny" !== this.parent.H.displaymode) switch (super.update(e, t), e) {
                case "simple":
                    t !== this.d.value && (this.d.value = t)
            }
        }
        action(e, t) {
            if ("tiny" !== this.parent.H.displaymode) switch (e) {
                case "flash":
                    this._flashBar(this.options.flash_color)
            }
        }
        progress(e) {
            if ("tiny" !== this.parent.H.displaymode && (super.progress(e), this.d.value_appr !== this.d.value && ("minimal" === te.video.graphics || Math.abs(this.d.value_appr - this.d.value) < 2e-4 ? this.d.value_appr = this.d.value : this.d.value_appr = this.d.value + (this.d.value_appr - this.d.value) * Math.pow(.9, e), this._updateContents()), this.parent.S.playing && "full" === this.parent.H.displaymode && this.d.value_appr)) {
                const t = $n(this.container, ps(this.parent.barWidth / 2), ps(Wn.x * this.parent.X.H()) - ps(this._getBarHeight(this.d.value_appr)));
                sn.play("bar_sparks", {
                    x: t.x,
                    y: t.y,
                    w: ps(this.parent.barWidth / 2),
                    color: this.options.colors[0],
                    dT: e
                })
            }
        }
        _updateContents() {
            const e = this.options.fill_offsets || [0, 0, 0, 0],
                t = this.options.fill_slices.map(e => e ? e + 2 : e);
            Rn(this.container);
            let s = 0,
                a = this.d.value_appr;
            for (a > 12 && (a = 6 + a % 6); a > 0;) {
                const n = this._getBarHeight(a),
                    o = new PIXI.NineSlicePlane(this.options.fill_texture, ...t);
                o.width = ps(this.parent.barWidth) + e[0] + e[2], o.height = ps(n) + e[1] + e[3], o.position.set(0, ps(Wn.x * this.parent.X.H())), o.pivot.set(0, ps(n) + e[1] + e[3]), o.tint = this.options.colors[s % this.options.colors.length], this.container.addChild(o), a--, s++
            }
        }
        _getBarHeight(e) {
            return e = Math.min(3, e), Wn.x * (Math.min(1, e) + (e - Math.min(1, e)) / 3) * this.parent.X.H()
        }
        _flashBar(e) {
            if ("minimal" === te.video.graphics || void 0 === this.container_extra) return;
            if ("full" !== this.parent.H.displaymode) return;
            const t = new PIXI.NineSlicePlane(PIXI.Texture.WHITE, 0, 0, 0, 0);
            t.width = ps(this.parent.barWidth), t.height = ps(Wn.x * this.parent.X.H()), t.position.set(ps(this.parent.barWidth) / 2, ps(Wn.x * this.parent.X.W())), t.pivot.set(ps(this.parent.barWidth) / 2, ps(Wn.x * this.parent.X.H()) / 2), t.tint = e, this.container_extra.addChild(t), Gn.animate(t, {
                0: {
                    "scale.x": 1,
                    "scale.y": 1,
                    alpha: 1
                },
                1: {
                    "scale.x": 2,
                    "scale.y": 1.2,
                    alpha: 0
                }
            }, .3, BezierEasing(.05, .81, .96, .96), () => {
                t.destroy()
            })
        }
    }, go.generic.ns.bar_segmented = class extends go.generic.ns.bar {
        create() {
            "tiny" !== this.parent.H.displaymode && (super.create(), this.d.segments = new Map, this.d.dirty = !0, Object.keys(this.options.styles).forEach(e => {
                this.options.styles[e].offsets = this.options.styles[e].offsets || [0, 0, 0, 0], this.options.styles[e].slices = this.options.styles[e].slices.map(e => e ? e + 2 : e), void 0 === this.options.styles[e].flash_color && (this.options.styles[e].flash_color = this.options.styles[e].color)
            }))
        }
        update(e, t) {
            if ("tiny" !== this.parent.H.displaymode) switch (super.update(e, t), e) {
                case "upsert":
                    this._upsertSegment(t);
                    break;
                case "clear":
                    this.d.segments.clear(), this.d.dirty = !0
            }
        }
        action(e, t) {
            if ("tiny" !== this.parent.H.displaymode) switch (e) {
                case "flash":
                    this._flashBar(this.options.general_flash_color, t, 0);
                    break;
                case "forceupdate":
                    for (const [e, t] of this.d.segments) t.flagFallDown = !1, t.flagAppear = !1, t.flagRestyled = !1;
                    this._updateContents()
            }
        }
        progress(e) {
            "tiny" !== this.parent.H.displaymode && (super.progress(e), this.d.dirty && this._updateContents())
        }
        _upsertSegment(e) {
            if (this.d.segments.has(e.id)) {
                const t = this.d.segments.get(e.id),
                    s = {
                        ...t,
                        ...e
                    };
                let a = !1;
                if (s.size <= 0) {
                    this.d.segments.delete(e.id);
                    let s = 0;
                    for (const [a, n] of this.d.segments) a > e.id && (n.flagFallDown = "minimal" !== te.video.graphics, n.flagFallDownDistance = ++s, n.flagFallDownAmount = (n.flagFallDownAmount || 0) + t.size);
                    return void(this.d.dirty = !0)
                }
                if (s.size < t.size) {
                    let n = 1;
                    for (const [a, o] of this.d.segments) a > e.id && (o.flagFallDown = "minimal" !== te.video.graphics, o.flagFallDownDistance = ++n, o.flagFallDownAmount = (o.flagFallDownAmount || 0) + (t.size - s.size));
                    s.flagFallDown = "minimal" !== te.video.graphics, s.flagFallDownDistance = 1, s.flagFallDownAmount = (s.flagFallDownAmount || 0) + (t.size - s.size), this.d.dirty = !0, a = !0
                } else s.size > t.size && (this.d.dirty = !0, a = !0);
                s.style !== t.style && (s.flagRestyled = "minimal" !== te.video.graphics, this.d.dirty = !0, a = !0), a && this.d.segments.set(e.id, s)
            } else {
                const t = {
                    style: "generic",
                    ...e,
                    flagAppear: "minimal" !== te.video.graphics
                };
                this.d.segments.set(e.id, t), this.d.dirty = !0
            }
        }
        _updateContents() {
            Rn(this.container);
            let e = 0;
            for (const [t, s] of this.d.segments) {
                const t = this._getBarHeight(s.size),
                    a = this.options.styles[s.style] || this.options.styles.generic,
                    n = a.class || go.generic.ns.bar_segment;
                let o = ps(Wn.x * this.parent.X.H() - e);
                s.flagFallDown ? o -= ps(Wn.x * this.parent.X.H() * (s.flagFallDownAmount || 0)) : s.flagAppear && (o -= ps(5 * Wn.x));
                const i = new n(a.texture, ...a.slices, ps(this.parent.barWidth) + a.offsets[0] + a.offsets[2], ps(t) + a.offsets[1] + a.offsets[3], a.color);
                if (i.position.set(0, o), i.pivot.set(0, ps(t) + a.offsets[1] + a.offsets[3]), i.alpha = s.flagAppear ? 0 : 1, this.container.addChild(i), s.flagAppear ? (Gn.animate(i, {
                        0: {
                            y: ps(Wn.x * this.parent.X.H() - e - 3 * Wn.x),
                            alpha: 0
                        },
                        1: {
                            y: ps(Wn.x * this.parent.X.H() - e),
                            alpha: 1
                        }
                    }, .25, BezierEasing(.7, 1.62, .63, .74)), s.flagAppear = !1) : s.flagFallDown ? (Gn.animate(i, {
                        0: {
                            y: ps(Wn.x * this.parent.X.H() - e - Wn.x * this.parent.X.H() * (s.flagFallDownAmount || 0))
                        },
                        1: {
                            y: ps(Wn.x * this.parent.X.H() - e)
                        }
                    }, .1 + .02 * s.flagFallDownDistance, BezierEasing(.79, .09, .61, 1.07)), s.flagFallDown = !1, s.flagFallDownDistance = 0, s.flagFallDownAmount = 0) : s.flagRestyled && (this._flashBar(a.flash_color, s.size, e), s.flagRestyled = !1), (e += t) > Wn.x * this.parent.X.H() * 2) break
            }
            this.d.dirty = !1
        }
        _getBarHeight(e) {
            return Wn.x * Math.min(3, e) * this.parent.X.H()
        }
        _flashBar(e, t, s) {
            if ("minimal" === te.video.graphics || void 0 === this.container_extra) return;
            if ("full" !== this.parent.H.displaymode) return;
            const a = this._getBarHeight(t),
                n = new PIXI.NineSlicePlane(PIXI.Texture.WHITE, 0, 0, 0, 0);
            n.width = ps(this.parent.barWidth), n.height = ps(a), n.position.set(ps(this.parent.barWidth) / 2, ps(Wn.x * this.parent.X.H() - s) - ps(a) / 2), n.pivot.set(ps(this.parent.barWidth) / 2, ps(a) / 2), n.tint = e, this.container_extra.addChild(n), Gn.animate(n, {
                0: {
                    "scale.x": 1,
                    "scale.y": 1,
                    alpha: 1
                },
                1: {
                    "scale.x": 2,
                    "scale.y": 1.2,
                    alpha: 0
                }
            }, .3, BezierEasing(.05, .81, .96, .96), () => {
                n.destroy()
            })
        }
    }, go.generic.ns.bar_segment = class extends PIXI.NineSlicePlane {
        constructor(e, t, s, a, n, o, i, r) {
            super(e, t, s, a, n), this.width = o, this.height = i, this.tint = r
        }
    }, go.generic.ns.boardsides = class extends co {
        create() {
            this.parent.H.leftside.x = this.parent.S.setoptions.slot_bar1 ? -(ls(this.parent.barWidth) + us(this.parent.barWidthOffset)) : 0, this.parent.H.rightside.x = this.parent.S.setoptions.slot_bar2 ? ls(Wn.x * this.parent.X.W()) + ls(this.parent.barWidth) + us(this.parent.barWidthOffset) : ls(Wn.x * this.parent.X.W());
            let e = 1;
            if (this.parent.X.H() < 20 ? e = this.parent.X.H() / 20 : this.parent.X.H() > 30 && (e = this.parent.X.H() / 30), this.parent.H.leftside.scale.set(e), this.parent.H.rightside.scale.set(e), e < 1) {
                const t = .2 * (us(this.parent.sidesOffset) / e - us(this.parent.sidesOffset));
                this.parent.H.leftside.x -= t, this.parent.H.rightside.x += t
            }
        }
    }, go.generic.ns.stack = class extends co {
        create() {
            return this.stack = new PIXI.Container, this.stack.position.set(0, 0), this.parent.H.holder.addChild(this.stack), this.stack
        }
    }, go.generic.ns.falling = class extends co {
        create() {
            return this.falling = new PIXI.Container, this.falling.position.set(0, 0), this.parent.H.holder.addChild(this.falling), this.falling
        }
    }, go.generic.ns.backer = class extends co {
        create() {
            "full" === this.parent.H.displaymode && this.parent.S.setoptions.pro && !this.parent.S.setoptions.display_replay && (this.text = new TheoryType.Text("", {
                font: yn.get("hun"),
                rasterize: ["minimal", "low"].includes(te.video.graphics),
                fontSize: ls(138),
                weight: 600,
                tint: 16777215,
                outlineTint: 0,
                outlineWeight: 900,
                outlineAlpha: 1,
                alpha: .2,
                anchor: [.5, 0],
                ...this.options.font_opts
            }), this.text.position.set(ls(Wn.x * this.parent.X.Wh()), ls(3.25 * Wn.x)), this.parent.H.holder.addChild(this.text), this.parent.H.tintables.push(this.text), ["minimal", "low"].includes(te.video.graphics) || (this.activeFade = new go.generic.ns._helper_activefade({
                positions: [
                    [this.parent.X.Wh() - 2, this.parent.X.B() + 4],
                    [this.parent.X.Wh() + 0, this.parent.X.B() + 4],
                    [this.parent.X.Wh() + 2, this.parent.X.B() + 4],
                    [this.parent.X.Wh() - 3, this.parent.X.B() + 5],
                    [this.parent.X.Wh() - 1, this.parent.X.B() + 5],
                    [this.parent.X.Wh() + 1, this.parent.X.B() + 5]
                ],
                elements: [this.text],
                alphaHigh: .2,
                alphaLow: .1,
                ctx: this.parent.ctx
            })))
        }
        update(e) {
            this.text && (this.text.text = e)
        }
        progress(e) {
            this.activeFade && this.activeFade.progress(e)
        }
    }, go.generic.ns.zen = class extends co {
        create() {
            "full" === this.parent.H.displaymode && this.parent.S.setoptions.display_zen && (this.text_score = new TheoryType.Text("0", {
                font: yn.get("hun"),
                rasterize: ["minimal", "low"].includes(te.video.graphics),
                fontSize: ls(19),
                weight: 600,
                tint: 16777215,
                anchor: [.5, 0],
                ...this.options.font_opts_score
            }), this.text_score.position.set(ls(Wn.x * this.parent.X.Wh()), ls(Wn.x * this.parent.X.H() + 5)), this.parent.H.holder.addChild(this.text_score), this.parent.H.tintables.push(this.text_score), this.text_level = new TheoryType.Text("1", {
                font: yn.get("hun"),
                rasterize: ["minimal", "low"].includes(te.video.graphics),
                fontSize: ls(38),
                weight: 600,
                tint: 16777215,
                anchor: [.5, 0],
                ...this.options.font_opts_level
            }), this.text_level.position.set(ls(Wn.x * this.parent.X.Wh()), ls(Wn.x * this.parent.X.H() + 28)), this.parent.H.holder.addChild(this.text_level), this.parent.H.tintables.push(this.text_level), this.text_level_hiero = new TheoryType.Text("", {
                font: yn.get("hun"),
                rasterize: ["minimal", "low"].includes(te.video.graphics),
                fontSize: ls(19),
                weight: 600,
                tint: 16777215,
                anchor: [.5, 0],
                ...this.options.font_opts_level_hiero
            }), this.text_level_hiero.position.set(ls(Wn.x * this.parent.X.Wh()), ls(Wn.x * this.parent.X.H() + 64)), this.parent.H.holder.addChild(this.text_level_hiero), this.parent.H.tintables.push(this.text_level_hiero))
        }
        update(e, t) {
            this.text_score && (this.text_score.text = e.toLocaleString("en-US"), this.text_level.text = t, this.text_level_hiero.text = c(t))
        }
    }, go.generic.ns.counter = class extends co {
        create() {
            "full" === this.parent.H.displaymode && (this.text_title = new TheoryType.Text("", {
                font: yn.get("hun"),
                rasterize: ["minimal", "low"].includes(te.video.graphics),
                fontSize: ls(20),
                weight: 500,
                tint: 16777215,
                anchor: ["right" === this.options.side ? 0 : 1, 0],
                ...this.options.font_opts_title
            }), this.text_title.position.set(ls("right" === this.options.side ? 10 : -10), ls(this.options.y)), ("left" === this.options.side ? this.parent.H.leftside : this.parent.H.rightside).addChild(this.text_title), this.parent.H.tintables.push(this.text_title), this.text_value = new TheoryType.Text("", {
                font: yn.get("hun"),
                rasterize: ["minimal", "low"].includes(te.video.graphics),
                fontSize: ls(38),
                weight: 600,
                tint: 16777215,
                anchor: ["right" === this.options.side ? 0 : 1, 0],
                ...this.options.font_opts_value
            }), this.text_value.position.set(ls("right" === this.options.side ? 10 : -10), ls(this.options.y + 23)), ("left" === this.options.side ? this.parent.H.leftside : this.parent.H.rightside).addChild(this.text_value), this.parent.H.tintables.push(this.text_value), this.options.has_subtitle && (this.text_subtitle = new TheoryType.Text("", {
                font: yn.get("hun"),
                rasterize: ["minimal", "low"].includes(te.video.graphics),
                fontSize: ls(20),
                weight: 500,
                tint: 16777215,
                anchor: ["right" === this.options.side ? 0 : 1, 0],
                ...this.options.font_opts_subtitle
            }), this.text_subtitle.position.set(ls("right" === this.options.side ? 10 : -10), ls(this.options.y + 64)), ("left" === this.options.side ? this.parent.H.leftside : this.parent.H.rightside).addChild(this.text_subtitle), this.parent.H.tintables.push(this.text_subtitle)))
        }
        update(e, t, s) {
            this.text_value && (void 0 !== e && (this.text_value.text = e), void 0 !== s && (this.text_title.text = s), this.text_subtitle && void 0 !== t && (this.text_subtitle.text = t))
        }
    }, go.generic.ns.stock = class extends co {
        create() {
            if ("tiny" !== this.parent.H.displaymode) {
                this.stock = new PIXI.Container;
                for (let e = 0; e < this.parent.S.stock; e++) {
                    let t = new PIXI.Sprite(this.options.texture);
                    t.width = Wn.x, t.height = Wn.x, t.anchor.set(.5, .5), t.position.set(ls(e * Wn.x), 0), this.stock.addChild(t)
                }
                return this.stock.position.set(ls(Wn.x / 2) * (this.parent.X.W() - this.parent.S.stock) + ls(Wn.x / 2), ls(Wn.x * this.parent.X.H() + (this.parent.S.setoptions.display_username ? 36 : 10)) + ls(Wn.x / 2)), this.parent.H.holder.addChild(this.stock), this.stock
            }
        }
        action(e, t) {
            if ("tiny" !== this.parent.H.displaymode) switch (e) {
                case "drop": {
                    if (!this.stock.children.length) return;
                    let e = this.stock.children[this.stock.children.length - 1];
                    if ("full" === this.parent.H.displaymode) {
                        const t = $n(e, 0, 0);
                        sn.play("stock_explode", {
                            x: t.x,
                            y: t.y
                        })
                    }
                    e.destroy(), Gn.animate(this.stock, {
                        0: {
                            x: "inherit"
                        },
                        1: {
                            x: `${ls(Wn.x / 2) * (this.parent.X.W() - this.parent.S.stock) + ls(Wn.x / 2)}`
                        }
                    }, 1, BezierEasing(.17, .67, .35, 1));
                    break
                }
                case "fire": {
                    if ("full" !== this.parent.H.displaymode) return;
                    if (!this.stock.children.length) return;
                    let e = this.stock.children[this.stock.children.length - 1];
                    e.rotation += Math.max(.03 * t.dT, .1 * e.rotation * t.dT);
                    break
                }
            }
        }
    }, go.generic.ns.b2b = class extends co {
        create(e) {
            this.text || "off" !== te.video.actiontext && "minimal" !== te.video.graphics && "full" === this.parent.H.displaymode && (this.text = new TheoryType.Text(`B2B \fc3X\f5${e}`, {
                font: yn.get("hun"),
                rasterize: ["minimal", "low"].includes(te.video.graphics),
                fontSize: ls(this.options.size),
                weight: 600,
                tint: 16767332,
                anchor: [1, 0],
                ...this.options.font_opts
            }), this.text.position.set(ls(-10), ls(this.options.y)), this.parent.H.leftside.addChild(this.text), this.animid = Gn.animate(this.text, {
                0: {
                    letterSpacing: 0
                },
                1: {
                    letterSpacing: 10
                }
            }, 6, BezierEasing(.1, .38, 0, .88)))
        }
        update(e, t) {
            if ("full" === this.parent.H.displaymode)
                if (this.text) switch (Gn.stop(this.animid), e) {
                    case "up":
                        this.text.text = `B2B \fc3X\f5${t}`, this.animid = Gn.animate(this.text, {
                            0: {
                                letterSpacing: 0
                            },
                            1: {
                                letterSpacing: 10
                            }
                        }, 6, BezierEasing(.1, .38, 0, .88));
                        break;
                    case "up_large":
                        this.text.text = `B2B \fc3X\f5${t}`, this.animid = Gn.animate(this.text, {
                            0: {
                                alpha: 1,
                                letterSpacing: 0
                            },
                            .16: {
                                alpha: 1,
                                letterSpacing: 0
                            },
                            .17: {
                                alpha: 0,
                                letterSpacing: 0
                            },
                            .33: {
                                alpha: 0,
                                letterSpacing: 0
                            },
                            .34: {
                                alpha: 1,
                                letterSpacing: 0
                            },
                            "0.50": {
                                alpha: 1,
                                letterSpacing: 0
                            },
                            .51: {
                                alpha: 0,
                                letterSpacing: 0
                            },
                            .66: {
                                alpha: 0,
                                letterSpacing: 0
                            },
                            .67: {
                                alpha: .99,
                                letterSpacing: 0
                            },
                            1: {
                                alpha: 1,
                                letterSpacing: 10
                            }
                        }, 2, BezierEasing(.1, .38, 0, .88));
                        break;
                    case "down":
                        this.delete();
                        break;
                    case "down_large":
                        this.text.tint = 14950946, this.text.text = "B2B \fc3X\f50", this.animid = Gn.animate(this.text, {
                            0: {
                                alpha: 1,
                                weight: 600,
                                letterSpacing: 0
                            },
                            .1: {
                                alpha: 1,
                                weight: 600,
                                letterSpacing: 0
                            },
                            .105: {
                                alpha: 0,
                                weight: 600,
                                letterSpacing: 0
                            },
                            .2: {
                                alpha: 0,
                                weight: 600,
                                letterSpacing: 0
                            },
                            .205: {
                                alpha: 1,
                                weight: 600,
                                letterSpacing: 0
                            },
                            .3: {
                                alpha: 1,
                                weight: 600,
                                letterSpacing: 0
                            },
                            .305: {
                                alpha: 0,
                                weight: 600,
                                letterSpacing: 0
                            },
                            .4: {
                                alpha: 0,
                                weight: 600,
                                letterSpacing: 0
                            },
                            .405: {
                                alpha: 1,
                                weight: 600,
                                letterSpacing: 0
                            },
                            .5: {
                                alpha: 1,
                                weight: 600,
                                letterSpacing: 0
                            },
                            .505: {
                                alpha: 0,
                                weight: 600,
                                letterSpacing: 0
                            },
                            .6: {
                                alpha: 0,
                                weight: 600,
                                letterSpacing: 0
                            },
                            .605: {
                                alpha: 1,
                                weight: 600,
                                letterSpacing: 0
                            },
                            1: {
                                alpha: 0,
                                weight: 0,
                                letterSpacing: 10
                            }
                        }, 4, BezierEasing(.1, .38, 0, .88), () => {
                            this.delete()
                        })
                } else ["up", "up_large"].includes(e) && this.create(t)
        }
        delete() {
            this.text && (this.text.destroy(), this.text = null)
        }
    }, go.generic.ns.popup_defense = class extends uo {
        create(e, t = {}) {
            if (this.text && this.delete(), "off" === te.video.actiontext || "some" === te.video.actiontext) return;
            if ("minimal" === te.video.graphics) return;
            if ("full" !== this.parent.H.displaymode) return;
            this.text = new TheoryType.Text(e, {
                font: yn.get("hun"),
                rasterize: "minimal" === te.video.graphics,
                fontSize: ls(40 + 4 * Math.min(10, e)),
                weight: 700,
                tint: 46335,
                anchor: [.5, .5],
                outlineTint: 0,
                outlineWeight: 950,
                outlineAlpha: 1,
                misalignment: [1, 3, .1],
                ...this.options.font_opts
            });
            const s = .25 * Math.random() - .125,
                a = .25 * Math.random() - .125;
            this.text.rotation = s, this.text.position.set(ls(Wn.x * t.x), ls(Wn.x * (t.y - (this.parent.X.B() - .5)))), this.parent.H.holder.addChild(this.text);
            const n = Math.atan2(t.y - this.parent.X.B() - this.parent.X.Hh(), t.x - this.parent.X.Wh()) + Math.PI / 2;
            Gn.animate(this.text, {
                0: {
                    x: ls(Wn.x * t.x),
                    y: ls(Wn.x * (t.y - (this.parent.X.B() - .5))),
                    rotation: s,
                    alpha: 1,
                    weight: 700
                },
                .8: {
                    x: ls(Wn.x * t.x) - ls(1.6 * Wn.x * Math.sin(n)),
                    y: ls(Wn.x * (t.y - (this.parent.X.B() - .5))) + ls(1.6 * Wn.x * Math.cos(n)),
                    rotation: s + .8 * a,
                    alpha: .7,
                    weight: 700
                },
                1: {
                    x: ls(Wn.x * t.x) - ls(2 * Wn.x * Math.sin(n)),
                    y: ls(Wn.x * (t.y - (this.parent.X.B() - .5))) + ls(2 * Wn.x * Math.cos(n)),
                    rotation: s + a,
                    alpha: 0,
                    weight: 500
                }
            }, 2, BezierEasing(.1, .38, 0, .88), () => {
                this.delete()
            })
        }
        delete() {
            this.text && (this.text.destroy(), this.text = null)
        }
    }, go.generic.ns.popup_offence = class extends uo {
        create(e, t = {}) {
            if (this.text && this.delete(), "off" === te.video.actiontext || "some" === te.video.actiontext) return;
            if ("minimal" === te.video.graphics) return;
            if ("full" !== this.parent.H.displaymode) return;
            t.y = Math.min(t.y, 39);
            const s = 1.6 + .12 * Math.min(30, e);
            this.text = new TheoryType.Text(e, {
                font: yn.get("hun"),
                rasterize: "minimal" === te.video.graphics,
                fontSize: ls(Wn.x * s),
                weight: 600,
                tint: 0,
                anchor: [.5, .5],
                outlineTint: 16777215,
                outlineWeight: 950,
                outlineAlpha: 1,
                misalignment: [1 + .1 * Math.min(30, e), 1 + .1 * Math.min(30, e), .2],
                useProjection: !0,
                projection: [
                    [0, 0],
                    [1, 0],
                    [0, 1],
                    [1, 1]
                ],
                ...this.options.font_opts
            });
            let a = Math.atan2(t.y - this.parent.X.B() - this.parent.X.Hh(), t.x - this.parent.X.Wh()) + Math.PI / 2,
                n = t.x,
                o = t.y,
                i = t.x + 1.5 * s * Math.sin(a),
                r = t.y - 1.5 * s * Math.cos(a);
            i = Math.min(13.5, Math.max(-3.5, i)), r = Math.min(42.5, Math.max(17.5, r));
            let l = !0;
            this.parent.ctx.bhm.IsInactive(i, r, e >= 10) || (i = t.x + 3 * s * Math.sin(a), r = t.y - 3 * s * Math.cos(a), i = Math.min(13.5, Math.max(-3.5, i)), r = Math.min(42.5, Math.max(17.5, r))), e >= 10 && i >= 9 && (r - this.parent.X.B()) / this.parent.X.H() > -.1 && (r - this.parent.X.B()) / this.parent.X.H() <= .85 && (this.text.fillAlpha = .5, this.text.outlineAlpha = .75, l = !1), e >= 10 && i <= 1 && (r - this.parent.X.B()) / this.parent.X.H() > -.1 && (r - this.parent.X.B()) / this.parent.X.H() <= .35 && (this.text.fillAlpha = .5, this.text.outlineAlpha = .75, l = !1), this.text.x = ls(Wn.x * n), this.text.y = ls(Wn.x * (o - (this.parent.X.B() - .5))), this.text.scale.set(0), this.parent.H.holder.addChild(this.text), a < -.25 * Math.PI || a > 1.25 * Math.PI ? (this.text.projection[0].x = .1 * Math.random() - .05, this.text.projection[0].y = e >= 10 ? -.1 : -.05, this.text.projection[2].x = .1 * Math.random() - .05, this.text.projection[2].y = e >= 10 ? 1.1 : 1.05, this.text.rotation = a - 1.5 * Math.PI, this.text.anchor.x = 1) : a < .25 * Math.PI ? (this.text.projection[0].x = -.05, this.text.projection[0].y = .1 * Math.random() - .05, this.text.projection[1].x = 1.05, this.text.projection[1].y = .1 * Math.random() - .05, this.text.rotation = a, this.text.anchor.y = 1) : a < .75 * Math.PI ? (this.text.projection[1].x = .1 * Math.random() - .05 + 1, this.text.projection[1].y = e >= 10 ? -.1 : -.05, this.text.projection[3].x = .1 * Math.random() - .05 + 1, this.text.projection[3].y = e >= 10 ? 1.1 : 1.05, this.text.rotation = a - .5 * Math.PI, this.text.anchor.x = 0) : (this.text.projection[2].x = -.05, this.text.projection[2].y = .1 * Math.random() - .05 + 1, this.text.projection[3].x = 1.05, this.text.projection[3].y = .1 * Math.random() - .05 + 1, this.text.rotation = a - 1 * Math.PI, this.text.anchor.y = 0);
            const c = e.toString();
            for (let e = 0; e < c.length; e++) this.text.overrides.get(e).scale = .2, setTimeout(() => {
                this.text && !this.text._destroyed && Gn.animate(this.text.overrides.get(e), {
                    0: {
                        scale: .2
                    },
                    1: {
                        scale: 1
                    }
                }, .2, BezierEasing(.03, .51, .61, .85))
            }, e * (250 / c.length));
            Gn.animate(this.text, {
                0: {
                    alpha: 1,
                    "scale.x": 0,
                    "scale.y": 0,
                    weight: 600,
                    x: ls(Wn.x * n),
                    y: ls(Wn.x * (o - (this.parent.X.B() - .5)))
                },
                .3: {
                    alpha: 1,
                    "scale.x": 1,
                    "scale.y": 1,
                    weight: 700,
                    x: ls(Wn.x * i),
                    y: ls(Wn.x * (r - (this.parent.X.B() - .5)))
                },
                1: {
                    alpha: 0,
                    "scale.x": 1.1,
                    "scale.y": 1.1,
                    weight: 600,
                    x: ls(Wn.x * i),
                    y: ls(Wn.x * (r - (this.parent.X.B() - .5)))
                }
            }, 2, BezierEasing(0, .71, .51, .15), () => {
                this.delete()
            }), e >= 20 ? Gn.animate(this.text, {
                0: {
                    tint: 16777215,
                    outlineTint: 0
                },
                .2: {
                    tint: 16777215,
                    outlineTint: 0
                },
                .201: {
                    tint: 0,
                    outlineTint: 16777215
                },
                .4: {
                    tint: 0,
                    outlineTint: 16777215
                },
                .401: {
                    tint: 16777215,
                    outlineTint: 0
                },
                .6: {
                    tint: 16777215,
                    outlineTint: 0
                },
                .601: {
                    tint: 0,
                    outlineTint: 16777215
                },
                .8: {
                    tint: 0,
                    outlineTint: 16777215
                },
                .801: {
                    tint: 16777215,
                    outlineTint: 0
                },
                .999: {
                    tint: 16777215,
                    outlineTint: 0
                },
                1: {
                    tint: 0,
                    outlineTint: 16777215
                }
            }, .5) : e >= 10 && Gn.animate(this.text, {
                0: {
                    tint: 16777215,
                    outlineTint: 0
                },
                .33: {
                    tint: 16777215,
                    outlineTint: 0
                },
                .331: {
                    tint: 0,
                    outlineTint: 16777215
                },
                .66: {
                    tint: 0,
                    outlineTint: 16777215
                },
                .661: {
                    tint: 16777215,
                    outlineTint: 0
                },
                .999: {
                    tint: 16777215,
                    outlineTint: 0
                },
                1: {
                    tint: 0,
                    outlineTint: 16777215
                }
            }, .33), l && (this.activeFade = new go.generic.ns._helper_activefade({
                positions: [
                    [i, r, e >= 10]
                ],
                elements: [this.text],
                keyvalues: [
                    ["fillAlpha", 1, .15],
                    ["outlineAlpha", 1, .35]
                ],
                ctx: this.parent.ctx,
                interval: 5,
                speed: .05
            }))
        }
        delete() {
            this.text && (this.text.destroy(), this.text = null)
        }
        progress(e) {
            this.text && this.activeFade && this.activeFade.progress(e)
        }
    }, go.generic.ns.skyline = class extends co {
        create() {
            if ("full" !== this.parent.H.displaymode) return;
            if (this.nsp) return;
            const e = this.options.offsets || [0, 0, 0, 0];
            return this.nsp = new PIXI.NineSlicePlane(this.options.texture, ...this.options.slices.map(e => e ? e + 2 : e)), this.nsp.width = ps(Wn.x * this.parent.X.W()) + e[0] + e[2], this.nsp.height = this.options.height + e[1] + e[3], this.nsp.position.set(-us(e[0]), -us(e[1])), this.nsp.alpha = .5, this.nsp.scale.set(us(1)), this.parent.H.holder.addChild(this.nsp), this
        }
        update() {
            this.nsp || this.create(), this.nsp.alpha = .25 * Math.random() + .5
        }
        delete() {
            this.nsp && (this.nsp.destroy(), this.nsp = null)
        }
    }, go.generic.ns.garbagedangericon = class extends co {
        create() {
            if ("full" === this.parent.H.displaymode && !this.spr) return this.spr = new PIXI.Sprite(this.options.texture), this.spr.anchor.set(.5, .5), this.spr.position.set(0, ls(Wn.x * this.parent.X.Hh())), this.spr.scale.set(0), this.parent.H.holder.addChild(this.spr), Gn.animate(this.spr, {
                0: {
                    "scale.x": 0,
                    "scale.y": 0
                },
                .05: {
                    "scale.x": us(2 * this.options.scale),
                    "scale.y": us(2 * this.options.scale)
                },
                .1: {
                    "scale.x": us(1 * this.options.scale),
                    "scale.y": us(1 * this.options.scale)
                },
                .2: {
                    "scale.x": us(2 * this.options.scale),
                    "scale.y": us(2 * this.options.scale)
                },
                .3: {
                    "scale.x": us(1 * this.options.scale),
                    "scale.y": us(1 * this.options.scale)
                },
                .5: {
                    "scale.x": us(2 * this.options.scale),
                    "scale.y": us(2 * this.options.scale)
                },
                1: {
                    "scale.x": us(1 * this.options.scale),
                    "scale.y": us(1 * this.options.scale)
                }
            }, 5, BezierEasing(.03, .8, .5, .93)), this
        }
        delete() {
            this.spr && (this.spr.destroy(), this.spr = null)
        }
    }, go.generic.ns.targeticon = class extends co {
        create() {
            if (!this.spr) return this.spr = new PIXI.Sprite(this.options.texture), this.spr.anchor.set(.5, .5), this.spr.position.set(ls(Wn.x * this.parent.X.Wh()), ls(Wn.x * this.parent.X.Hh())), this.spr.scale.set(0), this.parent.H.holder.addChild(this.spr), "tiny" !== this.parent.H.displaymode ? Gn.animate(this.spr, {
                0: {
                    "scale.x": 0,
                    "scale.y": 0
                },
                .2: {
                    "scale.x": us(4 * this.options.scale),
                    "scale.y": us(4 * this.options.scale)
                },
                1: {
                    "scale.x": us(3 * this.options.scale),
                    "scale.y": us(3 * this.options.scale)
                }
            }, .3, BezierEasing(.03, .8, .5, .93)) : this.spr.scale.set(us(4 * this.options.scale)), this
        }
        delete() {
            this.spr && (this.spr.destroy(), this.spr = null)
        }
    }, go.generic.ns.next = class extends co {
        create() {
            if ("tiny" === this.parent.H.displaymode) return;
            if (!1 === this.parent.S.setoptions.display_next) return;
            const e = this.options.offsets || [0, 0, 0, 0];
            this.nsp = new PIXI.NineSlicePlane(this.options.texture, ...this.options.slices.map(e => e ? e + 2 : e)), this.nsp.width = ps(36 + 4 * Wn.x) + e[0] + e[2], this.nsp.height = ps(28 + 3 * Wn.x * (this.parent.S.setoptions.nextcount || 5)) + e[1] + e[3], this.nsp.position.set(-us(e[0]), -us(e[1])), this.nsp.scale.set(us(1)), this.parent.H.rightside.addChild(this.nsp), this.parent.H.tintables.push(this.nsp), this.containers = [];
            for (let t = 0; t < this.parent.S.setoptions.nextcount; t++) this.containers[t] = new PIXI.Container, this.containers[t].position.set(ps(18 + 2 * Wn.x) + e[0], ps(27 + 1.5 * Wn.x + 3 * Wn.x * t) + e[1]), this.containers[t].scale.set(ms(1)), this.nsp.addChild(this.containers[t]);
            return this.containers
        }
    }, go.generic.ns.hold = class extends co {
        create() {
            if ("tiny" === this.parent.H.displaymode) return;
            if (!1 === this.parent.S.setoptions.display_hold) return;
            const e = this.options.offsets || [0, 0, 0, 0];
            return this.nsp = new PIXI.NineSlicePlane(this.options.texture, ...this.options.slices.map(e => e ? e + 2 : e)), this.nsp.width = ps(36 + 4 * Wn.x) + e[0] + e[2], this.nsp.height = ps(28 + 3 * Wn.x) + e[1] + e[3], this.nsp.position.set(-ls(36 + 4 * Wn.x) - us(e[0]), -us(e[1])), this.nsp.scale.set(us(1)), this.parent.H.leftside.addChild(this.nsp), this.parent.H.tintables.push(this.nsp), this.container = new PIXI.Container, this.container.position.set(ps(18 + 2 * Wn.x) + e[0], ps(27 + 1.5 * Wn.x) + e[1]), this.container.scale.set(ms(1)), this.nsp.addChild(this.container), this.container
        }
    }, go.generic.ns.splash = class extends uo {
        create(e, t = {}) {
            if (this.text && this.delete(), "off" !== te.video.actiontext && "minimal" !== te.video.graphics && "full" === this.parent.H.displaymode) switch (this.text = new TheoryType.Text(e, {
                    font: yn.get("hun"),
                    rasterize: "minimal" === te.video.graphics,
                    fontSize: ls(this.options.size),
                    weight: 600,
                    tint: t.color || this.options.color,
                    anchor: [1, 0],
                    ...this.options.font_opts
                }), this.text.position.set(ls(-10), ls(this.options.y)), this.parent.H.leftside.addChild(this.text), this.options.animation) {
                case "normal":
                    Gn.animate(this.text, {
                        0: {
                            letterSpacing: 0,
                            alpha: 1,
                            weight: 600
                        },
                        .6: {
                            letterSpacing: 10,
                            alpha: .95,
                            weight: 570
                        },
                        1: {
                            letterSpacing: 20,
                            alpha: 0,
                            weight: 0
                        }
                    }, 6, BezierEasing(.1, .38, 0, .88), () => {
                        this.delete()
                    });
                    break;
                case "bounce":
                    Gn.animate(this.text, {
                        0: {
                            y: `${this.options.y}r`,
                            alpha: 1,
                            weight: 600
                        },
                        .1: {
                            y: `${this.options.y - 10}r`,
                            alpha: 1,
                            weight: 600
                        },
                        .2: {
                            y: `${this.options.y}r`,
                            alpha: 1,
                            weight: 600
                        },
                        .6: {
                            y: `${this.options.y}r`,
                            alpha: .95,
                            weight: 570
                        },
                        1: {
                            y: `${this.options.y}r`,
                            alpha: 0,
                            weight: 0
                        }
                    }, 6, BezierEasing(.1, .38, 0, .88), () => {
                        this.delete()
                    })
            }
        }
        delete() {
            this.text && (this.text.destroy(), this.text = null)
        }
    }, go.generic.ns.shout = class extends uo {
        create(e, t = {}) {
            "full" === this.parent.H.displaymode && (this.text && this.delete(), this.options.hasShadow && "minimal" !== te.video.graphics && (this.textShadow = new TheoryType.Text(e, {
                font: yn.get("hun"),
                rasterize: "minimal" === te.video.graphics,
                fontSize: ls(this.options.size / this.parent.X.S()),
                weight: 700,
                tint: this.options.shadowColor,
                anchor: [.5, .5],
                align: "center",
                ...this.options.font_opts
            }), this.textShadow.blendMode = PIXI.BLEND_MODES.SCREEN, this.textShadow.position.set(ls(Wn.x * this.parent.X.Wh()), this.options.y), this.parent.H.holder.addChild(this.textShadow)), this.text = new TheoryType.Text(e, {
                font: yn.get("hun"),
                rasterize: "minimal" === te.video.graphics,
                fontSize: ls(this.options.size / this.parent.X.S()),
                weight: 700,
                tint: this.options.color,
                anchor: [.5, .5],
                align: "center",
                ...this.options.font_opts
            }), this.text.blendMode = PIXI.BLEND_MODES.SCREEN, this.text.position.set(ls(Wn.x * this.parent.X.Wh()), this.options.y), this.parent.H.holder.addChild(this.text), "minimal" !== te.video.graphics ? (Gn.animate(this.text, this.options.animation, this.options.animationDuration, this.options.animationEasing, () => {
                this.delete()
            }), this.options.hasShadow && Gn.animate(this.textShadow, this.options.animationShadow, this.options.animationShadowDuration, this.options.animationShadowEasing, () => {
                this.textShadow.destroy()
            })) : setTimeout(() => {
                this.delete()
            }, 1e3 * (this.options.flatAnimationDuration || 0) || 1e3 * this.options.animationDuration), "ultra" === te.video.graphics && this.options.ultra && setTimeout(() => {
                const e = $n(this.parent.H.holder, this.text.x, this.text.y);
                this.options.ultra(e.x, e.y)
            }, 10))
        }
        delete() {
            this.text && (this.text.destroy(), this.text = null), this.textShadow && (this.textShadow.destroy(), this.textShadow = null)
        }
    }, go.generic.ns.username = class extends co {
        create() {
            const e = this.options.offsets || [0, 0, 0, 0],
                t = this.options.offsets_fire || [0, 0, 0, 0];
            this.parent.S.setoptions.display_username && ("tiny" === this.parent.H.displaymode && "low" === te.video.caching || (this.bg = new PIXI.NineSlicePlane(this.options.texture, ...this.options.slices.map(e => e ? e + 2 : e)), this.bg.width = ps(Wn.x * this.parent.X.W()) + e[0] + e[2], this.bg.height = ps(26) + e[1] + e[3], this.bg.scale.set(us(1)), this.bg.position.set(ls(Wn.x * this.parent.X.Wh()), ls(Wn.x * this.parent.X.H() + 10)), this.bg.pivot.set(ps(Wn.x * this.parent.X.Wh()) + e[0], e[1]), this.parent.H.holder.addChild(this.bg), this.parent.H.tintables.push(this.bg), this.parent.S.setoptions.display_fire && (this.fg = new PIXI.NineSlicePlane(this.options.texture_fire, ...this.options.slices_fire.map(e => e ? e + 2 : e)), this.fg.width = 0, this.fg.height = ps(26) + t[1] + t[3], this.fg.scale.set(us(1)), this.fg.alpha = 0, this.fg.position.set(ls(Wn.x * this.parent.X.Wh()), ls(Wn.x * this.parent.X.H() + 10)), this.fg.pivot.set(0, t[1]), this.parent.H.holder.addChild(this.fg), this.parent.H.tintables.push(this.fg)), this.text = new TheoryType.Text(this.parent.S.setoptions.username.toUpperCase() || "", {
                font: yn.get("hun"),
                rasterize: "minimal" === te.video.graphics,
                fontSize: ls(19),
                weight: 600,
                tint: 16777215,
                anchor: [.5, 0],
                ...this.options.font_opts
            }), this.text.position.set(ls(Wn.x * this.parent.X.Wh()), ls(Wn.x * this.parent.X.H() + 15)), this.parent.H.holder.addChild(this.text), this.parent.H.hybridtintables.push(this.text)))
        }
        update(e) {
            if (!this.fg) return;
            const t = this.options.offsets_fire || [0, 0, 0, 0];
            if ("tiny" === this.parent.H.displaymode) this.fg.alpha = e >= 500 ? .2 + Math.min(.7, (e - 500) / 20) : 0, this.fg.width = ps(Wn.x * this.parent.X.W()) + t[0] + t[2], this.fg.pivot.x = ps(Wn.x * this.parent.X.Wh());
            else {
                this.fg.alpha = e >= 500 ? .2 + Math.min(.7, (e - 500) / 20) : .1 + e / 3500;
                const s = e >= 500 ? 1 + (e - 500) / 1500 : e / 500;
                this.fg.width = (ps(Wn.x * this.parent.X.W()) + t[0] + t[2]) * s, this.fg.pivot.x = ps(Wn.x * this.parent.X.Wh()) * s
            }
        }
        action(e) {
            switch (e) {
                case "startfire": {
                    const e = $n(this.parent.H.stackobj, 0, 0);
                    sn.play("fire_flair", {
                        x: e.x,
                        y: e.y,
                        w: this.parent.X.W() * this.parent.X.S(),
                        h: this.parent.X.H() * this.parent.X.S()
                    });
                    break
                }
                case "continuefire":
                    if ("tiny" === this.parent.H.displaymode) {
                        const e = $n(this.parent.H.holder, ls(Wn.x * this.parent.X.Wh()), ls(Wn.x * this.parent.X.Hh()));
                        sn.play("fire_burning", {
                            x: e.x,
                            y: e.y
                        })
                    } else {
                        const e = $n(this.parent.H.stackobj, 0, 0);
                        sn.play("fire_burn", {
                            x: e.x,
                            y: e.y,
                            w: this.parent.X.W() * this.parent.X.S(),
                            h: this.parent.X.H() * this.parent.X.S()
                        })
                    }
            }
        }
    }, go.generic.ns.replaytag = class extends co {
        create() {
            if ("full" === this.parent.H.displaymode && this.parent.S.setoptions.display_replay) return this.spr = new PIXI.Sprite(this.options.texture), this.spr.anchor.set(1, 0), this.spr.position.set(ls(Wn.x * this.parent.X.W()), ls(.5 * Wn.x)), this.spr.scale.set(us(1)), this.parent.H.holder.addChild(this.spr), this.parent.H.tintables.push(this.spr), ["minimal", "low"].includes(te.video.graphics) || (this.activeFade = new go.generic.ns._helper_activefade({
                positions: [
                    [this.parent.X.W() - 5, this.parent.X.B() + 1],
                    [this.parent.X.W() - 3, this.parent.X.B() + 1],
                    [this.parent.X.W() - 1, this.parent.X.B() + 1]
                ],
                elements: [this.spr],
                alphaHigh: 1,
                alphaLow: .5,
                ctx: this.parent.ctx
            })), this
        }
        progress(e) {
            this.activeFade && this.activeFade.progress(e)
        }
    }, go.generic.ns._helper_activefade = class {
        constructor(e) {
            "full" === e.ctx.hm.H.displaymode && "minimal" !== te.video.graphics && (this.options = e, this.tick = 0, this.state = !0)
        }
        progress(e) {
            "full" === this.options.ctx.hm.H.displaymode && "minimal" !== te.video.graphics && (this.tick += e, this.tick >= (this.options.interval || 15) && (this.tick -= this.options.interval || 15, this._check()))
        }
        _check() {
            const e = this.options.positions.every(e => this.options.ctx.bhm.IsInactive(...e));
            e !== this.state && (e ? this._animateInactive() : this._animateActive(), this.state = e)
        }
        _animateInactive() {
            for (const e of this.options.elements) {
                const t = {
                    0: {},
                    1: {}
                };
                if (this.options.keyvalues)
                    for (const e of this.options.keyvalues) t[0][e[0]] = e[2], t[1][e[0]] = e[1];
                else t[0] = {
                    alpha: this.options.alphaLow
                }, t[1] = {
                    alpha: this.options.alphaHigh
                };
                Gn.animate(e, t, .2)
            }
        }
        _animateActive() {
            for (const e of this.options.elements) {
                const t = {
                    0: {},
                    1: {}
                };
                if (this.options.keyvalues)
                    for (const e of this.options.keyvalues) t[0][e[0]] = e[1], t[1][e[0]] = e[2];
                else t[0] = {
                    alpha: this.options.alphaHigh
                }, t[1] = {
                    alpha: this.options.alphaLow
                };
                Gn.animate(e, t, this.options.speed || .1)
            }
        }
    };
    const ho = {
            minotypes: ["z", "l", "o", "s", "i", "j", "t"],
            tetrominoes: {
                z: {
                    matrix: {
                        w: 3,
                        h: 3,
                        dx: 1,
                        dy: 1,
                        data: [
                            [
                                [0, 0, 199],
                                [1, 0, 114],
                                [1, 1, 39],
                                [2, 1, 124]
                            ],
                            [
                                [2, 0, 241],
                                [1, 1, 201],
                                [2, 1, 156],
                                [1, 2, 31]
                            ],
                            [
                                [0, 1, 199],
                                [1, 1, 114],
                                [1, 2, 39],
                                [2, 2, 124]
                            ],
                            [
                                [1, 0, 241],
                                [0, 1, 201],
                                [1, 1, 156],
                                [0, 2, 31]
                            ]
                        ]
                    },
                    preview: {
                        w: 3,
                        h: 2,
                        data: [
                            [0, 0, 199],
                            [1, 0, 114],
                            [1, 1, 39],
                            [2, 1, 124]
                        ]
                    }
                },
                l: {
                    matrix: {
                        w: 3,
                        h: 3,
                        dx: 1,
                        dy: 1,
                        data: [
                            [
                                [2, 0, 241],
                                [0, 1, 199],
                                [1, 1, 68],
                                [2, 1, 156]
                            ],
                            [
                                [1, 0, 241],
                                [1, 1, 17],
                                [1, 2, 39],
                                [2, 2, 124]
                            ],
                            [
                                [0, 1, 201],
                                [1, 1, 68],
                                [2, 1, 124],
                                [0, 2, 31]
                            ],
                            [
                                [0, 0, 199],
                                [1, 0, 114],
                                [1, 1, 17],
                                [1, 2, 31]
                            ]
                        ]
                    },
                    preview: {
                        w: 3,
                        h: 2,
                        data: [
                            [2, 0, 241],
                            [0, 1, 199],
                            [1, 1, 68],
                            [2, 1, 156]
                        ]
                    }
                },
                o: {
                    matrix: {
                        w: 2,
                        h: 2,
                        dx: 0,
                        dy: 1,
                        data: [
                            [
                                [0, 0, 193],
                                [1, 0, 112],
                                [0, 1, 7],
                                [1, 1, 28]
                            ],
                            [
                                [0, 0, 193],
                                [1, 0, 112],
                                [0, 1, 7],
                                [1, 1, 28]
                            ],
                            [
                                [0, 0, 193],
                                [1, 0, 112],
                                [0, 1, 7],
                                [1, 1, 28]
                            ],
                            [
                                [0, 0, 193],
                                [1, 0, 112],
                                [0, 1, 7],
                                [1, 1, 28]
                            ]
                        ]
                    },
                    preview: {
                        w: 2,
                        h: 2,
                        data: [
                            [0, 0, 193],
                            [1, 0, 112],
                            [0, 1, 7],
                            [1, 1, 28]
                        ]
                    }
                },
                s: {
                    matrix: {
                        w: 3,
                        h: 3,
                        dx: 1,
                        dy: 1,
                        data: [
                            [
                                [1, 0, 201],
                                [2, 0, 124],
                                [0, 1, 199],
                                [1, 1, 156]
                            ],
                            [
                                [1, 0, 241],
                                [1, 1, 39],
                                [2, 1, 114],
                                [2, 2, 31]
                            ],
                            [
                                [1, 1, 201],
                                [2, 1, 124],
                                [0, 2, 199],
                                [1, 2, 156]
                            ],
                            [
                                [0, 0, 241],
                                [0, 1, 39],
                                [1, 1, 114],
                                [1, 2, 31]
                            ]
                        ]
                    },
                    preview: {
                        w: 3,
                        h: 2,
                        data: [
                            [1, 0, 201],
                            [2, 0, 124],
                            [0, 1, 199],
                            [1, 1, 156]
                        ]
                    }
                },
                i: {
                    matrix: {
                        w: 4,
                        h: 4,
                        dx: 1,
                        dy: 1,
                        data: [
                            [
                                [0, 1, 199],
                                [1, 1, 68],
                                [2, 1, 68],
                                [3, 1, 124]
                            ],
                            [
                                [2, 0, 241],
                                [2, 1, 17],
                                [2, 2, 17],
                                [2, 3, 31]
                            ],
                            [
                                [0, 2, 199],
                                [1, 2, 68],
                                [2, 2, 68],
                                [3, 2, 124]
                            ],
                            [
                                [1, 0, 241],
                                [1, 1, 17],
                                [1, 2, 17],
                                [1, 3, 31]
                            ]
                        ]
                    },
                    preview: {
                        w: 4,
                        h: 1,
                        data: [
                            [0, 0, 199],
                            [1, 0, 68],
                            [2, 0, 68],
                            [3, 0, 124]
                        ]
                    }
                },
                j: {
                    matrix: {
                        w: 3,
                        h: 3,
                        dx: 1,
                        dy: 1,
                        data: [
                            [
                                [0, 0, 241],
                                [0, 1, 39],
                                [1, 1, 68],
                                [2, 1, 124]
                            ],
                            [
                                [1, 0, 201],
                                [2, 0, 124],
                                [1, 1, 17],
                                [1, 2, 31]
                            ],
                            [
                                [0, 1, 199],
                                [1, 1, 68],
                                [2, 1, 114],
                                [2, 2, 31]
                            ],
                            [
                                [1, 0, 241],
                                [1, 1, 17],
                                [0, 2, 199],
                                [1, 2, 156]
                            ]
                        ]
                    },
                    preview: {
                        w: 3,
                        h: 2,
                        data: [
                            [0, 0, 241],
                            [0, 1, 39],
                            [1, 1, 68],
                            [2, 1, 124]
                        ]
                    }
                },
                t: {
                    matrix: {
                        w: 3,
                        h: 3,
                        dx: 1,
                        dy: 1,
                        data: [
                            [
                                [1, 0, 241],
                                [0, 1, 199],
                                [1, 1, 164],
                                [2, 1, 124]
                            ],
                            [
                                [1, 0, 241],
                                [1, 1, 41],
                                [2, 1, 124],
                                [1, 2, 31]
                            ],
                            [
                                [0, 1, 199],
                                [1, 1, 74],
                                [2, 1, 124],
                                [1, 2, 31]
                            ],
                            [
                                [1, 0, 241],
                                [0, 1, 199],
                                [1, 1, 146],
                                [1, 2, 31]
                            ]
                        ]
                    },
                    preview: {
                        w: 3,
                        h: 2,
                        data: [
                            [1, 0, 241],
                            [0, 1, 199],
                            [1, 1, 164],
                            [2, 1, 124]
                        ]
                    }
                }
            },
            kicksets: {
                SRS: {
                    kicks: {
                        "01": [
                            [-1, 0],
                            [-1, -1],
                            [0, 2],
                            [-1, 2]
                        ],
                        10: [
                            [1, 0],
                            [1, 1],
                            [0, -2],
                            [1, -2]
                        ],
                        12: [
                            [1, 0],
                            [1, 1],
                            [0, -2],
                            [1, -2]
                        ],
                        21: [
                            [-1, 0],
                            [-1, -1],
                            [0, 2],
                            [-1, 2]
                        ],
                        23: [
                            [1, 0],
                            [1, -1],
                            [0, 2],
                            [1, 2]
                        ],
                        32: [
                            [-1, 0],
                            [-1, 1],
                            [0, -2],
                            [-1, -2]
                        ],
                        30: [
                            [-1, 0],
                            [-1, 1],
                            [0, -2],
                            [-1, -2]
                        ],
                        "03": [
                            [1, 0],
                            [1, -1],
                            [0, 2],
                            [1, 2]
                        ],
                        "02": [
                            [0, -1],
                            [1, -1],
                            [-1, -1],
                            [1, 0],
                            [-1, 0]
                        ],
                        13: [
                            [1, 0],
                            [1, -2],
                            [1, -1],
                            [0, -2],
                            [0, -1]
                        ],
                        20: [
                            [0, 1],
                            [-1, 1],
                            [1, 1],
                            [-1, 0],
                            [1, 0]
                        ],
                        31: [
                            [-1, 0],
                            [-1, -2],
                            [-1, -1],
                            [0, -2],
                            [0, -1]
                        ]
                    },
                    i_kicks: {
                        "01": [
                            [-2, 0],
                            [1, 0],
                            [-2, 1],
                            [1, -2]
                        ],
                        10: [
                            [2, 0],
                            [-1, 0],
                            [2, -1],
                            [-1, 2]
                        ],
                        12: [
                            [-1, 0],
                            [2, 0],
                            [-1, -2],
                            [2, 1]
                        ],
                        21: [
                            [1, 0],
                            [-2, 0],
                            [1, 2],
                            [-2, -1]
                        ],
                        23: [
                            [2, 0],
                            [-1, 0],
                            [2, -1],
                            [-1, 2]
                        ],
                        32: [
                            [-2, 0],
                            [1, 0],
                            [-2, 1],
                            [1, -2]
                        ],
                        30: [
                            [1, 0],
                            [-2, 0],
                            [1, 2],
                            [-2, -1]
                        ],
                        "03": [
                            [-1, 0],
                            [2, 0],
                            [-1, -2],
                            [2, 1]
                        ],
                        "02": [],
                        13: [],
                        20: [],
                        31: []
                    },
                    additional_offsets: {
                        z: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ],
                        l: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ],
                        o: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ],
                        s: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ],
                        i: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ],
                        j: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ],
                        t: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ]
                    },
                    spawn_rotation: {
                        z: 0,
                        l: 0,
                        o: 0,
                        s: 0,
                        i: 0,
                        j: 0,
                        t: 0
                    },
                    colorMap: {
                        z: "z",
                        l: "l",
                        o: "o",
                        s: "s",
                        i: "i",
                        j: "j",
                        t: "t",
                        g: "g",
                        d: "d",
                        gb: "gb",
                        gbd: "gbd"
                    },
                    preview_overrides: {}
                },
                "SRS+": {
                    kicks: {
                        "01": [
                            [-1, 0],
                            [-1, -1],
                            [0, 2],
                            [-1, 2]
                        ],
                        10: [
                            [1, 0],
                            [1, 1],
                            [0, -2],
                            [1, -2]
                        ],
                        12: [
                            [1, 0],
                            [1, 1],
                            [0, -2],
                            [1, -2]
                        ],
                        21: [
                            [-1, 0],
                            [-1, -1],
                            [0, 2],
                            [-1, 2]
                        ],
                        23: [
                            [1, 0],
                            [1, -1],
                            [0, 2],
                            [1, 2]
                        ],
                        32: [
                            [-1, 0],
                            [-1, 1],
                            [0, -2],
                            [-1, -2]
                        ],
                        30: [
                            [-1, 0],
                            [-1, 1],
                            [0, -2],
                            [-1, -2]
                        ],
                        "03": [
                            [1, 0],
                            [1, -1],
                            [0, 2],
                            [1, 2]
                        ],
                        "02": [
                            [0, -1],
                            [1, -1],
                            [-1, -1],
                            [1, 0],
                            [-1, 0]
                        ],
                        13: [
                            [1, 0],
                            [1, -2],
                            [1, -1],
                            [0, -2],
                            [0, -1]
                        ],
                        20: [
                            [0, 1],
                            [-1, 1],
                            [1, 1],
                            [-1, 0],
                            [1, 0]
                        ],
                        31: [
                            [-1, 0],
                            [-1, -2],
                            [-1, -1],
                            [0, -2],
                            [0, -1]
                        ]
                    },
                    i_kicks: {
                        "01": [
                            [1, 0],
                            [-2, 0],
                            [-2, 1],
                            [1, -2]
                        ],
                        10: [
                            [-1, 0],
                            [2, 0],
                            [-1, 2],
                            [2, -1]
                        ],
                        12: [
                            [-1, 0],
                            [2, 0],
                            [-1, -2],
                            [2, 1]
                        ],
                        21: [
                            [-2, 0],
                            [1, 0],
                            [-2, -1],
                            [1, 2]
                        ],
                        23: [
                            [2, 0],
                            [-1, 0],
                            [2, -1],
                            [-1, 2]
                        ],
                        32: [
                            [1, 0],
                            [-2, 0],
                            [1, -2],
                            [-2, 1]
                        ],
                        30: [
                            [1, 0],
                            [-2, 0],
                            [1, 2],
                            [-2, -1]
                        ],
                        "03": [
                            [-1, 0],
                            [2, 0],
                            [2, 1],
                            [-1, -2]
                        ],
                        "02": [
                            [0, -1]
                        ],
                        13: [
                            [1, 0]
                        ],
                        20: [
                            [0, 1]
                        ],
                        31: [
                            [-1, 0]
                        ]
                    },
                    additional_offsets: {
                        z: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ],
                        l: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ],
                        o: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ],
                        s: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ],
                        i: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ],
                        j: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ],
                        t: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ]
                    },
                    spawn_rotation: {
                        z: 0,
                        l: 0,
                        o: 0,
                        s: 0,
                        i: 0,
                        j: 0,
                        t: 0
                    },
                    colorMap: {
                        z: "z",
                        l: "l",
                        o: "o",
                        s: "s",
                        i: "i",
                        j: "j",
                        t: "t",
                        g: "g",
                        d: "d",
                        gb: "gb",
                        gbd: "gbd"
                    },
                    preview_overrides: {}
                },
                "SRS-X": {
                    kicks: {
                        "01": [
                            [-1, 0],
                            [-1, -1],
                            [0, 2],
                            [-1, 2]
                        ],
                        10: [
                            [1, 0],
                            [1, 1],
                            [0, -2],
                            [1, -2]
                        ],
                        12: [
                            [1, 0],
                            [1, 1],
                            [0, -2],
                            [1, -2]
                        ],
                        21: [
                            [-1, 0],
                            [-1, -1],
                            [0, 2],
                            [-1, 2]
                        ],
                        23: [
                            [1, 0],
                            [1, -1],
                            [0, 2],
                            [1, 2]
                        ],
                        32: [
                            [-1, 0],
                            [-1, 1],
                            [0, -2],
                            [-1, -2]
                        ],
                        30: [
                            [-1, 0],
                            [-1, 1],
                            [0, -2],
                            [-1, -2]
                        ],
                        "03": [
                            [1, 0],
                            [1, -1],
                            [0, 2],
                            [1, 2]
                        ],
                        "02": [
                            [1, 0],
                            [2, 0],
                            [1, 1],
                            [2, 1],
                            [-1, 0],
                            [-2, 0],
                            [-1, 1],
                            [-2, 1],
                            [0, -1],
                            [3, 0],
                            [-3, 0]
                        ],
                        13: [
                            [0, 1],
                            [0, 2],
                            [-1, 1],
                            [-1, 2],
                            [0, -1],
                            [0, -2],
                            [-1, -1],
                            [-1, -2],
                            [1, 0],
                            [0, 3],
                            [0, -3]
                        ],
                        20: [
                            [-1, 0],
                            [-2, 0],
                            [-1, -1],
                            [-2, -1],
                            [1, 0],
                            [2, 0],
                            [1, -1],
                            [2, -1],
                            [0, 1],
                            [-3, 0],
                            [3, 0]
                        ],
                        31: [
                            [0, 1],
                            [0, 2],
                            [1, 1],
                            [1, 2],
                            [0, -1],
                            [0, -2],
                            [1, -1],
                            [1, -2],
                            [-1, 0],
                            [0, 3],
                            [0, -3]
                        ]
                    },
                    i_kicks: {
                        "01": [
                            [-2, 0],
                            [1, 0],
                            [-2, 1],
                            [1, -2]
                        ],
                        10: [
                            [2, 0],
                            [-1, 0],
                            [2, -1],
                            [-1, 2]
                        ],
                        12: [
                            [-1, 0],
                            [2, 0],
                            [-1, -2],
                            [2, 1]
                        ],
                        21: [
                            [1, 0],
                            [-2, 0],
                            [1, 2],
                            [-2, -1]
                        ],
                        23: [
                            [2, 0],
                            [-1, 0],
                            [2, -1],
                            [-1, 2]
                        ],
                        32: [
                            [-2, 0],
                            [1, 0],
                            [-2, 1],
                            [1, -2]
                        ],
                        30: [
                            [1, 0],
                            [-2, 0],
                            [1, 2],
                            [-2, -1]
                        ],
                        "03": [
                            [-1, 0],
                            [2, 0],
                            [-1, -2],
                            [2, 1]
                        ],
                        "02": [
                            [-1, 0],
                            [-2, 0],
                            [1, 0],
                            [2, 0],
                            [0, 1]
                        ],
                        13: [
                            [0, 1],
                            [0, 2],
                            [0, -1],
                            [0, -2],
                            [-1, 0]
                        ],
                        20: [
                            [1, 0],
                            [2, 0],
                            [-1, 0],
                            [-2, 0],
                            [0, -1]
                        ],
                        31: [
                            [0, 1],
                            [0, 2],
                            [0, -1],
                            [0, -2],
                            [1, 0]
                        ]
                    },
                    additional_offsets: {
                        z: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ],
                        l: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ],
                        o: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ],
                        s: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ],
                        i: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ],
                        j: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ],
                        t: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ]
                    },
                    spawn_rotation: {
                        z: 0,
                        l: 0,
                        o: 0,
                        s: 0,
                        i: 0,
                        j: 0,
                        t: 0
                    },
                    colorMap: {
                        z: "z",
                        l: "l",
                        o: "o",
                        s: "s",
                        i: "i",
                        j: "j",
                        t: "t",
                        g: "g",
                        d: "d",
                        gb: "gb",
                        gbd: "gbd"
                    },
                    preview_overrides: {}
                },
                "TETRA-X": {
                    kicks: {
                        "01": [
                            [0, 1],
                            [-1, 0],
                            [1, 0],
                            [-1, 1],
                            [1, 1],
                            [0, -1],
                            [-1, -1],
                            [1, -1]
                        ],
                        10: [
                            [0, 1],
                            [1, 0],
                            [-1, 0],
                            [1, 1],
                            [-1, 1],
                            [0, -1],
                            [1, -1],
                            [-1, -1]
                        ],
                        12: [
                            [0, 1],
                            [-1, 0],
                            [1, 0],
                            [-1, 1],
                            [1, 1],
                            [0, -1],
                            [-1, -1],
                            [1, -1]
                        ],
                        21: [
                            [0, 1],
                            [1, 0],
                            [-1, 0],
                            [1, 1],
                            [-1, 1],
                            [0, -1],
                            [1, -1],
                            [-1, -1]
                        ],
                        23: [
                            [0, 1],
                            [-1, 0],
                            [1, 0],
                            [-1, 1],
                            [1, 1],
                            [0, -1],
                            [-1, -1],
                            [1, -1]
                        ],
                        32: [
                            [0, 1],
                            [1, 0],
                            [-1, 0],
                            [1, 1],
                            [-1, 1],
                            [0, -1],
                            [1, -1],
                            [-1, -1]
                        ],
                        30: [
                            [0, 1],
                            [-1, 0],
                            [1, 0],
                            [-1, 1],
                            [1, 1],
                            [0, -1],
                            [-1, -1],
                            [1, -1]
                        ],
                        "03": [
                            [0, 1],
                            [1, 0],
                            [-1, 0],
                            [1, 1],
                            [-1, 1],
                            [0, -1],
                            [1, -1],
                            [-1, -1]
                        ],
                        "02": [
                            [0, 1],
                            [0, -1],
                            [-1, 0],
                            [1, 0]
                        ],
                        13: [
                            [0, 1],
                            [0, -1],
                            [-1, 0],
                            [1, 0]
                        ],
                        20: [
                            [0, 1],
                            [0, -1],
                            [-1, 0],
                            [1, 0]
                        ],
                        31: [
                            [0, 1],
                            [0, -1],
                            [-1, 0],
                            [1, 0]
                        ]
                    },
                    i_kicks: {
                        "01": [
                            [0, -1],
                            [0, -2],
                            [0, 1],
                            [1, -1],
                            [-1, -1],
                            [1, -2],
                            [-1, -2]
                        ],
                        10: [
                            [0, -1],
                            [0, -2],
                            [0, 1],
                            [-1, 0],
                            [1, 0],
                            [2, 0]
                        ],
                        12: [
                            [0, -1],
                            [0, -2],
                            [0, 1],
                            [-1, 0],
                            [1, 0],
                            [2, 0]
                        ],
                        21: [
                            [0, 1],
                            [0, 2],
                            [0, -1],
                            [-1, 1],
                            [1, 1],
                            [-1, 2],
                            [1, 2]
                        ],
                        23: [
                            [0, 1],
                            [0, 2],
                            [0, -1],
                            [1, 1],
                            [-1, 1],
                            [1, 2],
                            [-1, 2]
                        ],
                        32: [
                            [0, -1],
                            [0, -2],
                            [0, 1],
                            [1, 0],
                            [-1, 0],
                            [-2, 0]
                        ],
                        30: [
                            [0, -1],
                            [0, -2],
                            [0, 1],
                            [1, 0],
                            [-1, 0],
                            [-2, 0]
                        ],
                        "03": [
                            [0, -1],
                            [0, -2],
                            [0, 1],
                            [-1, -1],
                            [1, -1],
                            [-1, -2],
                            [1, -2]
                        ],
                        "02": [
                            [0, -1],
                            [0, 1]
                        ],
                        13: [
                            [0, -1],
                            [0, 1]
                        ],
                        20: [
                            [0, -1],
                            [0, 1]
                        ],
                        31: [
                            [0, -1],
                            [0, 1]
                        ]
                    },
                    additional_offsets: {
                        z: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ],
                        l: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ],
                        o: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ],
                        s: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ],
                        i: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ],
                        j: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ],
                        t: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ]
                    },
                    spawn_rotation: {
                        z: 0,
                        l: 0,
                        o: 0,
                        s: 0,
                        i: 0,
                        j: 0,
                        t: 0
                    },
                    colorMap: {
                        z: "z",
                        l: "o",
                        o: "s",
                        s: "i",
                        i: "l",
                        j: "j",
                        t: "t",
                        g: "g",
                        d: "d",
                        gb: "gb",
                        gbd: "gbd"
                    },
                    preview_overrides: {}
                },
                NRS: {
                    kicks: {
                        "01": [],
                        10: [],
                        12: [],
                        21: [],
                        23: [],
                        32: [],
                        30: [],
                        "03": [],
                        "02": [],
                        13: [],
                        20: [],
                        31: []
                    },
                    i_kicks: {
                        "01": [],
                        10: [],
                        12: [],
                        21: [],
                        23: [],
                        32: [],
                        30: [],
                        "03": [],
                        "02": [],
                        13: [],
                        20: [],
                        31: []
                    },
                    additional_offsets: {
                        z: [
                            [1, 1],
                            [1, 0],
                            [1, 0],
                            [2, 0]
                        ],
                        l: [
                            [1, 0],
                            [1, 0],
                            [1, 0],
                            [1, 0]
                        ],
                        o: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ],
                        s: [
                            [1, 1],
                            [1, 0],
                            [1, 0],
                            [2, 0]
                        ],
                        i: [
                            [0, 1],
                            [0, 0],
                            [0, 0],
                            [1, 0]
                        ],
                        j: [
                            [1, 0],
                            [1, 0],
                            [1, 0],
                            [1, 0]
                        ],
                        t: [
                            [1, 0],
                            [1, 0],
                            [1, 0],
                            [1, 0]
                        ]
                    },
                    spawn_rotation: {
                        z: 0,
                        l: 2,
                        o: 0,
                        s: 0,
                        i: 0,
                        j: 2,
                        t: 2
                    },
                    colorMap: {
                        z: "z",
                        l: "l",
                        o: "o",
                        s: "s",
                        i: "i",
                        j: "j",
                        t: "t",
                        g: "g",
                        d: "d",
                        gb: "gb",
                        gbd: "gbd"
                    },
                    preview_overrides: {
                        l: [
                            [0, 0, 201],
                            [1, 0, 68],
                            [2, 0, 124],
                            [0, 1, 31]
                        ],
                        j: [
                            [0, 0, 199],
                            [1, 0, 68],
                            [2, 0, 114],
                            [2, 1, 31]
                        ],
                        t: [
                            [0, 0, 199],
                            [1, 0, 74],
                            [2, 0, 124],
                            [1, 1, 31]
                        ]
                    }
                },
                ARS: {
                    kicks: {
                        "01": [
                            [1, 0],
                            [-1, 0]
                        ],
                        10: [
                            [1, 0],
                            [-1, 0]
                        ],
                        12: [
                            [1, 0],
                            [-1, 0]
                        ],
                        21: [
                            [1, 0],
                            [-1, 0]
                        ],
                        23: [
                            [1, 0],
                            [-1, 0]
                        ],
                        32: [
                            [1, 0],
                            [-1, 0]
                        ],
                        30: [
                            [1, 0],
                            [-1, 0]
                        ],
                        "03": [
                            [1, 0],
                            [-1, 0]
                        ],
                        "02": [
                            [1, 0],
                            [-1, 0]
                        ],
                        13: [
                            [1, 0],
                            [-1, 0]
                        ],
                        20: [
                            [1, 0],
                            [-1, 0]
                        ],
                        31: [
                            [1, 0],
                            [-1, 0]
                        ]
                    },
                    i_kicks: {
                        "01": [],
                        10: [],
                        12: [],
                        21: [],
                        23: [],
                        32: [],
                        30: [],
                        "03": [],
                        "02": [],
                        13: [],
                        20: [],
                        31: []
                    },
                    additional_offsets: {
                        z: [
                            [0, 1],
                            [0, 0],
                            [0, 0],
                            [1, 0]
                        ],
                        l: [
                            [0, 1],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ],
                        o: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ],
                        s: [
                            [0, 1],
                            [-1, 0],
                            [0, 0],
                            [0, 0]
                        ],
                        i: [
                            [0, 0],
                            [0, 0],
                            [0, -1],
                            [1, 0]
                        ],
                        j: [
                            [0, 1],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ],
                        t: [
                            [0, 1],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ]
                    },
                    spawn_rotation: {
                        z: 0,
                        l: 2,
                        o: 0,
                        s: 0,
                        i: 0,
                        j: 2,
                        t: 2
                    },
                    colorMap: {
                        z: "s",
                        l: "l",
                        o: "o",
                        s: "t",
                        i: "z",
                        j: "j",
                        t: "i",
                        g: "g",
                        d: "d",
                        gb: "gb",
                        gbd: "gbd"
                    },
                    preview_overrides: {
                        l: [
                            [0, 0, 201],
                            [1, 0, 68],
                            [2, 0, 124],
                            [0, 1, 31]
                        ],
                        j: [
                            [0, 0, 199],
                            [1, 0, 68],
                            [2, 0, 114],
                            [2, 1, 31]
                        ],
                        t: [
                            [0, 0, 199],
                            [1, 0, 74],
                            [2, 0, 124],
                            [1, 1, 31]
                        ]
                    },
                    center_column: [
                        [-1, -1],
                        [0, -1],
                        [1, -1],
                        [-1, 0],
                        [0, 0],
                        [1, 0],
                        [-1, 1],
                        [0, 1],
                        [1, 1]
                    ]
                },
                ASC: {
                    kicks: {
                        "01": [
                            [-1, 0],
                            [0, 1],
                            [-1, 1],
                            [0, 2],
                            [-1, 2],
                            [-2, 0],
                            [-2, 1],
                            [-2, 2],
                            [1, 0],
                            [1, 1],
                            [0, -1],
                            [-1, -1],
                            [-2, -1],
                            [1, 2],
                            [2, 0],
                            [0, -2],
                            [-1, -2],
                            [-2, -2],
                            [2, 1],
                            [2, 2],
                            [1, -1]
                        ],
                        10: [
                            [1, 0],
                            [0, 1],
                            [1, 1],
                            [0, 2],
                            [1, 2],
                            [2, 0],
                            [2, 1],
                            [2, 2],
                            [-1, 0],
                            [-1, 1],
                            [0, -1],
                            [1, -1],
                            [2, -1],
                            [-1, 2],
                            [-2, 0],
                            [0, -2],
                            [1, -2],
                            [2, -2],
                            [-2, 1],
                            [-2, 2],
                            [-1, -1]
                        ],
                        12: [
                            [-1, 0],
                            [0, 1],
                            [-1, 1],
                            [0, 2],
                            [-1, 2],
                            [-2, 0],
                            [-2, 1],
                            [-2, 2],
                            [1, 0],
                            [1, 1],
                            [0, -1],
                            [-1, -1],
                            [-2, -1],
                            [1, 2],
                            [2, 0],
                            [0, -2],
                            [-1, -2],
                            [-2, -2],
                            [2, 1],
                            [2, 2],
                            [1, -1]
                        ],
                        21: [
                            [1, 0],
                            [0, 1],
                            [1, 1],
                            [0, 2],
                            [1, 2],
                            [2, 0],
                            [2, 1],
                            [2, 2],
                            [-1, 0],
                            [-1, 1],
                            [0, -1],
                            [1, -1],
                            [2, -1],
                            [-1, 2],
                            [-2, 0],
                            [0, -2],
                            [1, -2],
                            [2, -2],
                            [-2, 1],
                            [-2, 2],
                            [-1, -1]
                        ],
                        23: [
                            [-1, 0],
                            [0, 1],
                            [-1, 1],
                            [0, 2],
                            [-1, 2],
                            [-2, 0],
                            [-2, 1],
                            [-2, 2],
                            [1, 0],
                            [1, 1],
                            [0, -1],
                            [-1, -1],
                            [-2, -1],
                            [1, 2],
                            [2, 0],
                            [0, -2],
                            [-1, -2],
                            [-2, -2],
                            [2, 1],
                            [2, 2],
                            [1, -1]
                        ],
                        32: [
                            [1, 0],
                            [0, 1],
                            [1, 1],
                            [0, 2],
                            [1, 2],
                            [2, 0],
                            [2, 1],
                            [2, 2],
                            [-1, 0],
                            [-1, 1],
                            [0, -1],
                            [1, -1],
                            [2, -1],
                            [-1, 2],
                            [-2, 0],
                            [0, -2],
                            [1, -2],
                            [2, -2],
                            [-2, 1],
                            [-2, 2],
                            [-1, -1]
                        ],
                        30: [
                            [-1, 0],
                            [0, 1],
                            [-1, 1],
                            [0, 2],
                            [-1, 2],
                            [-2, 0],
                            [-2, 1],
                            [-2, 2],
                            [1, 0],
                            [1, 1],
                            [0, -1],
                            [-1, -1],
                            [-2, -1],
                            [1, 2],
                            [2, 0],
                            [0, -2],
                            [-1, -2],
                            [-2, -2],
                            [2, 1],
                            [2, 2],
                            [1, -1]
                        ],
                        "03": [
                            [1, 0],
                            [0, 1],
                            [1, 1],
                            [0, 2],
                            [1, 2],
                            [2, 0],
                            [2, 1],
                            [2, 2],
                            [-1, 0],
                            [-1, 1],
                            [0, -1],
                            [1, -1],
                            [2, -1],
                            [-1, 2],
                            [-2, 0],
                            [0, -2],
                            [1, -2],
                            [2, -2],
                            [-2, 1],
                            [-2, 2],
                            [-1, -1]
                        ],
                        "02": [],
                        13: [],
                        20: [],
                        31: []
                    },
                    i_kicks: {
                        "01": [
                            [-1, 0],
                            [0, 1],
                            [-1, 1],
                            [0, 2],
                            [-1, 2],
                            [-2, 0],
                            [-2, 1],
                            [-2, 2],
                            [1, 0],
                            [1, 1],
                            [0, -1],
                            [-1, -1],
                            [-2, -1],
                            [1, 2],
                            [2, 0],
                            [0, -2],
                            [-1, -2],
                            [-2, -2],
                            [2, 1],
                            [2, 2],
                            [1, -1]
                        ],
                        10: [
                            [1, 0],
                            [0, 1],
                            [1, 1],
                            [0, 2],
                            [1, 2],
                            [2, 0],
                            [2, 1],
                            [2, 2],
                            [-1, 0],
                            [-1, 1],
                            [0, -1],
                            [1, -1],
                            [2, -1],
                            [-1, 2],
                            [-2, 0],
                            [0, -2],
                            [1, -2],
                            [2, -2],
                            [-2, 1],
                            [-2, 2],
                            [-1, -1]
                        ],
                        12: [
                            [-1, 0],
                            [0, 1],
                            [-1, 1],
                            [0, 2],
                            [-1, 2],
                            [-2, 0],
                            [-2, 1],
                            [-2, 2],
                            [1, 0],
                            [1, 1],
                            [0, -1],
                            [-1, -1],
                            [-2, -1],
                            [1, 2],
                            [2, 0],
                            [0, -2],
                            [-1, -2],
                            [-2, -2],
                            [2, 1],
                            [2, 2],
                            [1, -1]
                        ],
                        21: [
                            [1, 0],
                            [0, 1],
                            [1, 1],
                            [0, 2],
                            [1, 2],
                            [2, 0],
                            [2, 1],
                            [2, 2],
                            [-1, 0],
                            [-1, 1],
                            [0, -1],
                            [1, -1],
                            [2, -1],
                            [-1, 2],
                            [-2, 0],
                            [0, -2],
                            [1, -2],
                            [2, -2],
                            [-2, 1],
                            [-2, 2],
                            [-1, -1]
                        ],
                        23: [
                            [-1, 0],
                            [0, 1],
                            [-1, 1],
                            [0, 2],
                            [-1, 2],
                            [-2, 0],
                            [-2, 1],
                            [-2, 2],
                            [1, 0],
                            [1, 1],
                            [0, -1],
                            [-1, -1],
                            [-2, -1],
                            [1, 2],
                            [2, 0],
                            [0, -2],
                            [-1, -2],
                            [-2, -2],
                            [2, 1],
                            [2, 2],
                            [1, -1]
                        ],
                        32: [
                            [1, 0],
                            [0, 1],
                            [1, 1],
                            [0, 2],
                            [1, 2],
                            [2, 0],
                            [2, 1],
                            [2, 2],
                            [-1, 0],
                            [-1, 1],
                            [0, -1],
                            [1, -1],
                            [2, -1],
                            [-1, 2],
                            [-2, 0],
                            [0, -2],
                            [1, -2],
                            [2, -2],
                            [-2, 1],
                            [-2, 2],
                            [-1, -1]
                        ],
                        30: [
                            [-1, 0],
                            [0, 1],
                            [-1, 1],
                            [0, 2],
                            [-1, 2],
                            [-2, 0],
                            [-2, 1],
                            [-2, 2],
                            [1, 0],
                            [1, 1],
                            [0, -1],
                            [-1, -1],
                            [-2, -1],
                            [1, 2],
                            [2, 0],
                            [0, -2],
                            [-1, -2],
                            [-2, -2],
                            [2, 1],
                            [2, 2],
                            [1, -1]
                        ],
                        "03": [
                            [1, 0],
                            [0, 1],
                            [1, 1],
                            [0, 2],
                            [1, 2],
                            [2, 0],
                            [2, 1],
                            [2, 2],
                            [-1, 0],
                            [-1, 1],
                            [0, -1],
                            [1, -1],
                            [2, -1],
                            [-1, 2],
                            [-2, 0],
                            [0, -2],
                            [1, -2],
                            [2, -2],
                            [-2, 1],
                            [-2, 2],
                            [-1, -1]
                        ],
                        "02": [],
                        13: [],
                        20: [],
                        31: []
                    },
                    allow_o_kick: !0,
                    additional_offsets: {
                        z: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ],
                        l: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ],
                        o: [
                            [0, 0],
                            [0, 1],
                            [-1, 1],
                            [-1, 0]
                        ],
                        s: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ],
                        i: [
                            [0, 0],
                            [0, -1],
                            [1, -1],
                            [1, 0]
                        ],
                        j: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ],
                        t: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ]
                    },
                    colorMap: {
                        z: "z",
                        l: "l",
                        o: "o",
                        s: "s",
                        i: "i",
                        j: "j",
                        t: "t",
                        g: "g",
                        d: "d",
                        gb: "gb",
                        gbd: "gbd"
                    },
                    spawn_rotation: {
                        z: 0,
                        l: 0,
                        o: 0,
                        s: 0,
                        i: 0,
                        j: 0,
                        t: 0
                    },
                    preview_overrides: {}
                },
                none: {
                    kicks: {
                        "01": [],
                        10: [],
                        12: [],
                        21: [],
                        23: [],
                        32: [],
                        30: [],
                        "03": [],
                        "02": [],
                        13: [],
                        20: [],
                        31: []
                    },
                    i_kicks: {
                        "01": [],
                        10: [],
                        12: [],
                        21: [],
                        23: [],
                        32: [],
                        30: [],
                        "03": [],
                        "02": [],
                        13: [],
                        20: [],
                        31: []
                    },
                    additional_offsets: {
                        z: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ],
                        l: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ],
                        o: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ],
                        s: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ],
                        i: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ],
                        j: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ],
                        t: [
                            [0, 0],
                            [0, 0],
                            [0, 0],
                            [0, 0]
                        ]
                    },
                    colorMap: {
                        z: "z",
                        l: "l",
                        o: "o",
                        s: "s",
                        i: "i",
                        j: "j",
                        t: "t",
                        g: "g",
                        d: "d",
                        gb: "gb",
                        gbd: "gbd"
                    },
                    spawn_rotation: {
                        z: 0,
                        l: 0,
                        o: 0,
                        s: 0,
                        i: 0,
                        j: 0,
                        t: 0
                    },
                    preview_overrides: {}
                }
            },
            scoring: {
                SINGLE: 100,
                DOUBLE: 300,
                TRIPLE: 500,
                QUAD: 800,
                TSPIN_MINI: 100,
                TSPIN: 400,
                TSPIN_MINI_SINGLE: 200,
                TSPIN_SINGLE: 800,
                TSPIN_MINI_DOUBLE: 400,
                TSPIN_DOUBLE: 1200,
                TSPIN_TRIPLE: 1600,
                TSPIN_QUAD: 2600,
                BACKTOBACK_MULTIPLIER: 1.5,
                COMBO: 50,
                ALL_CLEAR: 3500,
                SOFTDROP: 1,
                HARDDROP: 2
            },
            garbage: {
                SINGLE: 0,
                DOUBLE: 1,
                TRIPLE: 2,
                QUAD: 4,
                TSPIN_MINI: 0,
                TSPIN: 0,
                TSPIN_MINI_SINGLE: 0,
                TSPIN_SINGLE: 2,
                TSPIN_MINI_DOUBLE: 1,
                TSPIN_DOUBLE: 4,
                TSPIN_TRIPLE: 6,
                TSPIN_QUAD: 10,
                BACKTOBACK_BONUS: 1,
                BACKTOBACK_BONUS_LOG: .8,
                COMBO_MINIFIER: 1,
                COMBO_MINIFIER_LOG: 1.25,
                COMBO_BONUS: .25,
                ALL_CLEAR: 10
            },
            finesse: {
                z: {
                    0: [9, 9, 1, 2, 1, 0, 1, 2, 2, 1, 9],
                    1: [9, 2, 2, 2, 1, 1, 2, 3, 2, 2, 9],
                    2: [9, 9, 1, 2, 1, 0, 1, 2, 2, 1, 9],
                    3: [9, 9, 2, 2, 2, 1, 1, 2, 3, 2, 2]
                },
                l: {
                    0: [9, 9, 1, 2, 1, 0, 1, 2, 2, 1, 9],
                    1: [9, 2, 2, 3, 2, 1, 2, 3, 3, 2, 9],
                    2: [9, 9, 3, 4, 3, 2, 3, 4, 4, 3, 9],
                    3: [9, 9, 2, 3, 2, 1, 2, 3, 3, 2, 2]
                },
                o: {
                    0: [9, 1, 2, 2, 1, 0, 1, 2, 2, 1, 9],
                    1: [9, 1, 2, 2, 1, 0, 1, 2, 2, 1, 9],
                    2: [9, 1, 2, 2, 1, 0, 1, 2, 2, 1, 9],
                    3: [9, 1, 2, 2, 1, 0, 1, 2, 2, 1, 9]
                },
                s: {
                    0: [9, 9, 1, 2, 1, 0, 1, 2, 2, 1, 9],
                    1: [9, 2, 2, 2, 1, 1, 2, 3, 2, 2, 9],
                    2: [9, 9, 1, 2, 1, 0, 1, 2, 2, 1, 9],
                    3: [9, 9, 2, 2, 2, 1, 1, 2, 3, 2, 2]
                },
                i: {
                    0: [9, 9, 1, 2, 1, 0, 1, 2, 1, 9, 9],
                    1: [2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 9],
                    2: [9, 9, 1, 2, 1, 0, 1, 2, 1, 9, 9],
                    3: [9, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2]
                },
                j: {
                    0: [9, 9, 1, 2, 1, 0, 1, 2, 2, 1, 9],
                    1: [9, 2, 2, 3, 2, 1, 2, 3, 3, 2, 9],
                    2: [9, 9, 3, 4, 3, 2, 3, 4, 4, 3, 9],
                    3: [9, 9, 2, 3, 2, 1, 2, 3, 3, 2, 2]
                },
                t: {
                    0: [9, 9, 1, 2, 1, 0, 1, 2, 2, 1, 9],
                    1: [9, 2, 2, 3, 2, 1, 2, 3, 3, 2, 9],
                    2: [9, 9, 3, 4, 3, 2, 3, 4, 4, 3, 9],
                    3: [9, 9, 2, 3, 2, 1, 2, 3, 3, 2, 2]
                }
            },
            majorShoutStyles: {
                globalbest: () => {
                    sn.play("confetti", {
                        gui: !0,
                        count: 30
                    })
                },
                personalbest: () => {
                    sn.play("confetti", {
                        gui: !0,
                        count: 15,
                        hue: [30, 60]
                    })
                },
                lg_victory: () => {
                    setTimeout(() => {
                        sn.play("confetti", {
                            gui: !1,
                            count: 15,
                            hue: [30, 60]
                        })
                    }, 1250)
                }
            },
            globalShoutStyles: {},
            gameModes: {
                "40l": {
                    version: 15,
                    seed_random: !1,
                    anchorseed: !0,
                    seed: "X-PASSTHRU",
                    allow180: !0,
                    g: .02,
                    objective: {
                        type: "lines",
                        count: 40
                    },
                    handling: "X-PASSTHRU",
                    countdown: "X-PASSTHRU",
                    countdown_interval: "X-PASSTHRU",
                    precountdown: "X-PASSTHRU",
                    prestart: "X-PASSTHRU",
                    mission: "X-PASSTHRU",
                    zoominto: "X-PASSTHRU",
                    bgmnoreset: "X-PASSTHRU",
                    slot_counter1: "X-PASSTHRU",
                    slot_counter2: "X-PASSTHRU",
                    slot_counter3: "X-PASSTHRU",
                    slot_counter4: "X-PASSTHRU",
                    slot_counter5: "X-PASSTHRU",
                    slot_bar2: "progress",
                    can_retry: !0,
                    pro: "X-PASSTHRU",
                    stride: "X-PASSTHRU",
                    no_szo: "X-PASSTHRU"
                },
                blitz: {
                    version: 15,
                    seed_random: !1,
                    anchorseed: !0,
                    seed: "X-PASSTHRU",
                    allow180: !0,
                    objective: {
                        type: "timed",
                        time: 12e4
                    },
                    levels: !0,
                    levelspeed: .42,
                    gbase: .65,
                    handling: "X-PASSTHRU",
                    countdown: "X-PASSTHRU",
                    countdown_interval: "X-PASSTHRU",
                    precountdown: "X-PASSTHRU",
                    prestart: "X-PASSTHRU",
                    mission: "X-PASSTHRU",
                    zoominto: "X-PASSTHRU",
                    bgmnoreset: "X-PASSTHRU",
                    slot_counter1: "X-PASSTHRU",
                    slot_counter2: "X-PASSTHRU",
                    slot_counter3: "X-PASSTHRU",
                    slot_counter4: "X-PASSTHRU",
                    slot_counter5: "X-PASSTHRU",
                    slot_bar2: "progress",
                    can_retry: !0,
                    pro: "X-PASSTHRU",
                    stride: "X-PASSTHRU",
                    no_szo: "X-PASSTHRU"
                }
            }
        },
        fo = function(e, t, s = -1) {
            let a = e || 0,
                n = t || [],
                o = [],
                i = null,
                r = [],
                l = !1,
                c = 0,
                d = 50,
                p = 6,
                u = 15,
                m = u;

            function g(e = !1) {
                i && (c = 0, e || (m = Math.min(d, m + 1)), "function" == typeof i ? i({
                    listenID: s,
                    frames: r,
                    provisioned: a
                }) : i.emit("replay", {
                    listenID: s,
                    frames: r,
                    provisioned: a
                }), r = [], l = !1)
            }

            function h() {
                o = [];
                for (let e = 0; e < n.length; e++) void 0 === o[n[e].frame] && (o[n[e].frame] = e)
            }
            return h(), {
                advanceFrame: function() {
                    c++, !y() && c >= m ? g() : l && g(), a++
                },
                getFrame: function() {
                    return a
                },
                getEventCount: function() {
                    return n.length
                },
                getStarter: function() {
                    let e = null;
                    for (let t = 0; t < n.length; t++)
                        if ("full" === n[t].type) {
                            e = n[t].data;
                            break
                        } return e ? (e.options.seed_random = !1, e.options.handling = e.game.handling, e) : null
                },
                getStartEvent: function() {
                    for (let e = 0; e < n.length; e++)
                        if ("start" === n[e].type) return n[e];
                    return null
                },
                getEndEvent: function() {
                    for (let e = 0; e < n.length; e++)
                        if ("end" === n[e].type) return n[e];
                    return null
                },
                pushEvent: function(e, t) {
                    const s = {
                        frame: a,
                        type: e,
                        data: v(t)
                    };
                    "full" === e || y() || (m = Math.max(p, Math.min(u, m - .25))), n.push(s), i && ("end" === e && (l = !0), r.push(s)), void 0 === o[a] && (o[a] = n.length - 1)
                },
                getEventsAtFrame: function(e) {
                    let t = o[e];
                    if (void 0 === t) return [];
                    const s = [];
                    for (let a = t; a < n.length && n[a].frame === e; a++) s.push(n[a]);
                    return s
                },
                export: function() {
                    return {
                        frames: a,
                        events: n
                    }
                },
                import: function(e) {
                    a = e.frames, n = e.events, h()
                },
                seek: function(e) {
                    a = e
                },
                bindRolling: function(e) {
                    i = e
                },
                setListenID: function(e) {
                    s = e
                },
                flush: function() {
                    g(!0)
                },
                amendTargets: function(e) {
                    for (let t = 0; t < n.length; t++) "targets" === n[t].type && (n[t].data.data = e)
                },
                setLatencyPreference: function(e) {
                    switch (e) {
                        case "zero":
                            d = 15, p = 2, u = 4;
                            break;
                        case "low":
                            d = 15, p = 6, u = 8;
                            break;
                        case "medium":
                            d = 50, p = 6, u = 15;
                            break;
                        case "high":
                            d = 50, p = 15, u = 30
                    }
                    m = u
                }
            }
        },
        _o = function(e) {
            let t = e.listenID || -1,
                s = 0,
                a = 0;
            const n = e;
            let o = [],
                i = () => {},
                r = () => {},
                l = [],
                c = [],
                d = !1,
                p = [],
                u = 15,
                m = "",
                g = 0,
                h = 1e3 / 60,
                f = [];
            "keyboard" === n.type && (document.addEventListener("keydown", b, !1), document.addEventListener("gpdown", b, !1), document.addEventListener("keyup", y, !1), document.addEventListener("gpup", y, !1));
            let _ = e => {
                e.listenID === t && (c.push(...e.frames), u = e.provisioned - a, a = e.provisioned, e.frames.some(e => "end" === e.type) && a++)
            };

            function b(e) {
                if (e.repeat) return;
                if (document.body.classList.contains("chatfocus") || ht >= 1) return;
                if (!e.detail && e.target.closest("#zen_panel_content")) return;
                const t = me(e) || e.detail.toUpperCase();
                if (p.includes(t)) return;
                p.push(t);
                let a = 0;
                g && (a = Math.floor((performance.now() - g) / h * 10) / 10), Object.keys(ae).forEach(n => {
                    ae[n].includes(t) && (l.push({
                        frame: s + Math.floor(a),
                        type: "keydown",
                        data: {
                            key: n,
                            subframe: a % 1
                        }
                    }), "retry" === n && i(), "exit" === n && r(), e.detail || e.preventDefault())
                })
            }

            function y(e) {
                if (document.body.classList.contains("chatfocus") || ht >= 1) return;
                if (!e.detail && e.target.closest("#zen_panel_content")) return;
                const t = me(e) || e.detail.toUpperCase();
                if (!p.includes(t)) return;
                p.splice(p.indexOf(t), 1);
                let a = 0;
                g && (a = Math.floor((performance.now() - g) / h * 10) / 10), Object.keys(ae).forEach(n => {
                    if (ae[n].includes(t)) {
                        if ("chat" === n) return;
                        l.push({
                            frame: s + Math.floor(a),
                            type: "keyup",
                            data: {
                                key: n,
                                subframe: a % 1
                            }
                        }), e.detail || e.preventDefault()
                    }
                })
            }

            function v(e) {
                o.forEach(t => {
                    t(e)
                })
            }
            return "socket" === n.type && n.socket.on("replay", _), {
                advanceFrame: function() {
                    if (s++, "keyboard" === n.type)
                        if (l.length) g += h;
                        else {
                            const e = performance.now(),
                                t = e - g;
                            t >= 1e3 / 90 && t <= 40 && (f.push(t), f.length > 10 && (f.shift(), h = f.reduce((e, t) => e + t) / 10)), g = e
                        }
                },
                getFrame: function() {
                    return s
                },
                readyEventQueue: function() {
                    const e = [];
                    for (let t = 0; t < l.length; t++) "keydown" === l[t].type && (e.includes(l[t].data.key) || e.push(l[t].data.key)), "keyup" === l[t].type && e.includes(l[t].data.key) && e.splice(e.indexOf(l[t].data.key), 1);
                    const t = [];
                    for (let e = 0; e < l.length; e++) "keydown" !== l[e].type && "keyup" !== l[e].type && t.push(l[e]);
                    for (let a = 0; a < e.length; a++) t.push({
                        frame: s,
                        type: "keydown",
                        data: {
                            key: e[a],
                            hoisted: !0,
                            subframe: 0
                        }
                    });
                    l = t
                },
                pull: function() {
                    if ("replay" === n.type) {
                        n.replay.getEventsAtFrame(s).forEach(e => {
                            v(e)
                        })
                    } else if ("socket" === n.type) {
                        const e = [];
                        for (let t = 0; t < c.length; t++) c[t].frame === s ? v(c[t]) : e.push(c[t]);
                        c = e
                    } else {
                        const e = [];
                        for (let t = 0; t < l.length; t++) l[t].frame === s ? v(l[t]) : e.push(l[t]);
                        l = e
                    }
                },
                nextFrameReady: () => "socket" !== n.type || a > s,
                fallingBehind: () => "socket" === n.type && (a > s + 60 && (d = !0), a <= s && (d = !1), d),
                amountToCatchUp: () => "replay" === n.type ? n.replay.getFrame() - s : "socket" !== n.type ? 0 : a - s,
                behindness: () => "socket" === n.type && (a - s) / u,
                bind: function(e) {
                    o.push(e)
                },
                unbind: function(e) {
                    o = o.filter(t => t !== e)
                },
                seek: function(e) {
                    s = e, l = [], c = [], d = !1, u = 15
                },
                finished: function() {
                    if ("replay" === n.type) return s > n.replay.getFrame()
                },
                type: function() {
                    return n.type
                },
                pushIGE: function(e) {
                    l.push({
                        id: e.id,
                        frame: s,
                        type: "ige",
                        data: e.data
                    })
                },
                pushTargets: function(e) {
                    const t = JSON.stringify(e);
                    t != m && (m = t, l.push({
                        id: "diyusi",
                        frame: s,
                        type: "targets",
                        data: e
                    }))
                },
                unhook: function() {
                    document.removeEventListener("keydown", b), document.removeEventListener("gpdown", b), document.removeEventListener("keyup", y), document.removeEventListener("gpup", y)
                },
                destroy: function() {
                    o = [], n.socket && n.socket.off("replay", _)
                },
                socket: () => n.socket,
                bindHyperRetry: function(e) {
                    i = e
                },
                bindHyperForfeit: function(e) {
                    r = e
                }
            }
        },
        bo = function(e) {
            "use strict";
            const t = e.gsm;

            function s(s) {
                if (!((s = Math.floor(s / Math.max(1, t.targets.length))) < 1))
                    if (t.lastoffensive.offence += s, t.stats.garbage.sent += s, e.c.IsServer())(t.setoptions.oninteraction || (() => {}))(e.siom.Export(), {
                        type: "garbage",
                        amt: s,
                        x: t.lastoffensive.x,
                        y: t.lastoffensive.y
                    }, t.targets, e.iom.source.getFrame());
                    else if (t.targets.forEach(e => {
                        o(s, e)
                    }), t.setoptions.usezenconfig)
                    if (Be.garbagemode.startsWith("backfire_")) {
                        let t = s;
                        if ("backfire_half" === Be.garbagemode && (t = Math.floor(s / 2)), "backfire_double" === Be.garbagemode && (t = Math.floor(2 * s)), t < 1) return;
                        n({
                            type: "garbage",
                            amt: t,
                            column: Math.floor(Math.random() * e.W()),
                            x: 5,
                            y: 35
                        })
                    } else if (Be.garbagemode.startsWith("unclear_")) {
                    let t = s;
                    if ("unclear_half" === Be.garbagemode && (t = Math.floor(s / 2)), "unclear_double" === Be.garbagemode && (t = Math.floor(2 * s)), t < 1) return;
                    const a = Math.floor(Math.random() * e.W());
                    e.gpm.Vibrate(ee.GARBAGERISE), e.sxm.PlayIngame("garbagerise");
                    for (let s = 0; s < t; s++) e.hm.H.holderstate.ds += 2 * e.lm.H.lastdT, e.bm.PushGarbageLine(a, !1, (0 === s ? 64 : 0) | (s >= t - 1 ? 4 : 0))
                }
            }

            function a(e) {
                let t = "medium";
                return e < 3 && (t = "small"), e > 5 && (t = "large"), t
            }

            function n(s, n = null, o = null) {
                if (null !== o && (s.amt = function(e) {
                        for (const s of t.impendingdamage)
                            if (s.cid === e) return s.lines;
                        return 0
                    }(o), !s.amt)) return;
                const i = a(s.amt);
                if (!e.c.IsServer() && (t.setoptions.physical || null !== n && null !== qs.find(n) && !1 === qs.find(n).game.isScoped())) {
                    e.sxm.PlayIngame(`garbage_in_${i}`);
                    pn(360 * Math.random(), 100, 80);
                    const a = On(e.hm.H.stackobj, ls(Wn.x * (e.Wh() + e.Wh() * (Math.random() - .5))), ls(Wn.x * (e.Hh() + e.Hh() * (Math.random() - .5))), e.hm.S());
                    let r = null;
                    null !== n && (r = qs.getPosOf(n)), null === r && (r = {
                        pos: On(e.hm.H.stackobj, ls(Wn.x * e.Wh()), ls(-10 * Wn.x), e.hm.S()),
                        scale: e.hm.S()
                    });
                    const l = mn.create({
                        pointA: [r.pos.x + r.scale * ls(Wn.x * (s.x - (e.Wh() - .5))), r.pos.y + r.scale * ls(Wn.x * (s.y - (e.Hh() + e.B() - .5)))],
                        pointB: [a.x, a.y],
                        duration: t.setoptions.garbagespeed / (e.lm.H.playbackSpeed || 1) / 60,
                        intensity: s.amt
                    });
                    o && l && function(e, s) {
                        for (const a of t.impendingdamage)
                            if (a.cid === e) return void(a.beam = s)
                    }(o, l)
                }
                if (t.garbagereceived += s.amt, t.stats.garbage.received += s.amt, t.killer.name = n, n && !e.c.IsServer()) {
                    const e = qs.find(n);
                    e && (t.lastattacker = [e.context.listenID])
                }
                e.wfm.WaitFrames(t.setoptions.garbagespeed, "incoming-attack-hit", {
                    data: s,
                    sender: n,
                    cid: o
                })
            }

            function o(s, n) {
                if (e.c.IsServer()) return;
                if (!t.setoptions.physical && qs.games.self && n == qs.games.self.context.listenID) return;
                if (("low" === te.video.graphics || "minimal" === te.video.graphics) && "tiny" === e.hm.H.displaymode || 0 === e.lm.H.soundSkipRate) return;
                const o = a(s);
                e.sxm.PlayIngame(`garbage_out_${o}`, 2);
                pn(360 * Math.random(), 100, 80);
                const i = On(e.hm.H.stackobj, ls(Wn.x * t.lastoffensive.x), ls(Wn.x * (t.lastoffensive.y - 20)), e.hm.S());
                let r = qs.getPosOf(n);
                null !== r && (mn.create({
                    pointA: [i.x, i.y],
                    pointB: [r.pos.x + (Math.random() - .5) * (r.scale * ls(Wn.x * e.Wh())), r.pos.y + (Math.random() - .5) * (r.scale * ls(Wn.x * e.Hh()))],
                    duration: t.setoptions.garbagespeed / (e.lm.H.playbackSpeed || 1) / 60,
                    intensity: s * e.hm.H.holderstate.cos
                }), e.wfm.WaitFrames(t.setoptions.garbagespeed / (e.lm.H.playbackSpeed || 1), "outgoing-attack-hit", {}))
            }

            function i(s, a = null, n = null) {
                t.impendingdamage.push({
                    id: ++t.garbageid,
                    type: s.type,
                    active: null === n,
                    lines: s.amt,
                    column: s.column,
                    data: s,
                    sender: a,
                    cid: n
                }), null === n && (e.hm.H.holderstate.dw += Math.min(40, 1.25 * s.amt) * e.lm.H.lastdT), e.c.OnClient(() => {
                    e.pbm.UpdateGarbageBar("impending")
                })
            }

            function r(s) {
                for (const n of t.impendingdamage) n.cid === s && (n.active = !0, e.c.OnClient(() => {
                    const t = a(n.lines);
                    e.pbm.UpdateGarbageBar("impending"), e.gpm.Vibrate(ee[`damage_${t}`.toUpperCase()]), e.sxm.PlayIngame(`damage_${t}`), e.hm.H.holderstate.dw += Math.min(40, 1.25 * n.lines) * e.lm.H.lastdT
                }))
            }
            return {
                FightLines: function(a) {
                    if (!t.setoptions.hasgarbage) return;
                    t.stats.garbage.attack += a;
                    const n = !!t.impendingdamage.length;
                    n && e.sxm.PlayIngame("offset", .65, !1, .2);
                    let o = 0;
                    for (; a > 0 && t.impendingdamage.length;) t.impendingdamage[0].lines--, t.impendingdamage[0].lines || t.impendingdamage.shift(), a--, o++;
                    t.lastoffensive.defense += o, a > 0 && (n && e.sxm.PlayIngame("counter", .65, !1, .2), s(a)), n && !e.c.IsServer() && (e.pbm.UpdateGarbageBar("impending"), o && e.pbm.FlashGarbageBar("impending", Math.min(e.H(), o)))
                },
                Offence: s,
                StartingAttack: function(e, t = null, s = null) {
                    i(e, t, s)
                },
                IncomingAttack: n,
                IncomingAttackHit: function(s, n, o) {
                    if (!e.c.IsServer() && (t.setoptions.physical && e.sxm.PlayIngame("impact"), null === o)) {
                        const t = a(s.amt);
                        e.gpm.Vibrate(ee[`damage_${t}`.toUpperCase()]), e.sxm.PlayIngame(`damage_${t}`)
                    }
                    null !== o ? r(o) : i(s, n)
                },
                OutgoingAttack: o,
                OutgoingAttackHit: function() {
                    e.sxm.PlayIngame("impact")
                },
                InsertDamage: i,
                ActivateDamage: r,
                TakeAllDamage: function(s = !1) {
                    if (!t.setoptions.hasgarbage) return;
                    t.impendingdamage.length && !e.c.IsServer() && (e.gpm.Vibrate(ee.GARBAGERISE), e.sxm.PlayIngame("garbagerise"));
                    let a = !0;
                    const n = s ? 400 : Math.floor(Math.min(t.setoptions.garbagecapmax || 40, t.setoptions.garbagecap));
                    let o = !1;
                    const i = [];
                    for (let e = t.impendingdamage.length - 1; e >= 0; e--) t.impendingdamage[e].active || (i.unshift(t.impendingdamage[e]), t.impendingdamage.splice(e, 1));
                    for (let i = 0; i < n && 0 !== t.impendingdamage.length; i++) {
                        e.hm.H.holderstate.ds += (i >= 40 ? 0 : 2) * e.lm.H.lastdT, t.impendingdamage[0].lines--, o = !0;
                        const r = t.impendingdamage[0].lines <= 0 || i >= n - 1;
                        if (!e.bm.PushGarbageLine(t.impendingdamage[0].column, s, (a ? 64 : 0) | (r ? 4 : 0))) break;
                        a = !1, t.impendingdamage[0].lines || (t.impendingdamage.shift(), a = !0)
                    }
                    t.impendingdamage.push(...i), o && !e.c.IsServer() && e.pbm.UpdateGarbageBar("impending")
                },
                AnnounceOffensive: function() {
                    if (t.lastoffensive.offence && (e.spm.H.spikeCount >= 10 && e.fim.AddFire(5), t.lastoffensive.offence >= 10 && e.fim.AddFire(3 * t.lastoffensive.offence)), !e.c.IsServer() && "minimal" !== te.video.graphics && (t.lastoffensive.defense && e.hm.H.board.fx("popup_defense").create(t.lastoffensive.defense, {
                            x: t.lastoffensive.x,
                            y: t.lastoffensive.y
                        }), t.lastoffensive.offence)) {
                        if (e.spm.H.spikeCount += t.lastoffensive.offence, e.spm.H.spikeTimer = 60, "full" === e.hm.H.displaymode && e.spm.H.spikeCount >= 10 && 0 !== e.lm.H.soundSkipRate) {
                            const s = $n(e.hm.H.holder, ls(Wn.x) * e.Wh(), ls(Wn.x) * e.Hh());
                            sn.play("spike_flair", {
                                x: s.x,
                                y: s.y,
                                w: e.W() * e.hm.S(),
                                h: e.H() * e.hm.S()
                            });
                            const a = $n(e.hm.H.stackobj, ls(Wn.x * t.lastoffensive.x), ls(Wn.x * (t.lastoffensive.y - e.B())));
                            rn(a.x, a.y, 1 + Math.min(e.spm.H.spikeCount - 10, 22.5) / 2.5), t.lastoffensive.offence >= 4 && e.sxm.PlayIngame(`thunder${Math.floor(6 * Math.random()) + 1}`, 1, !0)
                        }
                        e.hm.H.board.fx("popup_offence").create(e.spm.H.spikeCount, {
                            x: t.lastoffensive.x,
                            y: t.lastoffensive.y
                        })
                    }
                }
            }
        },
        yo = function(e) {
            "use strict";
            const t = e.gsm;

            function s() {
                let e = [];
                switch (t.setoptions.bagtype) {
                    case "total mayhem":
                        for (let s = 0; s < 7; s++) e.push(ho.minotypes[Math.floor(t.rng.nextFloat() * ho.minotypes.length)]);
                        break;
                    case "classic":
                        for (let s = 0; s < 7; s++) {
                            let s = Math.floor(t.rng.nextFloat() * (ho.minotypes.length + 1));
                            (s === t.lastGenerated || s >= ho.minotypes.length) && (s = Math.floor(t.rng.nextFloat() * ho.minotypes.length)), t.lastGenerated = s, e.push(ho.minotypes[s])
                        }
                        break;
                    case "pairs":
                        const s = [...ho.minotypes];
                        t.rng.shuffleArray(s), e = [s[0], s[0], s[0], s[1], s[1], s[1]], t.rng.shuffleArray(e);
                        break;
                    case "14-bag":
                        e = [...ho.minotypes, ...ho.minotypes], t.rng.shuffleArray(e);
                        break;
                    case "7-bag":
                    default:
                        e = [...ho.minotypes], t.rng.shuffleArray(e)
                }
                t.bag.push(...e)
            }
            return {
                PopulateBag: s,
                PullFromBag: function() {
                    for (; t.bag.length < 7;) s();
                    return t.bag.shift()
                }
            }
        },
        vo = function(e) {
            "use strict";
            const t = e.gsm;
            let s = [];

            function a(t, a, o, i) {
                const r = 10 + Math.ceil(o) * (2 * e.W()) + a;
                if (s[r]) {
                    const e = s[r] >> 2 * i & 3;
                    if (1 === e) return !0;
                    if (2 === e) return !1
                }
                if (!ho.tetrominoes[t]) return !1;
                let l = !0;
                for (let e = 0; e < ho.tetrominoes[t].matrix.data[i].length; e++) {
                    if (n(a + (ho.tetrominoes[t].matrix.data[i][e][0] - ho.tetrominoes[t].matrix.dx), o + (ho.tetrominoes[t].matrix.data[i][e][1] - ho.tetrominoes[t].matrix.dy))) {
                        l = !1;
                        break
                    }
                }
                s[r];
                const c = l ? 1 : 2;
                return s[r] |= c << 2 * i, l
            }

            function n(s, a) {
                return s < 0 || s >= e.W() || (a < 0 || a >= e.T() || (void 0 === t.board[Math.ceil(a)] || null !== t.board[Math.ceil(a)][s]))
            }

            function o(s, a, n, o) {
                let i = 0;
                for (let r = 0; r < ho.tetrominoes[s].matrix.data[o].length; r++) {
                    const l = ho.tetrominoes[s].matrix.data[o][r][0] - ho.tetrominoes[s].matrix.dx,
                        c = ho.tetrominoes[s].matrix.data[o][r][1] - ho.tetrominoes[s].matrix.dy;
                    i = Math.max(Math.ceil(n) + c, i), t.board[Math.ceil(n) + c][a + l] = s, t.boardedges[Math.ceil(n) + c][a + l] = ho.tetrominoes[s].matrix.data[o][r][2], e.c.OnClient(() => {
                        e.hm.H.stackmud.push([Math.ceil(n) + c, a + l, s, ho.tetrominoes[s].matrix.data[o][r][2]])
                    })
                }
                return i < e.B()
            }

            function i(e, t, s, a) {
                let n = 0,
                    o = [],
                    i = [];
                for (let r = 0; r < ho.tetrominoes[e].matrix.data[a].length; r++) {
                    const l = ho.tetrominoes[e].matrix.data[a][r][0] - ho.tetrominoes[e].matrix.dx,
                        c = ho.tetrominoes[e].matrix.data[a][r][1] - ho.tetrominoes[e].matrix.dy;
                    n = Math.max(Math.ceil(s) + c, n), o.push(`${Math.ceil(s) + c}x${t + l}`), i.push([Math.ceil(s) + c, t + l])
                }
                return {
                    besty: n,
                    shadowTiles: o,
                    shadowTilesArr: i
                }
            }
            return {
                SetupBoard: function() {
                    let s = [],
                        a = [];
                    for (let t = 0; t < e.T(); t++) {
                        let t = [],
                            n = [];
                        for (let s = 0; s < e.W(); s++) t.push(null), n.push(255);
                        s.push(t), a.push(n)
                    }
                    t.board = s, t.boardedges = a
                },
                LoadMap: function(s) {
                    const a = (s = s.replace(/[\s\n\r]/g, "").toLowerCase()).split("?");
                    s = a[0];
                    let n = a[1] || "";
                    if (t.hold = a[2] || null, n = n.replace(/[^zlosijt]/g, ""), s.length % e.W() != 0) return;
                    if (n && n.length)
                        for (t.bag = n.split(""); t.bag.length < 7;) e.bam.PopulateBag();
                    const o = e.T() - s.length / e.W();
                    for (let a = 0; a < s.length; a++) {
                        const n = o + Math.floor(a / e.W()),
                            i = a % e.W();
                        let r = s[a];
                        "_" === r && (r = null), "#" === r && (r = "gb"), "@" === r && (r = "gbd"), t.board[n][i] = r
                    }
                },
                BoardToMap: function() {
                    let s = "";
                    for (let a = 0; a < e.T(); a++)
                        for (let n = 0; n < e.W(); n++) {
                            const e = t.board[a][n];
                            s += null === e ? "_" : "gb" === e ? "#" : "gbd" === e ? "@" : e
                        }
                    return s += `?${t.started && t.falling.type ? t.falling.type : ""}${t.bag.slice(0, 5).join("")}${t.hold ? `?${t.hold}` : ""}`
                },
                IsLegalAtPos: a,
                ClearIsLegalAtPosMemo: function() {
                    s = []
                },
                IsOccupied: n,
                IsOccupiedInv: function(s, a) {
                    if (!(Math.round(s) < 0 || Math.round(s) >= e.W() || Math.round(a) < 0 || Math.round(a) >= e.T() || void 0 === t.board[Math.round(a)])) return null !== t.board[Math.round(a)][Math.round(s)]
                },
                BoardIsEmpty: function() {
                    return t.board.every(e => e.every(e => null === e))
                },
                HighestLine: function() {
                    for (let s = 0; s < e.T(); s++)
                        if (t.board[s].some(e => null !== e)) return s;
                    return 40
                },
                PushActiveToStack: function() {
                    return o(t.falling.type, t.falling.x, t.falling.y, t.falling.r)
                },
                PushTetrominoToStack: o,
                GetTilesAndNextYForPiece: i,
                PieceMayLockHere: function(s, a, n, o) {
                    let r = i(s, a, n, o);
                    if (r.besty < e.B()) return !1;
                    let l = 0;
                    t.impendingdamage.forEach(e => {
                        e.active && (l += e.lines)
                    });
                    let c = Math.min(l, Math.floor(Math.min(t.setoptions.garbagecapmax || 40, t.setoptions.garbagecap))),
                        d = i(t.bag[0], Math.floor(e.W() / 2) - 1 + t.kickset.additional_offsets[t.bag[0]][t.kickset.spawn_rotation[t.bag[0]]][0], e.B() - 2.04 + t.kickset.additional_offsets[t.bag[0]][t.kickset.spawn_rotation[t.bag[0]]][1] + c, t.kickset.spawn_rotation[t.bag[0]]),
                        p = !1;
                    return r.shadowTiles.forEach(e => {
                        d.shadowTiles.includes(e) && (p = !0)
                    }), d.shadowTilesArr.forEach(s => {
                        (s[0] >= e.T() || null !== t.board[s[0]][s[1]]) && (p = !0)
                    }), !p
                },
                RemoveLinesFromStack: function(s) {
                    let a = [...t.board],
                        n = [...t.boardedges];
                    s.sort((function(e, t) {
                        return t - e
                    }));
                    for (let e = 0; e < s.length; e++) {
                        if (n[s[e] - 1])
                            for (let t = 0; t < n[s[e] - 1].length; t++) n[s[e] - 1][t] |= 4;
                        if (n[s[e] + 1])
                            for (let t = 0; t < n[s[e] + 1].length; t++) n[s[e] + 1][t] |= 64
                    }
                    for (let t = 0; t < s.length; t++) a.splice(s[t], 1), n.splice(s[t], 1), e.c.OnClient(() => {
                        e.fxm.ExplodeLine(s[t])
                    });
                    for (; a.length < e.T();) {
                        let t = [],
                            s = [];
                        for (let a = 0; a < e.W(); a++) t.push(null), s.push(255);
                        a.unshift(t), n.unshift(s)
                    }
                    t.board = a, t.boardedges = n, e.hm.H.stackdirty = !0
                },
                PushGarbageLine: function(s, a = !1, n = 68) {
                    let o = [...t.board],
                        i = [...t.boardedges];
                    if (t.lastwasattack = !0, !o[0].every(e => null === e)) return a || (t.setoptions.topoutisclear ? e.stm.LoseStockOrGameOver("topout_clear") : e.stm.LoseStockOrGameOver("garbagesmash")), !1;
                    o.shift(), i.shift();
                    const r = [],
                        l = [];
                    for (let t = 0; t < e.W(); t++) r.push(t === s ? null : "gb"), l.push(t === s ? 255 : n | (0 === t || t === s + 1 ? 1 : 0) | (t === e.W() - 1 || t === s - 1 ? 16 : 0));
                    return o.push(r), i.push(l), t.board = o, t.boardedges = i, e.hm.H.stackdirty = !0, !0
                },
                PushUpFallingIfNeeded: function() {
                    if (!a(t.falling.type, t.falling.x, t.falling.y, t.falling.r)) {
                        if (!a(t.falling.type, t.falling.x, t.falling.y - 1, t.falling.r)) return void(e.gsm.setoptions.topoutisclear ? e.stm.LoseStockOrGameOver("topout_clear") : e.stm.LoseStockOrGameOver("garbagesmash"));
                        t.falling.y -= 1, e.hm.H.fallingdirty = !0
                    }
                },
                CheckStackAgainstMap: function(s) {
                    if ((s = s.replace(/[\s\n\r]/g, "")).length % e.W() != 0) return !1;
                    const a = e.T() - s.length / e.W();
                    for (let n = 0; n < s.length; n++) {
                        const o = a + Math.floor(n / e.W()),
                            i = n % e.W();
                        let r = s[n];
                        if (!t.board[o]) return !1;
                        if ("*" !== r) {
                            if ("_" === r && null !== t.board[o][i]) return !1;
                            if ("_" !== r && null === t.board[o][i]) return !1
                        }
                    }
                    return !0
                },
                DestroyBoard: function() {
                    t.impendingdamage = [];
                    for (let s = 0; s < e.T(); s++)
                        for (let a = 0; a < e.W(); a++) null !== t.board[s][a] && (e.c.OnClient(() => {
                            if ("full" === e.hm.H.displaymode && ("high" === te.video.graphics || "ultra" === te.video.graphics)) {
                                const n = $n(e.hm.H.stackobj, a * ls(Wn.x) + ls(Wn.x / 2), (s - e.B()) * ls(Wn.x) + ls(Wn.x / 2)),
                                    o = eo.getColor(t.setoptions.minoskin[t.kickset.colorMap[t.board[s][a]]] || t.setoptions.minoskin.other, t.kickset.colorMap[t.board[s][a]]);
                                sn.play("mino_dust", {
                                    x: n.x,
                                    y: n.y,
                                    s: e.hm.S(),
                                    color: o
                                })
                            }
                        }), t.board[s][a] = null);
                    e.c.OnClient(() => {
                        e.hm.H.stackdirty = !0, e.pbm.UpdateGarbageBar("impending")
                    })
                }
            }
        },
        ko = function(e) {
            "use strict";
            const t = e.gsm;
            return {
                IsInactive: function(s, a, n = !1) {
                    if (t.falling.x >= s - 2 && t.falling.x <= s + 2 && (t.falling.y >= a - 2 && t.falling.y <= a + 2 || e.sdm.H.lastLegal >= a - 2 && e.sdm.H.lastLegal <= a + 2)) return !1;
                    const o = e.bm.IsOccupiedInv(s, a);
                    return n ? [
                        [s - 2, a - 2],
                        [s - 1, a - 2],
                        [s + 0, a - 2],
                        [s + 1, a - 2],
                        [s + 2, a - 2],
                        [s - 2, a - 1],
                        [s - 1, a - 1],
                        [s + 0, a - 1],
                        [s + 1, a - 1],
                        [s + 2, a - 1],
                        [s - 2, a + 0],
                        [s - 1, a + 0],
                        [s + 1, a + 0],
                        [s + 2, a + 0],
                        [s - 2, a + 1],
                        [s - 1, a + 1],
                        [s + 0, a + 1],
                        [s + 1, a + 1],
                        [s + 2, a + 1],
                        [s - 2, a + 2],
                        [s - 1, a + 2],
                        [s + 0, a + 2],
                        [s + 1, a + 2],
                        [s + 2, a + 2]
                    ].every(t => {
                        const s = e.bm.IsOccupiedInv(t[0], t[1]);
                        return s === o || void 0 === s
                    }) : [
                        [s - 1, a - 1],
                        [s + 0, a - 1],
                        [s + 1, a - 1],
                        [s - 1, a + 0],
                        [s + 1, a + 0],
                        [s - 1, a + 1],
                        [s + 0, a + 1],
                        [s + 1, a + 1]
                    ].every(t => {
                        const s = e.bm.IsOccupiedInv(t[0], t[1]);
                        return s === o || void 0 === s
                    })
                }
            }
        },
        wo = function(e) {
            "use strict";
            const t = e.gsm;
            return {
                OnClient: function(e) {
                    t.setoptions && t.setoptions.headless || _(e)
                },
                OnServer: function(e) {
                    t.setoptions && t.setoptions.headless ? e() : b(e)
                },
                IsServer: function(e = !1) {
                    return !(e || !t.setoptions || !t.setoptions.headless) || y()
                }
            }
        },
        Lo = function(e) {
            "use strict";
            const t = e.gsm;
            return {
                UpdateCounter: function(s, a) {
                    for (let n = 1; n <= 5; n++) t.setoptions[`slot_counter${n}`] === s && e.hm.H.board.el(`counter${n}`).update(a)
                },
                UpdateCounterTitle: function(s, a) {
                    for (let n = 1; n <= 5; n++) t.setoptions[`slot_counter${n}`] === s && e.hm.H.board.el(`counter${n}`).update(void 0, void 0, a)
                },
                UpdateCounterSubtitle: function(s, a) {
                    for (let n = 1; n <= 5; n++) t.setoptions[`slot_counter${n}`] === s && e.hm.H.board.el(`counter${n}`).update(void 0, a)
                }
            }
        },
        Eo = function(e) {
            "use strict";
            const t = e.gsm,
                s = {
                    countersfrozen: !1
                },
                n = {
                    timer: "time",
                    stopwatch: "time",
                    kills: "KO's",
                    attack: "attack",
                    lines: "lines",
                    pieces: "pieces",
                    level: "level",
                    finesse_l: "finesse",
                    keys: "inputs",
                    score: "score",
                    spp: "score",
                    placement: "placement",
                    finesse: "finesse",
                    vs: "VS score",
                    hold: "hold",
                    allclears: "all clears"
                };
            return {
                H: s,
                DisplayCounts: function() {
                    e.c.IsServer() || t.destroyed || (Object.keys(n).forEach(s => {
                        for (let a = 1; a <= 5; a++) t.setoptions[`slot_counter${a}`] === s && e.hm.H.board.el(`counter${a}`).update(void 0, void 0, n[s])
                    }), t.setoptions.b2bchaining && t.stats.btb > 1 && e.hm.H.board.el("b2b").create(t.stats.btb - 1))
                },
                UpdateCounts: function(n = !1) {
                    if (e.c.IsServer()) return;
                    if (t.destroyed) return;
                    if (s.countersfrozen) return;
                    let o = 0;
                    if (t.impendingdamage.forEach(e => {
                            o += e.lines
                        }), e.pbm.UpdateBar("impending", o / e.H()), e.pbm.UpdateGarbageBar("impending"), e.pbm.UpdateBarTicker("impending", Math.floor(Math.min(t.setoptions.garbagecapmax || 40, t.setoptions.garbagecap)) / e.H()), t.setoptions.zenlevels ? e.pbm.UpdateBar("progress", t.stats.zenprogress) : t.setoptions.levels && !t.setoptions.absolute_lines ? e.pbm.UpdateBar("progress", t.stats.level_lines / t.stats.level_lines_needed) : "lines" === (t.setoptions.objective || {
                            type: "none"
                        }).type && e.pbm.UpdateBar("progress", t.stats.lines / t.setoptions.objective.count), "full" !== e.hm.H.displaymode) return;
                    t.setoptions.display_zen && e.hm.H.board.el("zen").update(t.stats.score, t.stats.zenlevel), t.setoptions.levels && !t.setoptions.absolute_lines ? e.ctm.UpdateCounter("lines", `${t.stats.level_lines}\f3/${t.stats.level_lines_needed}`) : "lines" === (t.setoptions.objective || {
                        type: "none"
                    }).type ? (e.ctm.UpdateCounter("lines", `${t.stats.lines}\f3/${t.setoptions.objective.count}`), t.setoptions.pro && e.hm.H.board.el("backer").update(`${Math.max(0, t.setoptions.objective.count - t.stats.lines)}`)) : e.ctm.UpdateCounter("lines", t.stats.lines);
                    let i = t.stats.level;
                    if (t.setoptions.masterlevels && t.stats.level > 20 && (i = `M${t.stats.level - 20}`), !n && !t.stats.time.locked) {
                        let s = a(t.stats.time.zero ? 0 : (e.iom.source.getFrame() - t.stats.time.frameoffset) / 60 * 1e3);
                        parseInt(s.m) >= 60 && (s.m = `${Math.floor(parseInt(s.m) / 60)}:${(parseInt(s.m) % 60).toString().padStart(2, "0")}`), te.video.lowrescounters || "minimal" === te.video.graphics ? e.ctm.UpdateCounter("stopwatch", `${s.m}:${s.s}`) : e.ctm.UpdateCounter("stopwatch", `${s.m}:${s.s}\f3.${s.ms}`), s = a(Math.max(0, (t.setoptions.objective.time || 0) - (t.stats.time.zero ? 0 : (e.iom.source.getFrame() - t.stats.time.frameoffset) / 60 * 1e3))), te.video.lowrescounters || "minimal" === te.video.graphics ? e.ctm.UpdateCounter("timer", `${s.m}:${s.s}`) : e.ctm.UpdateCounter("timer", `${s.m}:${s.s}\f3.${s.ms}`)
                    }
                    if (!t.stats.time.locked) {
                        const s = (e.iom.source.getFrame() - t.stats.time.frameoffset) / 60 || 1,
                            a = (e.iom.source.getFrame() - t.stats.time.frameoffset) / 3600 || 1,
                            n = (t.stats.garbage.attack + t.stats.garbage.cleared) / Math.max(1, t.stats.piecesplaced) * (t.stats.piecesplaced / s) * 100;
                        te.video.lowrescounters || "minimal" === te.video.graphics ? e.ctm.UpdateCounter("pieces", `${t.stats.piecesplaced}\f3, ${(t.stats.piecesplaced / s).toFixed(1)}/S`) : e.ctm.UpdateCounter("pieces", `${t.stats.piecesplaced}\f3, ${(t.stats.piecesplaced / s).toFixed(2)}/S`), te.video.lowrescounters || "minimal" === te.video.graphics ? e.ctm.UpdateCounter("attack", `${t.stats.garbage.attack}\f3, ${Math.round(t.stats.garbage.attack / a)}/M`) : e.ctm.UpdateCounter("attack", `${t.stats.garbage.attack}\f3, ${(t.stats.garbage.attack / a).toFixed(2)}/M`), te.video.lowrescounters || "minimal" === te.video.graphics ? e.ctm.UpdateCounter("vs", `${Math.floor(n)}`) : e.ctm.UpdateCounter("vs", `${Math.floor(n)}\f3.${Math.floor(100 * (n - Math.floor(n))).toString().padStart(2, "0")}`)
                    }
                    e.ctm.UpdateCounter("level", i), e.ctm.UpdateCounter("score", t.stats.score.toLocaleString("en-US")), e.ctm.UpdateCounter("kills", t.stats.kills), e.ctm.UpdateCounter("placement", `\f3#\f5${t.placement}`), e.ctm.UpdateCounter("keys", `${t.stats.inputs}\f3, ${(t.stats.inputs / Math.max(1, t.stats.piecesplaced)).toFixed(2)}/P`), e.ctm.UpdateCounter("spp", `${t.stats.score.toLocaleString("en-US")}\f3, ${Math.round(t.stats.score / Math.max(1, t.stats.piecesplaced)).toLocaleString("en-US")}/P`), e.ctm.UpdateCounter("finesse", `${t.stats.finesse.combo}\f3, ${(t.stats.finesse.perfectpieces / Math.max(1, t.stats.piecesplaced) * 100).toFixed(2)}%`), e.ctm.UpdateCounterSubtitle("finesse", `${t.stats.finesse.faults} fault${1 === t.stats.finesse.faults ? "" : "s"}`), e.ctm.UpdateCounter("finesse_l", `${t.stats.finesse.combo}\f3, ${(t.stats.finesse.perfectpieces / Math.max(1, t.stats.piecesplaced) * 100).toFixed(2)}%,${t.stats.finesse.faults}F`), e.ctm.UpdateCounter("hold", `${t.stats.holds}\f3, ${(t.stats.holds / Math.max(1, t.stats.piecesplaced) * 100).toFixed(2)}%`), e.ctm.UpdateCounter("allclears", t.stats.clears.allclear), "full" === e.hm.H.displaymode && e.iom.source.getFrame() % 60 == 0 && (Sn = !0)
                },
                FinalizeTimer: function(t) {
                    let s = a(t);
                    te.video.lowrescounters || "minimal" === te.video.graphics ? e.ctm.UpdateCounter("stopwatch", `${s.m}:${s.s}`) : e.ctm.UpdateCounter("stopwatch", `${s.m}:${s.s}\f3.${s.ms}`), s = a(0), te.video.lowrescounters || "minimal" === te.video.graphics ? e.ctm.UpdateCounter("timer", `${s.m}:${s.s}`) : e.ctm.UpdateCounter("timer", `${s.m}:${s.s}\f3.${s.ms}`)
                },
                StartStopwatch: function() {
                    t.stats.time.start = performance.now(), t.stats.time.zero = !1
                }
            }
        },
        xo = function(e) {
            "use strict";
            const t = e.gsm;

            function s(s, a) {
                let n = Math.floor(1e13 * t.falling.y) / 1e13 + s;
                n % 1 == 0 && (n += 1e-5);
                let o = Math.floor(1e13 * t.falling.y) / 1e13 + 1;
                if (o % 1 == 0 && (o -= 2e-5), e.bm.IsLegalAtPos(t.falling.type, t.falling.x, n, t.falling.r) && e.bm.IsLegalAtPos(t.falling.type, t.falling.x, o, t.falling.r)) {
                    const s = t.falling.highesty,
                        o = t.falling.y;
                    return t.falling.y = n, t.falling.highesty = Math.ceil(Math.max(t.falling.highesty, n)), t.falling.floored = !1, Math.ceil(n) !== Math.ceil(o) && (e.hm.H.fallingdirty = !0), (n > s || t.setoptions.infinitemovement) && (t.falling.lockresets = 0, t.fallingrotations = 0), a >= Number.MAX_SAFE_INTEGER && (t.stats.score += ho.scoring.HARDDROP, t.setoptions.zenlevels && (t.stats.zenprogress += e.znm.ScoreToZenProgress(ho.scoring.HARDDROP, t.stats.zenlevel)), e.c.OnClient(() => {
                        "full" === e.hm.H.displaymode && e.fxm.EffectAtTetromino("harddrop_trail", {}, e.hm.H.fallingobj, t.falling.type, t.falling.x, t.falling.y, t.falling.r)
                    })), !0
                }
                return a >= Number.MAX_SAFE_INTEGER && e.c.OnClient(() => {
                    "full" === e.hm.H.displaymode && 0 !== e.lm.H.soundSkipRate && (sn.play("bgsplash", {
                        direction: 180,
                        amt: 5
                    }), e.fxm.EffectAtTetrominoEdge("harddrop_edge", {}, e.hm.H.fallingobj, t.falling.type, t.falling.x, t.falling.y, t.falling.r))
                }), !1
            }

            function a(s = !1, a = 1) {
                t.falling.locking += t.setoptions.version >= 15 ? a : 1, t.falling.floored || (t.falling.floored = !0, e.c.OnClient(() => {
                    e.sxm.PlayIngame("hit")
                })), (t.falling.locking > (t.setoptions.locktime || 30) || t.falling.forcelock) && n(s), t.falling.lockresets > (t.setoptions.lockresets || 15) && !t.setoptions.infinitemovement && n(s)
            }

            function n(s = !1) {
                t.falling.sleep = !0;
                const a = e.bm.PushActiveToStack();
                t.stats.piecesplaced++, !s && t.handling.safelock && (t.falling.safelock = 7), e.c.OnClient(() => {
                    e.sxm.PlayIngame("floor"), e.hm.H.holderstate.dy += 2 * e.lm.H.lastdT
                });
                const n = e.lcm.ClearLines(),
                    i = n ? t.setoptions.lineclear_are || 0 : t.setoptions.are || 0,
                    r = Math.max(0, t.falling.keys - ho.finesse[t.falling.type][t.falling.r.toString()][t.falling.x + 1]);
                if (t.stats.finesse.faults += r, r > 0 ? (t.stats.finesse.combo = 0, e.c.OnClient(() => {
                        "full" === e.hm.H.displaymode && "keyboard" === e.iom.source.type() && t.setoptions.pro_alert && (e.sxm.PlayIngame("finessefault"), e.hm.H.holderstate.ds += 1.5 * e.lm.H.lastdT), "full" === e.hm.H.displaymode && "keyboard" === e.iom.source.type() && t.setoptions.pro_retry && t.setoptions.can_retry && (e.hm.H.holderstate.ds += 50 * e.lm.H.lastdT, e.gom.GameOver("retry", !0), vs.play("detonate2"))
                    })) : (t.stats.finesse.combo++, t.stats.finesse.perfectpieces++), a && (n && !1 !== t.setoptions.clutch ? e.c.OnClient(() => {
                        te.video.siren && (e.sxm.PlayIngame("clutch"), "minimal" !== te.video.graphics && "off" !== te.video.actiontext && "some" !== te.video.actiontext && e.hm.H.board.fx("clutch").create("CLUTCH"))
                    }) : t.setoptions.topoutisclear ? e.stm.LoseStockOrGameOver("topout_clear") : e.stm.LoseStockOrGameOver("topout")), t.setoptions.zenlevels && t.stats.combo <= 2 && t.stats.zenprogress >= 1) return e.hm.H.fallingdirty = !0, void e.znm.ZenLevelup();
                i ? (e.hm.H.fallingdirty = !0, e.wfm.WaitFrames(i, "are", {})) : o()
            }

            function o(s) {
                e.bm.ClearIsLegalAtPosMemo(), t.falling.locking = 0, t.falling.forcelock = !1, t.falling.lockresets = 0, t.falling.floored = !1, t.falling.type = null == s ? e.bam.PullFromBag() : s, t.falling.aox = t.kickset.additional_offsets[t.falling.type][t.kickset.spawn_rotation[t.falling.type]][0], t.falling.aoy = t.kickset.additional_offsets[t.falling.type][t.kickset.spawn_rotation[t.falling.type]][1], t.falling.x = Math.floor(e.W() / 2) - 1 + t.falling.aox, t.falling.y = e.B() - 2.04 + t.falling.aoy, t.falling.highesty = e.B() - 2, t.falling.r = t.kickset.spawn_rotation[t.falling.type], t.falling.spintype = !1, t.falling.sleep = !1, t.falling.last = null, t.falling.keys = 0, t.fallingrotations = 0, t.totalrotations = 0, t.holdlocked = void 0 !== s, t.falling.clamped && t.handling.dcd > 0 && (t.ldas = Math.min(t.ldas, t.handling.das - t.handling.dcd), t.ldasiter = t.handling.arr, t.rdas = Math.min(t.rdas, t.handling.das - t.handling.dcd), t.rdasiter = t.handling.arr), t.falling.clamped = !1, null == s && !1 !== t.setoptions.display_next && t.setoptions.physical && e.c.OnClient(() => {
                    e.sxm.PlayIngame(t.bag[0])
                }), e.bm.IsLegalAtPos(t.falling.type, t.falling.x, t.falling.y, t.falling.r) ? t.lastwasattack = !1 : t.setoptions.topoutisclear ? e.stm.LoseStockOrGameOver("topout_clear") : e.stm.LoseStockOrGameOver(t.lastwasattack ? "garbagesmash" : "topout"), e.hm.H.fallingdirty = !0, e.hm.H.nextdirty = !0, e.hm.H.holddirty = !0, t.falling.ihs && (t.holdlocked || void 0 !== t.setoptions.display_hold && !t.setoptions.display_hold || i()), 0 !== t.falling.irs && e.im.RotatePiece((t.kickset.spawn_rotation[t.falling.type] + t.falling.irs) % 4), t.falling.irs = 0, t.falling.ihs = !1, e.znm.UpdateCheeseLayer(), void 0 === s && (t.setoptions.onpiece || (() => {}))(e.iom.source.getFrame())
            }

            function i() {
                const s = t.falling.type;
                o(t.hold), t.hold = s, t.stats.holds++, e.hm.H.holddirty = !0, e.sxm.PlayIngame("hold")
            }
            return {
                FallEvent: function(n, o = 1) {
                    if (t.falling.safelock > 0 && t.falling.safelock--, t.falling.sleep || t.falling.deep_sleep) return;
                    let i = t.g * o;
                    t.softdrop && (t.handling.sdf == (t.setoptions.version >= 15 ? 41 : 21) ? i = (t.setoptions.version >= 15 ? 400 : 20) * o : (i *= t.handling.sdf, i = Math.max(i, t.setoptions.version >= 13 ? .05 * t.handling.sdf : .42))), void 0 !== n && (i = n, e.c.OnClient(() => {
                        e.gpm.Vibrate(ee.HARDDROP), e.sxm.PlayIngame("harddrop")
                    })), !t.setoptions.infinitemovement && t.falling.lockresets >= (t.setoptions.lockresets || 15) && !e.bm.IsLegalAtPos(t.falling.type, t.falling.x, t.falling.y + 1, t.falling.r) && (i = 20, t.falling.forcelock = !0), !t.setoptions.infinitemovement && t.fallingrotations > (t.setoptions.lockresets || 15) + 15 && (i += .5 * o * (t.fallingrotations - ((t.setoptions.lockresets || 15) + 15)));
                    let r = i;
                    for (; i > 0;) {
                        const l = Math.ceil(t.falling.y);
                        if (!s(Math.min(1, i), r)) {
                            void 0 !== n && (t.falling.forcelock = !0), a(void 0 !== n, o);
                            break
                        }
                        i -= Math.min(1, i), l !== Math.ceil(t.falling.y) && (t.falling.last = "fall", t.softdrop && (t.stats.score += ho.scoring.SOFTDROP, t.setoptions.zenlevels && (t.stats.zenprogress += e.znm.ScoreToZenProgress(ho.scoring.SOFTDROP, t.stats.zenlevel)), e.c.OnClient(() => {
                            e.sxm.PlayIngame("softdrop")
                        })))
                    }
                },
                FallInner: s,
                Locking: a,
                Lock: n,
                Next: o,
                SwapHold: i
            }
        },
        To = function(e) {
            "use strict";
            const t = e.gsm;
            return {
                LowerFire: function() {
                    t.fireGrace > 0 ? t.fireGrace-- : t.fire = Math.max(0, t.fire - 5 / 60)
                },
                AddFire: function(s) {
                    if (!t.setoptions.display_fire) return;
                    let a = t.fire >= 500;
                    t.fire = Math.min(700, t.fire + s), t.fire >= 500 && !a && ("full" !== e.hm.H.displaymode || e.c.IsServer() || "minimal" === te.video.graphics || !1 === te.video.fire || (e.sxm.PlayIngame("fire"), e.hm.H.board.el("username").action("startfire")), t.fireGrace = 300, t.fire = Math.min(700, t.fire + 14))
                },
                PullFire: function(s = 1) {
                    e.c.IsServer() || (t.fire !== t.fireAppr && ("minimal" === te.video.graphics || "tiny" === e.hm.H.displaymode ? t.fireAppr = t.fire : (t.fireAppr = t.fire + (t.fireAppr - t.fire) * Math.pow(.9, s), Math.abs(t.fireAppr - t.fire) < .01 && (t.fireAppr = t.fire))), "minimal" !== te.video.graphics && !1 !== te.video.fire && "high" !== te.video.caching && (e.hm.H.board.el("username").update(t.fireAppr), t.fireAppr >= 500 && t.playing && e.hm.H.board.el("username").action("continuefire")))
                }
            }
        },
        Io = function(e) {
            "use strict";
            const t = e.gsm;
            return {
                ExplodeLine: function(s) {
                    e.c.IsServer() || "low" !== te.video.graphics && "minimal" !== te.video.graphics && "full" === e.hm.H.displaymode && 0 !== e.lm.H.soundSkipRate && "full" === e.hm.H.displaymode && (sn.play("bgsplash", {
                        direction: 90,
                        amt: 5
                    }), sn.play("bgsplash", {
                        direction: 270,
                        amt: 5
                    }), function(s, a, n) {
                        if (e.c.IsServer()) return;
                        if ("low" === te.video.graphics || "minimal" === te.video.graphics || "tiny" === e.hm.H.displaymode || 0 === e.lm.H.soundSkipRate) return;
                        for (var o = 0; o < e.W(); o++) {
                            const i = $n(e.hm.H.stackobj, o * ls(Wn.x) + ls(Wn.x / 2), (n - e.B()) * ls(Wn.x) + ls(Wn.x / 2)),
                                r = eo.getColor(t.setoptions.minoskin[t.kickset.colorMap[t.board[n][o]]] || t.setoptions.minoskin.other, t.kickset.colorMap[t.board[n][o]]);
                            sn.play(s, {
                                x: i.x,
                                y: i.y,
                                s: e.hm.S(),
                                color: r,
                                ...a
                            })
                        }
                    }("line_burst", {}, s))
                },
                EffectAtTetromino: function(s, a, n, o, i, r, l) {
                    if (!e.c.IsServer() && "low" !== te.video.graphics && "minimal" !== te.video.graphics && 0 !== e.lm.H.soundSkipRate)
                        for (let c = 0; c < ho.tetrominoes[o].matrix.data[l].length; c++) {
                            const d = ho.tetrominoes[o].matrix.data[l][c][0] - ho.tetrominoes[o].matrix.dx,
                                p = ho.tetrominoes[o].matrix.data[l][c][1] - ho.tetrominoes[o].matrix.dy,
                                u = $n(n, (i + d) * ls(Wn.x) + ls(Wn.x / 2), (Math.ceil(r) + p - e.B()) * ls(Wn.x) + ls(Wn.x / 2)),
                                m = eo.getColor(t.setoptions.minoskin[t.kickset.colorMap[o]] || t.setoptions.minoskin.other, t.kickset.colorMap[o]);
                            sn.play(s, {
                                x: u.x,
                                y: u.y,
                                color: m,
                                ...a
                            })
                        }
                },
                EffectAtTetrominoEdge: function(s, a, n, o, i, r, l) {
                    if (!e.c.IsServer() && "low" !== te.video.graphics && "minimal" !== te.video.graphics && 0 !== e.lm.H.soundSkipRate)
                        for (let c = 0; c < ho.tetrominoes[o].matrix.data[l].length; c++) {
                            const d = ho.tetrominoes[o].matrix.data[l][c][0] - ho.tetrominoes[o].matrix.dx,
                                p = ho.tetrominoes[o].matrix.data[l][c][1] - ho.tetrominoes[o].matrix.dy;
                            if (e.bm.IsOccupied(i + d, Math.ceil(r) + p + 1)) {
                                const l = $n(n, (i + d) * ls(Wn.x) + ls(Wn.x / 2), (Math.ceil(r) + p - e.B()) * ls(Wn.x) + ls(Wn.x)),
                                    c = eo.getColor(t.setoptions.minoskin[t.kickset.colorMap[o]] || t.setoptions.minoskin.other, t.kickset.colorMap[o]);
                                sn.play(s, {
                                    x: l.x,
                                    y: l.y,
                                    color: c,
                                    ...a
                                })
                            }
                        }
                }
            }
        },
        So = function(e) {
            "use strict";
            const t = e.gsm;
            let s = [];
            const a = ["interaction_confirm", "kev"];
            return {
                HandleIGE: function(n) {
                    if ("ige" !== n.type) return;
                    if (void 0 === n.id && (n = n.data), s.includes(n.id)) return;
                    s.push(n.id);
                    const o = () => {
                        if (t.setoptions.noreplay || e.iom.replay.pushEvent("ige", n), "attack" === n.data.type && e.atm.IncomingAttack({
                                type: "garbage",
                                amt: n.data.lines,
                                column: n.data.column,
                                x: e.Wh(),
                                y: e.B() + e.Hh()
                            }, n.data.sender, n.data.cid), "interaction" === n.data.type) switch (n.data.data.type) {
                            case "garbage":
                                e.atm.StartingAttack(n.data.data, n.data.sender, n.data.cid)
                        }
                        if ("interaction_confirm" === n.data.type) switch (n.data.data.type) {
                            case "garbage":
                                e.atm.IncomingAttack(n.data.data, n.data.sender, n.data.cid)
                        }
                        "kev" === n.data.type && n.data.killer.name == t.setoptions.username && (e.fim.AddFire(150 + n.data.fire / 700 * 200), t.stats.kills++)
                    };
                    if (!e.c.IsServer() && a.includes(n.data.type) && "keyboard" === e.iom.source.type() && n.data.sender && n.data.sent_frame && qs) {
                        const t = qs.getFrameOf(n.data.sender) || 0,
                            s = e.iom.source.getFrame() - t;
                        s && s <= 200 && qs.awaitFrameFor(n.data.sender, n.data.sent_frame, o) || o()
                    } else o()
                },
                ClearSeenIGEs: function() {
                    s = []
                },
                HandleTargets: function(s) {
                    "targets" === s.type && (void 0 === s.id && (s = s.data), t.setoptions.noreplay || e.iom.replay.pushEvent("targets", s), t.targets = s.data)
                },
                HandleEnd: function(t) {
                    "end" === t.type && e.gom.GameOver(t.data.reason, !0)
                }
            }
        },
        Mo = function(e) {
            "use strict";
            return {
                kickset: {},
                setoptions: {},
                handling: {},
                subframe: 0,
                started: !1,
                countdown_started: !1,
                playing: !0,
                destroyed: !1,
                successful: !1,
                endqueued: !1,
                waitingframes: [],
                unsafewaitingframes: [],
                gameoverreason: null,
                g: .25,
                board: [],
                boardedges: [],
                bag: [],
                hold: null,
                holdlocked: !1,
                rng: null,
                lastGenerated: null,
                falling: {
                    sleep: !0,
                    deep_sleep: !1,
                    hibernated: !1,
                    locking: 0,
                    lockresets: 0,
                    forcelock: !1,
                    floored: !1,
                    clamped: !1,
                    safelock: 0,
                    x: 4,
                    y: 14,
                    r: 0,
                    type: "i",
                    highesty: 14,
                    last: null,
                    lastkick: 0,
                    lastrotation: "none",
                    irs: 0,
                    ihs: !1,
                    aox: 0,
                    aoy: 0,
                    keys: 0
                },
                fallingrotations: 0,
                totalrotations: 0,
                ldas: 0,
                ldasiter: 0,
                lshift: !1,
                rdas: 0,
                rdasiter: 0,
                rshift: !1,
                lastshift: 0,
                softdrop: !1,
                stats: {
                    seed: 0,
                    lines: 0,
                    level_lines: 0,
                    level_lines_needed: 1,
                    inputs: 0,
                    holds: 0,
                    time: {
                        start: 0,
                        zero: !0,
                        locked: !1,
                        prev: 0,
                        frameoffset: 0
                    },
                    score: 0,
                    zenlevel: 1,
                    zenprogress: 0,
                    level: 0,
                    combo: 0,
                    currentcombopower: 0,
                    topcombo: 0,
                    btb: 0,
                    topbtb: 0,
                    tspins: 0,
                    piecesplaced: 0,
                    clears: {
                        singles: 0,
                        doubles: 0,
                        triples: 0,
                        quads: 0,
                        realtspins: 0,
                        minitspins: 0,
                        minitspinsingles: 0,
                        tspinsingles: 0,
                        minitspindoubles: 0,
                        tspindoubles: 0,
                        tspintriples: 0,
                        tspinquads: 0,
                        allclear: 0
                    },
                    garbage: {
                        sent: 0,
                        received: 0,
                        attack: 0,
                        cleared: 0
                    },
                    kills: 0,
                    finesse: {
                        combo: 0,
                        faults: 0,
                        perfectpieces: 0
                    }
                },
                currentbtbchainpower: 0,
                stock: 0,
                killer: {
                    name: null,
                    type: "sizzle"
                },
                lastattacker: [],
                impendingdamage: [],
                garbageid: 0,
                lastwasattack: !1,
                targets: [],
                garbagereceived: 0,
                lastoffensive: {
                    x: 0,
                    y: 0,
                    offence: 0,
                    defense: 0
                },
                placement: 1,
                fire: 0,
                fireAppr: 0,
                fireGrace: 0,
                escAllowed: !0,
                esc: !1,
                esciter: 0,
                retryAllowed: !0,
                retry: !1,
                retryiter: 0,
                hyperRetryAllowed: !0,
                hyperForfeitAllowed: !0
            }
        },
        Co = function(e) {
            "use strict";
            e.gsm;
            return {
                Vibrate: function(t) {
                    e.c.IsServer() || "keyboard" === e.iom.source.type() && ee.pulse(...t)
                }
            }
        },
        Ao = function(t) {
            "use strict";
            const s = t.gsm;

            function a() {
                t.c.IsServer() || (t.hm.H.holder && !t.hm.H.holder._destroyed && t.hm.H.holder.destroy(), s.destroyed = !0, Bn.unregisterStartingWith(t.IID), t.lm.H.stopdraw = !0, t.lm.H.stopgame = !0, Qo = Qo.filter(e => e.IID !== t.IID), t.iom.source.unhook(), t.iom.source && "keyboard" === t.iom.source.type() && (hn.opacity(1), hn.scale(1)), t.otm.EndOverText())
            }
            return {
                GameOver: function(n, o = !1) {
                    if ((!s.falling.deep_sleep || o) && !s.falling.hibernated) {
                        if (s.falling.sleep = !0, s.falling.deep_sleep = !0, s.falling.hibernated = !0, s.escAllowed = !1, s.retryAllowed = !1, s.playing = !1, s.gameoverreason = n, s.setoptions.noreplay || t.iom.replay.pushEvent("end", {
                                reason: n,
                                export: t.siom.Export()
                            }), t.c.IsServer()) return "topout" === n && (s.setoptions.onfail || (() => {}))(t.siom.Export()), "garbagesmash" === n && (s.setoptions.onfail || (() => {}))(t.siom.Export()), "forfeit" === n && (s.setoptions.onfail || (() => {}))(t.siom.Export()), "clear" === n && (s.setoptions.onfinish || (() => {}))(t.siom.Export()), "topout_clear" === n && (s.setoptions.onfinish || (() => {}))(t.siom.Export()), void(s.setoptions.onstop || (() => {}))(t.siom.Export());
                        switch (s.setoptions.zenlevels && (Ft.saveZen({
                                map: t.bm.BoardToMap(),
                                level: s.stats.zenlevel,
                                progress: s.stats.zenprogress,
                                score: s.stats.score
                            }, 800), s.setoptions.usezenconfig && e("zen_panel").classList.add("hidden")), t.hm.H.fallingobj.visible = !1, t.dsm.UpdateCounts(!0), s.setoptions.physical && "forfeit" !== n && e("forfeit").classList.add("hidden"), s.setoptions.physical && "retry" !== n && e("retry").classList.add("hidden"), t.lm.H.stopgame = !0, s.setoptions.neverstopbgm || "retry" === n && s.setoptions.bgmnoreset || ks.stop(200), s.setoptions.physical && !s.setoptions.display_replay && (document.body.classList.remove("ingame_phys"), !Qa() && te.notifications.suppress && A()), t.rbm.AwardSecrets(), n) {
                            case "topout":
                                if (!s.setoptions.physical && s.setoptions.hasgarbage && t.iom.source && "socket" === t.iom.source.type() && t.atm.TakeAllDamage(!0), t.gpm.Vibrate(ee.TOPOUT), t.sxm.PlayIngame("topout"), t.hm.H.holderstate.ds += 50 * t.lm.H.lastdT, "full" === t.hm.H.displaymode && (sn.play("bgsplashdanger", {
                                        direction: 0,
                                        amt: 50
                                    }), sn.play("bgcircle", {
                                        color: 16720384,
                                        amt: 300,
                                        speed: 300
                                    })), !1 !== te.video.siren && "full" === t.hm.H.displaymode) {
                                    const e = $n(t.hm.H.stackobj, ls(Wn.x * t.Wh()), ls(Wn.x * t.Hh()));
                                    sn.play("death_flair", {
                                        x: e.x,
                                        y: e.y,
                                        w: t.W() * t.hm.S(),
                                        h: t.H() * t.hm.S()
                                    })
                                }
                                s.killer.type = "sizzle", (s.setoptions.onfail || (() => {}))(t.siom.Export()), setTimeout(() => {
                                    t.pm.H.siren = !1, t.hm.H.pullingholder = !1;
                                    const e = Math.sign(Math.random() - .5);
                                    Gn.animate(t.hm.H.holder, {
                                        0: {
                                            y: "inherit",
                                            rotation: 0
                                        },
                                        1: {
                                            y: ls(800) + window.innerHeight,
                                            rotation: .3 * e
                                        }
                                    }, 1, BezierEasing(.37, .06, .75, .56))
                                }, 250), setTimeout(() => {
                                    a()
                                }, 1250);
                                break;
                            case "garbagesmash": {
                                if (!s.setoptions.physical && s.setoptions.hasgarbage && t.iom.source && "socket" === t.iom.source.type() && t.atm.TakeAllDamage(!0), t.sxm.PlayIngame("topout"), t.gpm.Vibrate(ee.GARBAGESMASH), t.sxm.PlayIngame("garbagesmash"), t.hm.H.holderstate.ds += 100 * t.lm.H.lastdT, "full" === t.hm.H.displaymode && (sn.play("bgsplashdanger", {
                                        direction: 0,
                                        amt: 50
                                    }), sn.play("bgcircle", {
                                        color: 16720384,
                                        amt: 300,
                                        speed: 300
                                    })), !1 !== te.video.siren && "full" === t.hm.H.displaymode) {
                                    const e = $n(t.hm.H.stackobj, ls(Wn.x * t.Wh()), ls(Wn.x * t.Hh()));
                                    sn.play("death_flair", {
                                        x: e.x,
                                        y: e.y,
                                        w: t.W() * t.hm.S(),
                                        h: t.H() * t.hm.S()
                                    })
                                }
                                s.killer.type = "spark";
                                let e = t.T() - t.bm.HighestLine();
                                s.impendingdamage.forEach(t => {
                                    e += t.lines
                                }), e >= t.T() && (s.killer.type = "spike"), (s.setoptions.onfail || (() => {}))(t.siom.Export()), setTimeout(() => {
                                    t.pm.H.siren = !1, t.hm.H.pullingholder = !1;
                                    const e = Math.sign(Math.random() - .5);
                                    Gn.animate(t.hm.H.holder, {
                                        0: {
                                            y: "inherit",
                                            rotation: 0
                                        },
                                        1: {
                                            y: ls(800) + window.innerHeight,
                                            rotation: .3 * e
                                        }
                                    }, 1, BezierEasing(.37, .06, .75, .56))
                                }, 250), setTimeout(() => {
                                    a()
                                }, 1250);
                                break
                            }
                            case "clear": {
                                t.sxm.PlayIngame("finish"), t.pm.H.siren = !1, t.hm.H.pullingholder = !1, s.stats.time.locked = !0, t.gpm.Vibrate(ee.CLEAR), Gn.animate(t.hm.H.holder, {
                                    0: {
                                        "scale.x": "inherit",
                                        "scale.y": "inherit",
                                        alpha: 1
                                    },
                                    1: {
                                        "scale.x": 5,
                                        "scale.y": 5,
                                        alpha: 0
                                    }
                                }, 5, BezierEasing(.1, .16, .94, .06)), "full" === t.hm.H.displaymode && (sn.play("bgcircle", {
                                    amt: 300,
                                    speed: 300
                                }), t.ssm.GlobalShout("finish", "FINISH"));
                                const e = 1e3 * (t.iom.source.getFrame() + s.subframe) / 60;
                                (s.setoptions.onfinish || (() => {}))(t.siom.Export({
                                    seed: s.setoptions.seed,
                                    finalTime: e
                                })), t.dsm.FinalizeTimer(e), setTimeout(() => {
                                    a()
                                }, 1e4);
                                break
                            }
                            case "topout_clear":
                                t.gpm.Vibrate(ee.TOPOUT), t.sxm.PlayIngame("gameover"), t.hm.H.holderstate.ds += 100 * t.lm.H.lastdT, "full" === t.hm.H.displaymode && (sn.play("bgsplashdanger", {
                                    direction: 0,
                                    amt: 50
                                }), sn.play("bgcircle", {
                                    color: 16720384,
                                    amt: 300,
                                    speed: 300
                                }), t.ssm.GlobalShout("gameover", "GAME OVER")), setTimeout(() => {
                                    t.pm.H.siren = !1, t.hm.H.pullingholder = !1, s.stats.time.locked = !0, Gn.animate(t.hm.H.holder, {
                                        0: {
                                            "scale.x": "inherit",
                                            "scale.y": "inherit",
                                            alpha: 1
                                        },
                                        1: {
                                            "scale.x": .5,
                                            "scale.y": .5,
                                            alpha: 0
                                        }
                                    }, 5, BezierEasing(.1, .16, .94, .06));
                                    const e = 1e3 * (t.iom.source.getFrame() + s.subframe) / 60;
                                    (s.setoptions.onfinish || (() => {}))(t.siom.Export({
                                        seed: s.setoptions.seed,
                                        finalTime: e
                                    })), t.dsm.FinalizeTimer(e)
                                }, 250), setTimeout(() => {
                                    a()
                                }, 1e4);
                                break;
                            case "winner":
                                t.sxm.PlayIngame("finish"), t.pm.H.siren = !1, t.hm.H.pullingholder = !1, s.stats.time.locked = !0, t.gpm.Vibrate(ee.CLEAR), Gn.animate(t.hm.H.holder, {
                                    0: {
                                        "scale.x": "inherit",
                                        "scale.y": "inherit",
                                        alpha: 1
                                    },
                                    1: {
                                        "scale.x": 2,
                                        "scale.y": 2,
                                        alpha: 0
                                    }
                                }, 3, BezierEasing(.1, .16, .94, .06)), "full" === t.hm.H.displaymode && sn.play("bgcircle", {
                                    amt: 300,
                                    speed: 300
                                }), (s.setoptions.onfinish || (() => {}))(t.siom.Export()), setTimeout(() => {
                                    a()
                                }, 3500);
                                break;
                            case "forfeit":
                                t.pm.H.siren = !1, t.hm.H.pullingholder = !1, Gn.animate(t.hm.H.holder, {
                                    0: {
                                        "scale.x": "inherit",
                                        "scale.y": "inherit",
                                        alpha: 1
                                    },
                                    1: {
                                        "scale.x": 0,
                                        "scale.y": 0,
                                        alpha: .5
                                    }
                                }, 1, BezierEasing(.22, .09, .84, .23)), e("forfeit").classList.add("hidden"), (s.setoptions.onquit || (() => {}))(t.siom.Export()), setTimeout(() => {
                                    sn.play("bgcircle", {
                                        radius: 10
                                    }), t.sxm.PlayIngame("detonated")
                                }, 1e3), setTimeout(() => {
                                    a()
                                }, 5e3);
                                break;
                            case "retry":
                                t.pm.H.siren = !1, t.hm.H.pullingholder = !1, Gn.animate(t.hm.H.holder, {
                                    0: {
                                        "scale.x": "inherit"
                                    },
                                    1: {
                                        "scale.x": 0
                                    }
                                }, s.setoptions.stride ? .05 : .25, BezierEasing(.36, .01, .75, .3)), e("retry").classList.add("hidden"), setTimeout(() => {
                                    a()
                                }, s.setoptions.stride ? 50 : 1e3), setTimeout(() => {
                                    s.setoptions.fromretry || (s.setoptions.countdown_interval *= .75), s.setoptions.precountdown = 500, s.setoptions.prestart = 0, s.setoptions.mission = "", s.setoptions.zoominto = "fast", s.setoptions.fromretry = !0, s.setoptions.physical = !0, s.setoptions.bgmnoreset && s.started && (s.setoptions.onstart = () => {}), (De = new ti).bindEventSource(new _o({
                                        type: "keyboard"
                                    })), De.setGame(s.setoptions), De.createGameHolder(t.hm.H.displaymode), De.startGame()
                                }, s.setoptions.stride ? 50 : 250), Ft.reportAbortedGame();
                                break;
                            case "drop":
                                t.pm.H.siren = !1, t.hm.H.pullingholder = !1, (s.setoptions.onquit || (() => {}))(t.siom.Export()), Gn.animate(t.hm.H.holder, {
                                    0: {
                                        "scale.x": "inherit",
                                        "scale.y": "inherit",
                                        alpha: 1
                                    },
                                    1: {
                                        "scale.x": 0,
                                        "scale.y": 0,
                                        alpha: .5
                                    }
                                }, .5, BezierEasing(.36, .01, .75, .3)), setTimeout(() => {
                                    sn.play("bgcircle", {
                                        radius: 10
                                    }), t.sxm.PlayIngame("detonated")
                                }, 500), setTimeout(() => {
                                    a()
                                }, 550);
                                break;
                            case "dropnow":
                                return t.pm.H.siren = !1, t.hm.H.pullingholder = !1, Gn.animate(t.hm.H.holder, {
                                    0: {
                                        "scale.x": "inherit",
                                        "scale.y": "inherit",
                                        alpha: 1
                                    },
                                    1: {
                                        "scale.x": 0,
                                        "scale.y": 0,
                                        alpha: .5
                                    }
                                }, .5, BezierEasing(.36, .01, .75, .3)), setTimeout(() => {
                                    sn.play("bgcircle", {
                                        radius: 10
                                    }), t.sxm.PlayIngame("detonated")
                                }, 500), void setTimeout(() => {
                                    a()
                                }, 550);
                            case "disconnect":
                                t.pm.H.siren = !1, t.hm.H.pullingholder = !1, (s.setoptions.onfail || (() => {}))(t.siom.Export()), Gn.animate(t.hm.H.holder, {
                                    0: {
                                        "scale.x": "inherit",
                                        "scale.y": "inherit",
                                        alpha: "inherit"
                                    },
                                    1: {
                                        "scale.x": 2,
                                        "scale.y": 0,
                                        alpha: 0
                                    }
                                }, .25, BezierEasing(.09, .73, .23, .9)), setTimeout(() => {
                                    a()
                                }, 300)
                        }(s.setoptions.onend || (() => {}))(t.siom.Export()), (s.setoptions.onstop || (() => {}))(t.siom.Export())
                    }
                },
                Destroy: a
            }
        },
        Ho = function(e) {
            "use strict";
            const t = e.gsm,
                s = {
                    holder: null,
                    displaymode: "full",
                    board: null,
                    leftside: null,
                    rightside: null,
                    stackobj: null,
                    stackmud: [],
                    stackdirty: !0,
                    fallingobj: null,
                    fallingdirty: !0,
                    nextobj: null,
                    nextdirty: !0,
                    holdobj: null,
                    holddirty: !0,
                    tintables: [],
                    fgtintables: [],
                    hybridtintables: [],
                    pullingholder: !0,
                    holderneedsrepull: !1,
                    holderstate: {
                        x: 0,
                        y: 0,
                        r: 0,
                        s: 0,
                        w: 0,
                        dx: 0,
                        dy: 0,
                        dr: 0,
                        ds: 0,
                        dw: 0,
                        ox: 0,
                        oy: 0,
                        os: 1,
                        cox: 0,
                        coy: 0,
                        cos: 1,
                        tr: 255,
                        tg: 255,
                        tb: 255,
                        ctr: 255,
                        ctg: 255,
                        ctb: 255,
                        fgtr: 0,
                        fgtg: 0,
                        fgtb: 0,
                        fgctr: 0,
                        fgctg: 0,
                        fgctb: 0,
                        asf: 1
                    }
                },
                a = s.holderstate;
            let n = null,
                o = null,
                i = null,
                r = null;

            function l(e, t, a, l, c) {
                s.holder && !s.holder._destroyed && (a = a / 360 * 2 * Math.PI, (e !== n || c) && (n = e, s.holder.x = ls(800) + e), (t !== o || c) && (o = t, s.holder.y = ls(400) + t), (a !== i || c) && (i = a, s.holder.rotation = a), (l !== r || c) && (r = l, s.holder.scale.set(l)))
            }

            function c(e, t, s) {
                return e << 16 | t << 8 | s
            }

            function d(n = !1, o = 1) {
                if (e.c.IsServer()) return;
                if (e.lm.H.lastdTs.push(o), e.lm.H.lastdTs.length > 10 && e.lm.H.lastdTs.shift(), e.lm.H.lastdT = e.lm.H.lastdTs.reduce((e, t) => e + t) / e.lm.H.lastdTs.length, s.holderneedsrepull = !1, !s.pullingholder) return;
                if ("minimal" === te.video.graphics) {
                    a.cox = a.ox, a.coy = a.oy, a.cos = a.os;
                    const e = 800 * a.cox,
                        t = 400 * a.coy,
                        s = a.cos * a.asf;
                    return void l(ls(e), ls(t), 0, s, n)
                }
                if ("tiny" === s.displaymode) {
                    a.cox = a.ox + (a.cox - a.ox) * Math.pow(.9, o), a.coy = a.oy + (a.coy - a.oy) * Math.pow(.9, o), a.cos = a.os + (a.cos - a.os) * Math.pow(.9, o), Math.abs(a.cox - a.ox) < ("minimal" !== te.video.graphics ? .001 : 1) && (a.cox = a.ox), Math.abs(a.coy - a.oy) < ("minimal" !== te.video.graphics ? .001 : 1) && (a.coy = a.oy), Math.abs(a.cos - a.os) < .01 && (a.cos = a.os);
                    const e = 800 * a.cox,
                        i = 400 * a.coy,
                        r = a.cos * a.asf;
                    if (l(ls(e), ls(i), 0, r, n), "high" !== te.video.caching) {
                        const e = c(Math.round(a.ctr), Math.round(a.ctg), Math.round(a.ctb)),
                            n = c(Math.round(a.fgctr), Math.round(a.fgctg), Math.round(a.fgctb));
                        s.tintables.forEach(t => {
                            t.destroyed || t.tint != e && (t.tint = e)
                        }), s.fgtintables.forEach(e => {
                            e.destroyed || e.tint != n && (e.tint = n)
                        });
                        const o = t.setoptions.display_fire && t.fire >= 500 ? n : e;
                        s.hybridtintables.forEach(e => {
                            e.destroyed || (e.tint = o)
                        })
                    }
                    return a.dx = 0, a.dy = 0, a.dr = 0, a.ds = 0, a.dw = 0, a.ctr = a.tr, a.ctg = a.tg, a.ctb = a.tb, a.fgctr = a.fgtr, a.fgctg = a.fgtg, void(a.fgctb = a.fgtb)
                }
                let i = Math.pow(.55 + .2 * te.video.bounciness, o),
                    r = Math.pow(.82 + .08 * te.video.bounciness, o),
                    d = Math.pow(.55 + .2 * te.video.shakiness, o),
                    p = Math.pow(.35 + .5 * te.video.shakiness, o);
                a.x *= i, a.y *= i, a.r *= r, a.s *= d, a.w *= p, a.x += a.dx, a.y += a.dy, a.r += a.dr, a.s += a.ds, a.w += a.dw, a.dx *= i, a.dy *= i, a.dr *= r, a.ds *= d, a.dw *= p;
                let u = Math.random() * a.s - a.s / 2 + Math.sin((e.iom.source ? e.iom.source.getFrame() : 0) / 1.5 * Math.max(1, (a.w + 120) / 150)) * Math.min(30, a.w),
                    m = Math.random() * a.s - a.s / 2;
                0 != te.video.bounciness && 0 !== e.lm.H.soundSkipRate || (a.x = 0, a.y = 0, a.r = 0, a.s = 0), 0 != te.video.shakiness && 0 !== e.lm.H.soundSkipRate || (u = 0, m = 0), !1 !== te.video.spin && 0 !== e.lm.H.soundSkipRate || (a.r = 0), a.cox = a.ox + (a.cox - a.ox) * Math.pow(.9, o), a.coy = a.oy + (a.coy - a.oy) * Math.pow(.9, o), a.cos = a.os + (a.cos - a.os) * Math.pow(.9, o);
                const g = 800 * a.cox,
                    h = 400 * a.coy,
                    f = a.cos * a.asf;
                if (l(ls(g) + Math.round(ls(a.x + u) * a.cos), ls(h) + Math.round(ls(a.y + m) * a.cos), a.r, f, n), a.ctr = a.tr + (a.ctr - a.tr) * Math.pow(.9, o), a.ctg = a.tg + (a.ctg - a.tg) * Math.pow(.9, o), a.ctb = a.tb + (a.ctb - a.tb) * Math.pow(.9, o), a.fgctr = a.fgtr + (a.fgctr - a.fgtr) * Math.pow(.9, o), a.fgctg = a.fgtg + (a.fgctg - a.fgtg) * Math.pow(.9, o), a.fgctb = a.fgtb + (a.fgctb - a.fgtb) * Math.pow(.9, o), "high" !== te.video.caching) {
                    const e = c(Math.round(a.ctr), Math.round(a.ctg), Math.round(a.ctb)),
                        n = c(Math.round(a.fgctr), Math.round(a.fgctg), Math.round(a.fgctb));
                    s.tintables.forEach(t => {
                        t.destroyed || (t.tint = e)
                    }), s.fgtintables.forEach(e => {
                        e.destroyed || (e.tint = n)
                    });
                    const o = t.setoptions.display_fire && t.fire >= 500 ? n : e;
                    s.hybridtintables.forEach(e => {
                        e.destroyed || (e.tint = o)
                    })
                }
            }
            let p = null;

            function u(n, o = !1) {
                if (e.c.IsServer()) return;
                if (!t.playing) return;
                if (0 === Object.keys(t.setoptions).length) return;
                n && (s.displaymode = n), e.iom.scoped = t.setoptions.noscope || "tiny" !== s.displaymode && !o, "socket" === e.iom.source.type() && qs && ("tiny" !== s.displaymode || t.setoptions.noscope ? t.setoptions.noscope || (null !== p && clearTimeout(p), p = setTimeout(() => {
                    t.destroyed || "tiny" === s.displaymode || qs.startScope(t.setoptions.username), p = null
                }, 200)) : (qs.endScope(t.setoptions.username), null !== p && (clearTimeout(p), p = null)));
                let i = !1;
                s.holder && (i = s.holder.visible, s.holder.destroy(), s.holder = null, s.leftside = null, s.rightside = null, e.pm.H.alerting = !1), e.otm.EndOverText(), s.tintables = [], s.fgtintables = [], s.stackdirty = !0, s.fallingdirty = !0, s.nextdirty = !0, s.holddirty = !0, a.asf = 1, e.W() / Math.max(1, e.H()) >= 1.5 ? a.asf = 25 / e.W() : e.H() < 15 ? a.asf = 20 / e.H() : e.H() > 30 && (a.asf = 30 / e.H()), s.board = new(go[t.setoptions.boardskin] || go.generic).ns.Board(s, t, e), s.holder = new PIXI.Container, s.holder.position.set(ls(800), ls(400)), s.holder.pivot.set(ls(Wn.x * e.Wh()), ls(Wn.x * e.Hh())), s.holder.visible = i, ("full" === s.displaymode ? Ln : En).addChild(s.holder), s.leftside = new PIXI.Container, s.holder.addChild(s.leftside), s.rightside = new PIXI.Container, s.holder.addChild(s.rightside), s.board.el("boardsides").create(), "tiny" === s.displaymode && (s.holder.interactive = !0, s.holder.interactiveChildren = !1, s.holder.on("click", () => {
                    !1 !== t.setoptions.manual_allowed && Us && qs && qs.find(t.setoptions.username) && Us.setManual(qs.find(t.setoptions.username).context.listenID), qs && (qs.setSpectating(t.setoptions.username), qs.order())
                }), s.holder.on("mouseover", e.otm.CreateOverText), s.holder.on("mousemove", e.otm.MoveOverText), s.holder.on("mouseout", e.otm.EndOverText));
                const r = s.board.el("background").create();
                r.interactive = !0, r.on("click", () => {
                    !1 !== t.setoptions.manual_allowed && Us && qs && qs.find(t.setoptions.username) && Us.setManual(qs.find(t.setoptions.username).context.listenID), qs && (qs.setSpectating(t.setoptions.username), qs.order())
                }), "full" !== s.displaymode && (r.on("mouseover", e.otm.CreateOverText), r.on("mousemove", e.otm.MoveOverText), r.on("mouseout", e.otm.EndOverText)), s.board.el("grid").create(), s.board.el("username").create(), s.stackobj = s.board.el("stack").create(), s.board.el("stock").create(), s.nextobj = s.board.el("next").create(), s.holdobj = s.board.el("hold").create(), s.fallingobj = s.board.el("falling").create(), s.board.el("border").create(), s.board.el("replaytag").create(), s.board.el("backer").create(), s.board.el("zen").create(), s.board.el("counter1").create(), s.board.el("counter2").create(), s.board.el("counter3").create(), s.board.el("counter4").create(), s.board.el("counter5").create(), s.board.el("bar1").create(), s.board.el("bar2").create(), e.dsm.DisplayCounts(), d(!0), e.pbm.UpdateGarbageBar("impending"), "tiny" === s.displaymode && "low" !== te.video.caching && (s.holder.cacheAsBitmap = !0), "full" === s.displaymode && (Sn = !0)
            }

            function m() {
                e.c.IsServer() || (e.hm.H.holder && !e.hm.H.holder._destroyed && e.hm.H.holder.destroy(), t.setoptions.headless = !0, Bn.unregisterStartingWith(e.IID), e.lm.H.stopdraw = !0, e.lm.H.stopgame = !0, e.iom.source && "keyboard" === e.iom.source.type() && (hn.opacity(1), hn.scale(1)), e.otm.EndOverText())
            }
            let g = null;
            return {
                H: s,
                SetHolderTransformData: l,
                TripletToSingle: c,
                PullHolder: d,
                CreateHolder: u,
                Behead: m,
                Rehead: function(a = !1) {
                    e.c.IsServer() && (t.setoptions.headless = !1, u("tiny", !0), is(!1), e.lm.H.stopdraw = !1, e.lm.H.stopgame = !1, PIXI.Ticker.shared.add(e.lm.GameLoop), PIXI.Ticker.shared.add(e.lm.DrawLoop), e.dsm.DisplayCounts(), s.holder.visible = !0, a && Gn.animate(s.holder, {
                        0: {
                            alpha: 0
                        },
                        1: {
                            alpha: 1
                        }
                    }, 1, BezierEasing(0, 0, 1, 1)), g && (clearTimeout(g), g = null))
                },
                FadeOutAndBehead: function(e) {
                    Gn.animate(s.holder, {
                        0: {
                            "scale.x": "inherit",
                            "scale.y": "inherit",
                            alpha: 1
                        },
                        1: {
                            "scale.x": 0,
                            "scale.y": 0,
                            alpha: 0
                        }
                    }, e / 1e3, BezierEasing(0, 0, 1, 1)), g = setTimeout(() => {
                        g = null, m()
                    }, e)
                },
                S: () => s.holderstate.cos * s.holderstate.asf
            }
        },
        Ro = function(t) {
            "use strict";
            const s = t.gsm;

            function a(e) {
                const a = s.falling.r,
                    n = a + "" + e;
                let o = 0,
                    i = "none";
                if (e > a ? (o = 1, i = "right") : (o = -1, i = "left"), 0 === e && 3 === a && (o = 1, i = "right"), 3 === e && 0 === a && (o = -1, i = "left"), 2 === e && 0 === a && (i = "vertical"), 0 === e && 2 === a && (i = "vertical"), 3 === e && 1 === a && (i = "horizontal"), 1 === e && 3 === a && (i = "horizontal"), t.bm.IsLegalAtPos(s.falling.type, s.falling.x + (s.kickset.additional_offsets[s.falling.type][e][0] - s.falling.aox), s.falling.y + (s.kickset.additional_offsets[s.falling.type][e][1] - s.falling.aoy), e)) return s.falling.x += s.kickset.additional_offsets[s.falling.type][e][0] - s.falling.aox, s.falling.y += s.kickset.additional_offsets[s.falling.type][e][1] - s.falling.aoy, s.falling.aox = s.kickset.additional_offsets[s.falling.type][e][0], s.falling.aoy = s.kickset.additional_offsets[s.falling.type][e][1], s.falling.r = e, s.falling.last = "rotate", s.falling.lastrotation = i, s.falling.lastkick = 0, s.falling.spintype = t.rbm.IsTSpin(), s.fallingrotations++, s.totalrotations++, t.sxm.PlayIngame("rotate"), s.falling.clamped && s.handling.dcd > 0 && (s.ldas = Math.min(s.ldas, s.handling.das - s.handling.dcd), s.ldasiter = s.handling.arr, s.rdas = Math.min(s.rdas, s.handling.das - s.handling.dcd), s.rdasiter = s.handling.arr), (++s.falling.lockresets < 15 || s.setoptions.infinitemovement) && (s.falling.locking = 0), !t.c.IsServer() && t.rbm.IsTSpin() && (t.sxm.PlayIngame("spin"), t.gpm.Vibrate(ee.SPIN), "full" === t.hm.H.displaymode && t.fxm.EffectAtTetromino("piece_spin", {
                    direction: s.falling.lastrotation,
                    kickX: 0,
                    kickY: 0
                }, t.hm.H.fallingobj, s.falling.type, s.falling.x, s.falling.y, s.falling.r), t.hm.H.holderstate.dr += o / 4 * t.lm.H.lastdT), void(t.hm.H.fallingdirty = !0);
                if ("o" === s.falling.type && !s.kickset.allow_o_kick) return;
                let r = s.kickset.kicks[n];
                "i" === s.falling.type && (r = s.kickset.i_kicks[n]);
                for (let a = 0; a < r.length; a++) {
                    const n = r[a];
                    let i = Math.floor(s.falling.y) + .1 + n[1] + (s.kickset.additional_offsets[s.falling.type][e][1] - s.falling.aoy);
                    if (!s.setoptions.infinitemovement && s.totalrotations > (s.setoptions.lockresets || 15) + 15 && (i = s.falling.y + n[1] + (s.kickset.additional_offsets[s.falling.type][e][1] - s.falling.aoy)), t.bm.IsLegalAtPos(s.falling.type, s.falling.x + n[0] + (s.kickset.additional_offsets[s.falling.type][e][0] - s.falling.aox), i, e)) {
                        if (s.kickset.center_column && ["l", "j", "t"].includes(s.falling.type)) {
                            let e = !0;
                            for (let a = 0; a < s.kickset.center_column.length; a++)
                                if (t.bm.IsOccupied(s.falling.x - s.falling.aox + s.kickset.center_column[a][0], s.falling.y - s.falling.aoy + s.kickset.center_column[a][1])) {
                                    e = 0 !== s.kickset.center_column[a][0];
                                    break
                                } if (!e) continue
                        }
                        return s.falling.x += n[0] + (s.kickset.additional_offsets[s.falling.type][e][0] - s.falling.aox), s.falling.y = i, s.falling.aox = s.kickset.additional_offsets[s.falling.type][e][0], s.falling.aoy = s.kickset.additional_offsets[s.falling.type][e][1], s.falling.r = e, s.falling.spintype = t.rbm.IsTSpin(), s.falling.last = "rotate", s.falling.lastkick = a + 1, s.fallingrotations++, s.totalrotations++, t.sxm.PlayIngame("rotate"), s.falling.clamped && s.handling.dcd > 0 && (s.ldas = Math.min(s.ldas, s.handling.das - s.handling.dcd), s.ldasiter = s.handling.arr, s.rdas = Math.min(s.rdas, s.handling.das - s.handling.dcd), s.rdasiter = s.handling.arr), (++s.falling.lockresets < 15 || s.setoptions.infinitemovement) && (s.falling.locking = 0), !t.c.IsServer() && t.rbm.IsTSpin() && (t.sxm.PlayIngame("spin"), t.gpm.Vibrate(ee.SPIN), "full" === t.hm.H.displaymode && t.fxm.EffectAtTetromino("piece_spin", {
                            direction: s.falling.lastrotation,
                            kickX: n[0],
                            kickY: n[1]
                        }, t.hm.H.fallingobj, s.falling.type, s.falling.x, s.falling.y, s.falling.r), t.hm.H.holderstate.dr += o / 4 * t.lm.H.lastdT), void(t.hm.H.fallingdirty = !0)
                    }
                }
            }

            function n(e, a = 1) {
                if (!s.lshift || s.rshift && -1 !== s.lastshift) return;
                let n = a;
                const o = Math.max(0, s.handling.das - s.ldas);
                if (s.ldas += e ? 0 : a, s.ldas < s.handling.das && !e) return;
                if (n = Math.max(0, n - o), s.falling.sleep || s.falling.deep_sleep) return;
                let i = 1;
                if (!e) {
                    if (s.ldasiter += s.setoptions.version >= 15 ? n : a, s.ldasiter < s.handling.arr) return;
                    i = 0 == s.handling.arr ? 10 : Math.floor(s.ldasiter / s.handling.arr), s.ldasiter -= s.handling.arr * i
                }
                for (let e = 0; e < i; e++) t.bm.IsLegalAtPos(s.falling.type, s.falling.x - 1, s.falling.y, s.falling.r) ? (s.falling.x--, s.falling.last = "move", s.falling.clamped = !1, 0 === e && t.sxm.PlayIngame("move"), t.hm.H.fallingdirty = !0, (++s.falling.lockresets < 15 || s.setoptions.infinitemovement) && (s.falling.locking = 0), t.bm.IsLegalAtPos(s.falling.type, s.falling.x - 1, s.falling.y, s.falling.r) || t.sxm.PlayIngame("sidehit")) : (s.falling.clamped = !0, t.c.OnClient(() => {
                    e < Math.max(1, 10 * te.video.bounciness - 10) && (t.hm.H.holderstate.dx -= .5 * t.lm.H.lastdT)
                }))
            }

            function o(e, a = 1) {
                if (!s.rshift || s.lshift && 1 !== s.lastshift) return;
                let n = a;
                const o = Math.max(0, s.handling.das - s.rdas);
                if (s.rdas += e ? 0 : a, s.rdas < s.handling.das && !e) return;
                if (n = Math.max(0, n - o), s.falling.sleep || s.falling.deep_sleep) return;
                let i = 1;
                if (!e) {
                    if (s.rdasiter += s.setoptions.version >= 15 ? n : a, s.rdasiter < s.handling.arr) return;
                    i = 0 == s.handling.arr ? 10 : Math.floor(s.rdasiter / s.handling.arr), s.rdasiter -= s.handling.arr * i
                }
                for (let e = 0; e < i; e++) t.bm.IsLegalAtPos(s.falling.type, s.falling.x + 1, s.falling.y, s.falling.r) ? (s.falling.x++, s.falling.last = "move", s.falling.clamped = !1, 0 === e && t.sxm.PlayIngame("move"), t.hm.H.fallingdirty = !0, (++s.falling.lockresets < 15 || s.setoptions.infinitemovement) && (s.falling.locking = 0), t.bm.IsLegalAtPos(s.falling.type, s.falling.x + 1, s.falling.y, s.falling.r) || t.sxm.PlayIngame("sidehit")) : (s.falling.clamped = !0, t.c.OnClient(() => {
                    e < Math.max(1, 10 * te.video.bounciness - 10) && (t.hm.H.holderstate.dx += .5 * t.lm.H.lastdT)
                }))
            }

            function i(e, t = 1) {
                n(e, t), o(e, t)
            }
            let r = !0,
                l = !0;
            return {
                KeyDown: function(e) {
                    if ("keydown" === e.type && !e.data.key.startsWith("menu")) {
                        if (e.data.subframe > s.subframe && (i(!1, e.data.subframe - s.subframe), t.fm.FallEvent(void 0, e.data.subframe - s.subframe), s.subframe = e.data.subframe), s.setoptions.noreplay || t.iom.replay.pushEvent("keydown", e.data), "moveLeft" === e.data.key) return s.stats.inputs++, s.falling.keys++, s.lshift = !0, s.lastshift = -1, s.ldas = e.data.hoisted ? s.handling.das - s.handling.dcd : 0, s.setoptions.version >= 12 && (s.ldasiter = s.handling.arr), void n(!0, s.setoptions.version >= 15 ? 0 : 1);
                        if ("moveRight" === e.data.key) return s.stats.inputs++, s.falling.keys++, s.rshift = !0, s.lastshift = 1, s.rdas = e.data.hoisted ? s.handling.das - s.handling.dcd : 0, s.setoptions.version >= 12 && (s.rdasiter = s.handling.arr), void o(!0, s.setoptions.version >= 15 ? 0 : 1);
                        if ("softDrop" === e.data.key) return s.stats.inputs++, s.falling.keys = -999, void(s.softdrop = !0);
                        if ("exit" === e.data.key) return s.esc = !0, void(s.esciter = 0);
                        if ("retry" === e.data.key) {
                            if (t.c.IsServer()) return;
                            return s.retry = !0, void(s.retryiter = 0)
                        }
                        if (!s.falling.deep_sleep)
                            if (s.falling.sleep) {
                                if ("rotateCCW" === e.data.key) {
                                    s.stats.inputs++;
                                    let e = s.falling.irs - 1;
                                    e < 0 && (e = 3), s.falling.irs = e
                                }
                                if ("rotateCW" === e.data.key) {
                                    s.stats.inputs++;
                                    let e = s.falling.irs + 1;
                                    e > 3 && (e = 0), s.falling.irs = e
                                }
                                if ("rotate180" === e.data.key && s.setoptions.allow180) {
                                    s.stats.inputs++;
                                    let e = s.falling.irs + 2;
                                    e > 3 && (e -= 4), s.falling.irs = e
                                }
                                "hold" === e.data.key && (s.stats.inputs++, s.falling.ihs = !0)
                            } else {
                                if ("rotateCCW" === e.data.key) {
                                    s.stats.inputs++, s.falling.keys++;
                                    let e = s.falling.r - 1;
                                    e < 0 && (e = 3), a(e)
                                }
                                if ("rotateCW" === e.data.key) {
                                    s.stats.inputs++, s.falling.keys++;
                                    let e = s.falling.r + 1;
                                    e > 3 && (e = 0), a(e)
                                }
                                if ("rotate180" === e.data.key && s.setoptions.allow180) {
                                    s.stats.inputs++, s.falling.keys += 2;
                                    let e = s.falling.r + 2;
                                    e > 3 && (e -= 4), a(e)
                                }
                                "hardDrop" === e.data.key && !1 !== s.setoptions.allow_harddrop && 0 === s.falling.safelock && (s.stats.inputs++, t.fm.FallEvent(Number.MAX_SAFE_INTEGER, 1)), "hold" === e.data.key && (s.stats.inputs++, s.holdlocked || void 0 !== s.setoptions.display_hold && !s.setoptions.display_hold || t.fm.SwapHold())
                            }
                    }
                },
                KeyUp: function(e) {
                    if ("keyup" === e.type && !e.data.key.startsWith("menu")) {
                        if (e.data.subframe > s.subframe && (i(!1, e.data.subframe - s.subframe), t.fm.FallEvent(void 0, e.data.subframe - s.subframe), s.subframe = e.data.subframe), s.setoptions.noreplay || t.iom.replay.pushEvent("keyup", e.data), "moveLeft" === e.data.key) return s.lshift = !1, s.ldas = 0, void(s.handling.cancel && (s.rdas = 0, s.rdasiter = s.handling.arr));
                        if ("moveRight" === e.data.key) return s.rshift = !1, s.rdas = 0, void(s.handling.cancel && (s.ldas = 0, s.ldasiter = s.handling.arr));
                        if ("softDrop" !== e.data.key) {
                            if ("exit" === e.data.key) return s.esc = !1, void(s.esciter = 0);
                            if ("retry" === e.data.key) {
                                if (t.c.IsServer()) return;
                                return s.retry = !1, void(s.retryiter = 0)
                            }
                        } else s.softdrop = !1
                    }
                },
                RotatePiece: a,
                ProcessLShift: n,
                ProcessRShift: o,
                ProcessShift: i,
                ProcessInterrupts: function() {
                    if (s.esc && s.escAllowed) {
                        const a = s.esciter++;
                        let n = s.setoptions.forfeit_time || 60;
                        s.setoptions.stride && (n /= 3), t.c.OnClient(() => {
                            e("forfeit").style.height = `${1.5 + a / 20}em`, e("forfeit").style.lineHeight = `${1.7 + a / 20}em`, e("forfeit").style.boxShadow = `0px 0px ${8 + a / 3}px #F00`, e("forfeit").style.filter = `brightness(${1 + Math.max(0, (a - n + 5) / 5)})`, e("forfeit").classList.remove("hidden")
                        }), r = !1, a > n ? (t.gom.GameOver("forfeit", !0), t.c.OnClient(() => {
                            vs.play("detonate2")
                        })) : a % 20 == 0 && t.c.OnClient(() => {
                            vs.play("detonate1")
                        })
                    } else r || (t.c.OnClient(() => {
                        e("forfeit").classList.add("hidden")
                    }), r = !0);
                    if (!t.c.IsServer())
                        if (s.retry && s.retryAllowed && s.setoptions.can_retry) {
                            if (s.setoptions.stride) return t.gom.GameOver("retry", !0), void vs.play("detonate2");
                            const a = s.retryiter++;
                            e("retry").style.height = `${1.5 + a / 20}em`, e("retry").style.lineHeight = `${1.7 + a / 20}em`, e("retry").style.boxShadow = `0px 0px ${8 + a / 3}px #FA0`, e("retry").style.filter = `brightness(${1 + Math.max(0, (a - 15 + 5) / 5)})`, e("retry").classList.remove("hidden"), l = !1, a > 15 ? (s.setoptions.retryisclear ? (t.bm.DestroyBoard(), s.hold = null, s.bag = [], s.stats.lines = 0, s.stats.inputs = 0, s.stats.time.frameoffset = t.iom.source.getFrame(), s.stats.piecesplaced = 0, s.stats.garbage.sent = 0, s.stats.garbage.attack = 0, s.stats.garbage.cleared = 0, s.stats.combo = 0, s.stats.currentcombopower = 0, s.stats.btb = 0, s.stats.finesse.combo = 0, s.stats.finesse.faults = 0, s.stats.finesse.perfectpieces = 0, s.setoptions.b2bchaining && t.hm.H.board.el("b2b").delete(), t.bam.PopulateBag(), t.fm.Next(), t.c.OnClient(() => {
                                t.gpm.Vibrate(ee.CLEAR), t.hm.H.holderstate.ds += 50 * t.lm.H.lastdT, t.sxm.PlayIngame("shatter")
                            }), s.retry = !1, s.retryiter = 0) : t.gom.GameOver("retry", !0), vs.play("detonate2")) : a % 5 == 0 && vs.play("detonate1")
                        } else l || (e("retry").classList.add("hidden"), l = !0)
                }
            }
        },
        $o = function(e) {
            "use strict";
            return {
                replay: new fo,
                source: null,
                scoped: !0
            }
        },
        Oo = function(e) {
            "use strict";
            const t = e.gsm;

            function s(s, a = !1, n = 1) {
                if (a) t.stats.level = n, t.g = Math.min(Number.MAX_SAFE_INTEGER - 1, 1 / 60 / Math.pow(Math.max(1e-9, (t.setoptions.gbase || .8) - (t.stats.level - 1) * (t.setoptions.gspeed || .007)), t.stats.level - 1)), t.stats.level_lines = 0, t.stats.level_lines_needed = t.setoptions.levelstatic ? t.setoptions.levelstaticspeed || 10 : Math.ceil(t.stats.level * (t.setoptions.levelspeed || 1) * 5), t.setoptions.masterlevels && t.stats.level > 20 && (t.setoptions.locktime = 30 - Math.min(25, t.stats.level - 20)), t.setoptions.masterlevels && t.stats.level > 45 && (t.setoptions.lockresets = 15 - Math.min(10, t.stats.level - 45));
                else if (t.stats.level_lines += s, t.stats.level_lines >= t.stats.level_lines_needed) {
                    for (; t.stats.level_lines >= t.stats.level_lines_needed;) t.stats.level_lines -= t.stats.level_lines_needed, t.stats.level++, t.g = Math.min(Number.MAX_SAFE_INTEGER - 1, 1 / 60 / Math.pow(Math.max(1e-9, (t.setoptions.gbase || .8) - (t.stats.level - 1) * (t.setoptions.gspeed || .007)), t.stats.level - 1)), t.stats.level_lines_needed = t.setoptions.levelstatic ? t.setoptions.levelstaticspeed || 10 : Math.ceil(t.stats.level * (t.setoptions.levelspeed || 1) * 5), t.setoptions.masterlevels && t.stats.level > 20 && (t.setoptions.locktime = 30 - Math.min(25, t.stats.level - 20)), t.setoptions.masterlevels && t.stats.level > 45 && (t.setoptions.lockresets = 15 - Math.min(10, t.stats.level - 45));
                    e.c.OnClient(() => {
                        e.sxm.PlayIngame("levelup");
                        let s = t.stats.level;
                        t.setoptions.masterlevels && t.stats.level > 20 && (s = `M${t.stats.level - 20}`), "minimal" !== te.video.graphics && "off" !== te.video.actiontext && "some" !== te.video.actiontext && e.hm.H.board.fx("levelup").create(s), "full" === e.hm.H.displaymode && 0 !== e.lm.H.soundSkipRate && sn.play("bgcircle"), t.setoptions.levels && !t.setoptions.absolute_lines && e.pbm.BlastBar("progress")
                    })
                }
            }

            function a(e) {
                for (let s = 0; s < e.length; s++) t.board[e[s]].some(e => "gb" === e || "gbd" === e) && t.stats.garbage.cleared++
            }

            function n(a, n) {
                let o = !1;
                t.stats.lines += a, t.setoptions.levels && s(a), a ? (t.stats.combo++, t.stats.topcombo = Math.max(t.stats.combo, t.stats.topcombo), !e.c.IsServer() && t.stats.combo > 1 && e.hm.H.board.fx("combo").create(`${t.stats.combo - 1} \fc3COMBO`), 4 === a ? (o = !0, e.c.OnClient(() => {
                    t.stats.btb ? (e.gpm.Vibrate(ee.CLEARB2B), e.sxm.PlayIngame("clearbtb", 1, !0)) : (e.gpm.Vibrate(ee.CLEARQUAD), e.sxm.PlayIngame("clearquad", 1, !0))
                })) : n ? (o = !0, e.c.OnClient(() => {
                    e.gpm.Vibrate(ee.CLEARSPIN), e.sxm.PlayIngame("clearspin", 1, !0)
                })) : e.c.OnClient(() => {
                    e.gpm.Vibrate(ee.CLEARLINE), e.sxm.PlayIngame("clearline", 1, !0)
                }), e.hm.H.holderstate.dy += 8 * a * e.lm.H.lastdT, !e.c.IsServer() && a >= 1 && e.hm.H.board.fx("clear").create(io.cleartypes[a] || io.cleartypes[21]), o ? (t.stats.btb++, t.stats.topbtb = Math.max(t.stats.btb, t.stats.topbtb), e.c.OnClient(() => {
                    "full" === e.hm.H.displaymode && 0 !== e.lm.H.soundSkipRate && sn.play("bgcircle"), t.stats.btb > 1 && (t.setoptions.b2bchaining || e.hm.H.board.fx("also").create(`${io.extra.btb}${t.stats.btb > 2 ? ` \fc3X\f5${t.stats.btb - 1}` : ""}`))
                })) : (!e.c.IsServer() && t.setoptions.b2bchaining && e.hm.H.board.el("b2b").update(t.stats.btb > 2 ? "down_large" : "down", 0), t.stats.btb = 0, t.setoptions.b2bchaining && t.currentbtbchainpower >= 2 && e.sxm.PlayIngame("btb_break"))) : (t.stats.combo > 3 && e.sxm.PlayIngame("combobreak"), t.stats.combo = 0, t.stats.currentcombopower = 0), n && (e.c.OnClient(() => {
                    e.sxm.PlayIngame("spinend"), "full" === e.hm.H.displaymode && 0 !== e.lm.H.soundSkipRate && e.hm.H.board.fx("tspin").create(io.tspins[n].replace("%%PIECE%%", t.falling.type.toUpperCase()), {
                        color: eo.getColor(t.setoptions.minoskin[t.kickset.colorMap[t.falling.type]] || t.setoptions.minoskin.other, t.kickset.colorMap[t.falling.type])
                    })
                }), t.stats.tspins++);
                let i = 0,
                    r = 0;
                switch (a) {
                    case 0:
                        "mini" === n ? (i = ho.scoring.TSPIN_MINI, r = ho.garbage.TSPIN_MINI, t.stats.clears.minitspins++) : "normal" === n && (i = ho.scoring.TSPIN, r = ho.garbage.TSPIN, t.stats.clears.realtspins++);
                        break;
                    case 1:
                        "mini" === n ? (i = ho.scoring.TSPIN_MINI_SINGLE, r = ho.garbage.TSPIN_MINI_SINGLE, t.stats.clears.minitspinsingles++) : "normal" === n ? (i = ho.scoring.TSPIN_SINGLE, r = ho.garbage.TSPIN_SINGLE, t.stats.clears.tspinsingles++) : (i = ho.scoring.SINGLE, r = ho.garbage.SINGLE, t.stats.clears.singles++);
                        break;
                    case 2:
                        "mini" === n ? (i = ho.scoring.TSPIN_MINI_DOUBLE, r = ho.garbage.TSPIN_MINI_DOUBLE, t.stats.clears.minitspindoubles++) : "normal" === n ? (i = ho.scoring.TSPIN_DOUBLE, r = ho.garbage.TSPIN_DOUBLE, t.stats.clears.tspindoubles++) : (i = ho.scoring.DOUBLE, r = ho.garbage.DOUBLE, t.stats.clears.doubles++);
                        break;
                    case 3:
                        n ? (i = ho.scoring.TSPIN_TRIPLE, r = ho.garbage.TSPIN_TRIPLE, t.stats.clears.tspintriples++) : (i = ho.scoring.TRIPLE, r = ho.garbage.TRIPLE, t.stats.clears.triples++);
                        break;
                    case 4:
                        n ? (i = ho.scoring.TSPIN_QUAD, r = ho.garbage.TSPIN_QUAD, t.stats.clears.tspinquads++) : (i = ho.scoring.QUAD, r = ho.garbage.QUAD, t.stats.clears.quads++)
                }
                if (a && t.stats.btb > 1)
                    if (i *= ho.scoring.BACKTOBACK_MULTIPLIER, t.setoptions.b2bchaining) {
                        const s = ho.garbage.BACKTOBACK_BONUS * (Math.floor(1 + Math.log1p((t.stats.btb - 1) * ho.garbage.BACKTOBACK_BONUS_LOG)) + (t.stats.btb - 1 == 1 ? 0 : (1 + Math.log1p((t.stats.btb - 1) * ho.garbage.BACKTOBACK_BONUS_LOG) % 1) / 3));
                        if (r += s, Math.floor(s) >= 2 && e.fim.AddFire(20 * Math.floor(s - 1) - 10), e.c.OnClient(() => {
                                Math.floor(s) > t.currentbtbchainpower && Math.floor(s) >= 2 ? e.hm.H.board.el("b2b").update("up_large", t.stats.btb - 1) : e.hm.H.board.el("b2b").update("up", t.stats.btb - 1)
                            }), Math.floor(s) > t.currentbtbchainpower && (t.currentbtbchainpower = Math.floor(s), e.c.OnClient(() => {
                                2 === t.currentbtbchainpower ? e.sxm.PlayIngame("btb_1", 1) : 3 === t.currentbtbchainpower ? e.sxm.PlayIngame("btb_2", 1.25) : t.currentbtbchainpower >= 4 && e.sxm.PlayIngame("btb_3", 1.5)
                            })), !e.c.IsServer() && t.currentbtbchainpower >= 3 && "full" === e.hm.H.displaymode) {
                            const t = $n(e.hm.H.stackobj, 0, 0);
                            sn.play("b2b_flair", {
                                x: t.x,
                                y: t.y,
                                w: e.W() * e.hm.S(),
                                h: e.H() * e.hm.S()
                            })
                        }
                    } else r += ho.garbage.BACKTOBACK_BONUS;
                else a && t.stats.btb <= 1 && (t.currentbtbchainpower = 0);
                t.stats.combo > 1 && (i += ho.scoring.COMBO * (t.stats.combo - 1), r *= 1 + ho.garbage.COMBO_BONUS * (t.stats.combo - 1)), t.stats.combo > 2 && (r = Math.max(Math.log1p(ho.garbage.COMBO_MINIFIER * (t.stats.combo - 1) * ho.garbage.COMBO_MINIFIER_LOG), r)), i *= t.stats.level, t.stats.score += i, t.setoptions.zenlevels && (t.stats.zenprogress += e.znm.ScoreToZenProgress(i, t.stats.zenlevel));
                const l = Math.floor(r * t.setoptions.garbagemultiplier);
                t.stats.combo > 2 && (t.stats.currentcombopower = Math.max(t.stats.currentcombopower, l)), a && t.stats.combo > 1 && e.sxm.PlayIngame(`combo_${Math.min(16, t.stats.combo - 1)}${t.stats.currentcombopower >= 7 ? "_power" : ""}`, t.stats.currentcombopower >= 7 ? l >= 7 ? 2.2 : 1.75 : 1), a && t.stats.combo > 1 && t.stats.currentcombopower >= 7 && e.fim.AddFire(5), a ? e.atm.FightLines(l) : e.atm.TakeAllDamage()
            }

            function o() {
                e.bm.BoardIsEmpty() && (e.c.OnClient(() => {
                    e.sxm.PlayIngame("allclear", 1, !0), "full" === e.hm.H.displaymode && 0 !== e.lm.H.soundSkipRate && ("minimal" !== te.video.graphics && "off" !== te.video.actiontext && "some" !== te.video.actiontext && e.hm.H.board.fx("allclear").create(io.extra.clear), sn.play("bgcircle"))
                }), t.stats.score += ho.scoring.ALL_CLEAR * t.stats.level, t.setoptions.zenlevels && (t.stats.zenprogress += e.znm.ScoreToZenProgress(ho.scoring.ALL_CLEAR * t.stats.level, t.stats.zenlevel)), t.stats.clears.allclear++, e.atm.FightLines(Math.floor(ho.garbage.ALL_CLEAR * t.setoptions.garbagemultiplier)))
            }
            return {
                ClearLines: function() {
                    let s = [];
                    for (let a = 0; a < e.T(); a++) t.board[a].every(e => null !== e && "gbd" !== e) && s.push(a);
                    t.lastoffensive.x = t.falling.x, t.lastoffensive.y = s.length ? s[Math.round((s.length - 1) / 2)] : t.falling.y, t.lastoffensive.offence = 0, t.lastoffensive.defense = 0;
                    let i = e.rbm.IsTSpin(s.length);
                    return "t" === t.falling.type && "stupid" !== t.setoptions.spinbonuses || (i = t.falling.spintype), a(s), s.length && e.bm.RemoveLinesFromStack(s), n(s.length, i), o(), e.atm.AnnounceOffensive(), s.length
                },
                LevelLines: s,
                AnnounceDownstack: a,
                AnnounceLines: n,
                AnnounceClear: o
            }
        },
        Po = function(e) {
            "use strict";
            const t = e.gsm,
                s = {
                    playbackSpeed: 1,
                    soundSkipRate: 1,
                    stopgame: !1,
                    stopdraw: !1,
                    lastdT: 1,
                    lastdTs: [],
                    diter: 0,
                    cheekystep: Math.floor(60 + 60 * Math.random())
                };
            let a = 0,
                n = !0,
                o = 0,
                i = null,
                r = 1 / 60;
            let l = 0;

            function c() {
                if (e.iom.scoped && !e.iom.source.finished() && e.iom.source.nextFrameReady() && !(t.setoptions.onframe || (() => {}))(e.iom.source.getFrame(), 0 === s.soundSkipRate)) {
                    if (t.subframe = 0, e.iom.source.pull(), e.iom.source.advanceFrame(), e.im.ProcessShift(!1, 1 - t.subframe), e.fm.FallEvent(void 0, 1 - t.subframe), (e.c.IsServer(!0) || "keyboard" === e.iom.source.type()) && e.im.ProcessInterrupts(), e.wfm.ExecuteWaitingFrames(), e.wfm.ExecuteUnsafeWaitingFrames(), e.rbm.CheckObjectiveCleared(), e.spm.LowerSpikeClock(), t.setoptions.display_fire && e.fim.LowerFire(), t.setoptions.gincrease && e.iom.source.getFrame() > (t.setoptions.gmargin || 0) && (t.g += t.setoptions.gincrease / 60), t.setoptions.garbageincrease && e.iom.source.getFrame() > (t.setoptions.garbagemargin || 0) && (t.setoptions.garbagemultiplier += t.setoptions.garbageincrease / 60), t.setoptions.garbagecapincrease && (t.setoptions.garbagecap += t.setoptions.garbagecapincrease / 60), !t.setoptions.noreplay) {
                        e.iom.replay.advanceFrame();
                        const s = e.iom.replay.getFrame() - (t.setoptions.fulloffset || 300);
                        0 !== s && s % (t.setoptions.fullinterval || 300) != 0 || e.iom.replay.pushEvent("full", e.siom.Export())
                    }
                    if (e.znm.UpdateFromZenConfig(), e.iom.source.fallingBehind() && ++l <= 1200) {
                        const t = e.iom.source.amountToCatchUp();
                        s.soundSkipRate = Math.max(0, s.soundSkipRate / 1.25), s.soundSkipRate <= 1e-6 && (s.soundSkipRate = 0), c(), s.soundSkipRate = 1, !e.c.IsServer() && "tiny" !== e.hm.H.displaymode && t > 90 && Ns("loss")
                    }
                    if (e.iom.source.behindness() >= 1.25) {
                        const t = Math.max(Math.floor(8 - (e.iom.source.behindness() - 1.25)), 0) + 2;
                        e.iom.source.getFrame() % t == 0 && c()
                    }
                    l = 0
                }
            }

            function d(s) {
                e.c.IsServer() || (e.hm.H.stackdirty && (Rn(e.hm.H.stackobj), e.sdm.DrawStack(), e.hm.H.stackdirty = !1, e.hm.H.stackmud = [], "full" === e.hm.H.displaymode && (Sn = !0)), e.hm.H.stackmud.length && (e.sdm.DrawStackMud(), e.hm.H.stackmud = [], "full" === e.hm.H.displaymode && (Sn = !0)), "minimal" === te.video.graphics || !1 === te.video.siren || t.setoptions.nosiren || e.pm.WarningSiren(s), e.hm.H.fallingdirty && "tiny" !== e.hm.H.displaymode && (Rn(e.hm.H.fallingobj), e.sdm.DrawFalling(), e.hm.H.fallingdirty = !1, "full" === e.hm.H.displaymode && (Sn = !0)), "tiny" !== e.hm.H.displaymode && e.sdm.DrawFallingOpacity(), "tiny" !== e.hm.H.displaymode && e.dsm.UpdateCounts(!1), "minimal" === te.video.graphics || !1 === te.video.siren || t.setoptions.nosiren || e.pm.HyperTopoutWarningExtremePlus(s), e.pm.TargetedWarning(), e.hm.PullHolder(!1, s), t.setoptions.display_fire && e.fim.PullFire(s), e.hm.H.nextdirty && "tiny" !== e.hm.H.displaymode && (e.sdm.DrawNext(), e.hm.H.nextdirty = !1, "full" === e.hm.H.displaymode && (Sn = !0)), e.hm.H.holddirty && "tiny" !== e.hm.H.displaymode && (e.sdm.DrawHold(), e.hm.H.holddirty = !1, "full" === e.hm.H.displaymode && (Sn = !0)), !e.stm.H.stockExploding || "full" !== e.hm.H.displaymode || "high" !== te.video.graphics && "ultra" !== te.video.graphics || t.setoptions.infinitestock || e.stm.ExplodingStock(s), "tiny" !== e.hm.H.displaymode && e.hm.H.board.progress(s))
            }
            return {
                H: s,
                GameLoop: function l() {
                    if (e.c.IsServer(!0)) return;
                    if (s.stopgame) return s.stopgame = !1, void PIXI.Ticker.shared.remove(l);
                    if (e.c.IsServer()) return;
                    if (!t.started) return;
                    null === i && (i = performance.now());
                    const d = performance.now();
                    o += Math.min(5, (d - i) / 1e3);
                    let p = -2;
                    for (; o >= r;) {
                        for (o -= r, p++, a += s.playbackSpeed; a >= 1;) a--, c();
                        n && (n = !1, o = 0)
                    }
                    Dt.addGameM(Math.max(0, p)), Dt.addGameF(performance.now() - d), i = d
                },
                DoFrame: function() {
                    e.c.IsServer() && c()
                },
                DrawLoop: function t(a) {
                    if (!e.c.IsServer(!0)) return s.stopdraw ? (s.stopdraw = !1, void PIXI.Ticker.shared.remove(t)) : void(e.c.IsServer() || ("tiny" === e.hm.H.displaymode ? Math.round(e.hm.H.holderstate.ox * ("minimal" !== te.video.graphics ? 100 : 1)) == Math.round(e.hm.H.holderstate.cox * ("minimal" !== te.video.graphics ? 100 : 1)) && Math.round(e.hm.H.holderstate.oy * ("minimal" !== te.video.graphics ? 100 : 1)) == Math.round(e.hm.H.holderstate.coy * ("minimal" !== te.video.graphics ? 100 : 1)) && Math.round(100 * e.hm.H.holderstate.os) == Math.round(100 * e.hm.H.holderstate.cos) ? (s.diter += a, s.diter >= s.cheekystep ? (s.diter -= s.cheekystep, "low" !== te.video.caching && (e.hm.H.holder.cacheAsBitmap = !1), d(), "low" !== te.video.caching && (e.hm.H.holder.cacheAsBitmap = !0)) : e.hm.H.holderneedsrepull && e.hm.PullHolder(a)) : e.hm.PullHolder(a) : d(a)))
                },
                AdvanceFrames: function(a, n) {
                    n && (s.soundSkipRate = 0);
                    for (let e = 0; e < a; e++) c();
                    n && (s.soundSkipRate = 1, e.hm.H.holderstate.x = 0, e.hm.H.holderstate.y = 0, e.hm.H.holderstate.r = 0, e.hm.H.holderstate.s = 0, e.hm.H.holderstate.w = 0, e.hm.H.holderstate.dx = 0, e.hm.H.holderstate.dy = 0, e.hm.H.holderstate.dr = 0, e.hm.H.holderstate.ds = 0, e.hm.H.holderstate.dw = 0, (t.setoptions.onframe || (() => {}))(e.iom.source.getFrame(), !1))
                },
                Update: c,
                Render: d
            }
        },
        Do = function(e) {
            "use strict";
            e.gsm;
            let t = 0,
                s = 1 / 0;
            return {
                SetPlacement: function(a) {
                    e.gsm.placement = a, e.c.IsServer() || (t = Math.max(t, a), "minimal" !== te.video.graphics && "off" !== te.video.actiontext && "some" !== te.video.actiontext && (t >= 150 && s > 100 && a <= 100 && e.hm.H.board.fx("timeleft").create("100 \fc3PLAYERS LEFT"), t >= 60 && s > 30 && a <= 30 && e.hm.H.board.fx("timeleft").create("30 \fc3PLAYERS LEFT"), t >= 30 && s > 10 && a <= 10 && e.hm.H.board.fx("timeleft").create("10 \fc3PLAYERS LEFT")), s = Math.min(s, a))
                }
            }
        },
        No = function(e) {
            "use strict";
            const t = e.gsm;
            let s = null;
            return {
                CreateOverText: function(e) {
                    if (!t.setoptions.display_username) return;
                    s && (s.bg.destroy(), s.fg.destroy());
                    const a = new PIXI.Graphics;
                    a.beginFill(0, .75), a.drawRect(0, 0, ls(10 * Wn.x + 4), ls(26)), a.endFill(), a.position.set(e.data.global.x - ls(5 * Wn.x + 2), e.data.global.y + 32), an.addChild(a);
                    const n = new TheoryType.Text(t.setoptions.username.toUpperCase(), {
                        font: yn.get("hun"),
                        rasterize: "minimal" === te.video.graphics,
                        fontSize: ls(19),
                        weight: 600,
                        tint: 14540253,
                        anchor: [.5, 0]
                    });
                    n.position.set(e.data.global.x, e.data.global.y + 32 + ls(5)), an.addChild(n), Gn.animate(a, {
                        0: {
                            alpha: 0,
                            "pivot.y": 32
                        },
                        .1: {
                            alpha: 1,
                            "pivot.y": 0
                        },
                        .75: {
                            alpha: 1,
                            "pivot.y": 0
                        },
                        1: {
                            alpha: 0,
                            "pivot.y": 0
                        }
                    }, 5, BezierEasing(0, .34, .86, .46)), Gn.animate(n, {
                        0: {
                            alpha: 0,
                            "pivot.y": 32
                        },
                        .1: {
                            alpha: 1,
                            "pivot.y": 0
                        },
                        .75: {
                            alpha: 1,
                            "pivot.y": 0
                        },
                        1: {
                            alpha: 0,
                            "pivot.y": 0
                        }
                    }, 5, BezierEasing(0, .34, .86, .46), () => {
                        s.bg.destroy(), s.fg.destroy(), s = null
                    }), s = {
                        bg: a,
                        fg: n
                    }
                },
                MoveOverText: function(e) {
                    s && (s.bg.position.set(e.data.global.x - ls(5 * Wn.x + 2), e.data.global.y + 32), s.fg.position.set(e.data.global.x, e.data.global.y + 32 + ls(5)))
                },
                EndOverText: function() {
                    s && (s.bg.destroy(), s.fg.destroy(), s = null)
                }
            }
        },
        Fo = function(e) {
            "use strict";
            const t = e.gsm,
                s = {
                    siren: !0,
                    sireniter: 0,
                    panicking: !1,
                    alerting: !1,
                    targeted: !1
                };
            let a = !1,
                n = null,
                o = 0;
            return {
                H: s,
                WarningSiren: function(a) {
                    if (e.c.IsServer()) return;
                    if (t.destroyed) return;
                    if (!s.siren) return;
                    let n = e.bm.HighestLine(),
                        o = 0;
                    if (t.impendingdamage.forEach(e => {
                            o += e.lines
                        }), ((n = Math.max(0, n - Math.min(Math.floor(Math.min(t.setoptions.garbagecapmax || 40, t.setoptions.garbagecap)), o))) > e.B() - 1 || !o) && s.alerting && (e.hm.H.board.el("garbagedangericon").delete(), s.alerting = !1), n > e.B() + 2) return void(s.panicking && (e.hm.H.holderstate.tr = 255, e.hm.H.holderstate.tg = 255, e.hm.H.holderstate.tb = 255, e.hm.H.holderstate.fgtr = 0, e.hm.H.holderstate.fgtg = 0, e.hm.H.holderstate.fgtb = 0, s.panicking = !1, e.hm.H.board.el("skyline").delete(), e.iom.source && "keyboard" === e.iom.source.type() && (hn.opacity(1), hn.scale(1))));
                    if (s.panicking || (e.hm.H.holderstate.tr = 255, e.hm.H.holderstate.tg = 51, e.hm.H.holderstate.tb = 0, e.hm.H.holderstate.fgtr = 255, e.hm.H.holderstate.fgtg = 255, e.hm.H.holderstate.fgtb = 255, s.panicking = !0, e.hm.H.board.el("skyline").create(), e.iom.source && "keyboard" === e.iom.source.type() && (hn.opacity(.5), hn.scale(1.01))), "full" !== e.hm.H.displaymode || 0 === e.lm.H.soundSkipRate) return;
                    if (!s.alerting && n <= e.B() - 1 && o && (e.hm.H.board.el("garbagedangericon").create(), s.alerting = !0, e.sxm.PlayIngame("damage_alert", 1, !1, .33)), e.hm.H.board.el("skyline").update(), s.sireniter += a, 0 === Math.floor(s.sireniter / Math.max(50, 100 - 15 * (e.B() + 2 - n)))) return;
                    s.sireniter -= Math.max(50, 100 - 15 * (e.B() + 2 - n)), e.sxm.PlayIngame("warning", 1, !1, .33);
                    const i = $n(e.hm.H.stackobj, ls(Wn.x) * e.Wh(), ls(Wn.x) * e.Hh());
                    sn.play("danger_flair", {
                        x: i.x,
                        y: i.y,
                        w: e.W() * e.hm.S(),
                        h: e.H() * e.hm.S()
                    }), sn.play("bgsplashdanger", {
                        direction: 0,
                        amt: e.B() + 6 - n
                    })
                },
                HyperTopoutWarningExtremePlus: function(i) {
                    if (!t.falling.deep_sleep && "full" === e.hm.H.displaymode && s.panicking) {
                        if ((o += i) < 1) return;
                        if (o--, e.bm.PieceMayLockHere(t.falling.type, t.falling.x, e.sdm.H.lastLegal, t.falling.r)) a && (e.iom.source && "keyboard" === e.iom.source.type() && (hn.opacity(s.panicking ? .5 : 1), hn.scale(s.panicking ? 1.01 : 1)), a = !1, n && vs.stop(n));
                        else {
                            const t = $n(e.hm.H.stackobj, 0, 0);
                            sn.play("danger_smoke", {
                                x: t.x,
                                y: t.y,
                                w: e.W() * e.hm.S(),
                                h: e.H() * e.hm.S()
                            }), a || (e.iom.source && "keyboard" === e.iom.source.type() && (hn.opacity(.25), hn.scale(1.03)), a = !0, n = e.sxm.PlayIngame("hyperalert", 1, !1, .33))
                        }
                    }
                },
                TargetedWarning: function() {
                    e.c.IsServer() || (s.targeted ? e.hm.H.board.el("targeticon").create() : e.hm.H.board.el("targeticon").delete())
                }
            }
        },
        Uo = function(e) {
            "use strict";
            const t = e.gsm,
                s = {
                    leftBarCount: 0,
                    rightBarCount: 0,
                    seenGarbageIDs: new Set
                };

            function a(a) {
                for (let n = 1; n <= 2; n++)
                    if (t.setoptions[`slot_bar${n}`] === a) {
                        let a = new Set;
                        t.impendingdamage.forEach(t => {
                            e.hm.H.board.el(`bar${n}`).update("upsert", {
                                id: t.id,
                                size: t.lines / e.H(),
                                style: `${t.type}${t.active ? "" : "_inactive"}`
                            }), s.seenGarbageIDs.delete(t.id), a.add(t.id)
                        }), s.seenGarbageIDs.forEach(t => {
                            e.hm.H.board.el(`bar${n}`).update("upsert", {
                                id: t,
                                size: 0
                            })
                        }), s.seenGarbageIDs = a
                    }
            }

            function n(s, a) {
                for (let n = 1; n <= 2; n++) t.setoptions[`slot_bar${n}`] === s && e.hm.H.board.el(`bar${n}`).action("flash", a / e.H())
            }
            return {
                H: s,
                UpdateBar: function(s, a) {
                    for (let n = 1; n <= 2; n++) t.setoptions[`slot_bar${n}`] === s && e.hm.H.board.el(`bar${n}`).update("simple", a)
                },
                UpdateBarTicker: function(s, a) {
                    for (let n = 1; n <= 2; n++) t.setoptions[`slot_bar${n}`] === s && e.hm.H.board.el(`bar${n}`).update("ticker", a)
                },
                BlastBar: function(t) {
                    n(t, e.H())
                },
                UpdateGarbageBar: a,
                ResetGarbageBar: function(s) {
                    for (let a = 1; a <= 2; a++) t.setoptions[`slot_bar${a}`] === s && e.hm.H.board.el(`bar${a}`).update("clear");
                    a(s)
                },
                FlashGarbageBar: n,
                ForceUpdateGarbageBar: function(s) {
                    for (let a = 1; a <= 2; a++) t.setoptions[`slot_bar${a}`] === s && e.hm.H.board.el(`bar${a}`).action("forceupdate")
                }
            }
        },
        Bo = function(e) {
            "use strict";
            const t = e.gsm;
            const s = "#*********_##########_##########_##########_##########_##########_##########_##########_##########_##########_########_########_########_########_########_########_########_########_########_#########";

            function a() {
                return !t.setoptions.map && e.bm.CheckStackAgainstMap(s)
            }
            return {
                IsTSpin: function() {
                    if ("none" === t.setoptions.spinbonuses) return !1;
                    if ("stupid" === t.setoptions.spinbonuses) return !e.bm.IsLegalAtPos(t.falling.type, t.falling.x, t.falling.y + 1, t.falling.r) && "normal";
                    if ("t" !== t.falling.type) return "all" === t.setoptions.spinbonuses && (!(e.bm.IsLegalAtPos(t.falling.type, t.falling.x - 1, t.falling.y, t.falling.r) || e.bm.IsLegalAtPos(t.falling.type, t.falling.x + 1, t.falling.y, t.falling.r) || e.bm.IsLegalAtPos(t.falling.type, t.falling.x, t.falling.y - 1, t.falling.r) || e.bm.IsLegalAtPos(t.falling.type, t.falling.x, t.falling.y + 1, t.falling.r)) && "normal");
                    if ("rotate" !== t.falling.last) return !1;
                    let s = 0,
                        a = 0;
                    if (e.bm.IsOccupied(t.falling.x - 1, t.falling.y - 1) && (s++, 3 !== t.falling.r && 0 !== t.falling.r || a++), e.bm.IsOccupied(t.falling.x + 1, t.falling.y - 1) && (s++, 0 !== t.falling.r && 1 !== t.falling.r || a++), e.bm.IsOccupied(t.falling.x + 1, t.falling.y + 1) && (s++, 1 !== t.falling.r && 2 !== t.falling.r || a++), e.bm.IsOccupied(t.falling.x - 1, t.falling.y + 1) && (s++, 2 !== t.falling.r && 3 !== t.falling.r || a++), s < 3) return !1;
                    let n = "normal";
                    return 2 !== a && (n = "mini"), 4 === t.falling.lastkick && (n = "normal"), n
                },
                CheckObjectiveCleared: function() {
                    if (t.playing && t.setoptions.objective) switch (t.setoptions.objective.type) {
                        case "lines":
                            return void(t.stats.lines >= t.setoptions.objective.count && (t.successful = !0, e.gom.GameOver("clear"), e.c.IsServer() || e.pbm.BlastBar("progress")));
                        case "timed":
                            let s = e.iom.source.getFrame() * (1e3 / 60);
                            const a = Math.ceil(Math.max(0, t.setoptions.objective.time - s) / 1e3);
                            return e.c.IsServer() || a === t.stats.time.prev || t.stats.time.locked || ("minimal" !== te.video.graphics && "off" !== te.video.actiontext && "some" !== te.video.actiontext && (60 === a && e.hm.H.board.fx("timeleft").create("60\f3S LEFT"), 30 === a && e.hm.H.board.fx("timeleft").create("30\f3S LEFT")), a > 3 && a <= 10 ? (t.setoptions.physical && e.sxm.PlayIngame("timer1"), "minimal" !== te.video.graphics && "off" !== te.video.actiontext && "some" !== te.video.actiontext && e.hm.H.board.fx("countdown").create(a)) : a <= 3 && a > 0 && (t.setoptions.physical && e.sxm.PlayIngame("timer2"), "minimal" !== te.video.graphics && "off" !== te.video.actiontext && "some" !== te.video.actiontext && e.hm.H.board.fx("countdown").create(a))), t.stats.time.prev = a, void(s >= t.setoptions.objective.time && (t.successful = !0, e.gom.GameOver("clear")))
                    }
                },
                CheckSecretGrade: a,
                AwardSecrets: function() {
                    "keyboard" === e.iom.source.type() && a() && (vs.play("allclear"), x({
                        msg: "you did a thing!",
                        color: "#FFAE00",
                        icon: "achievement"
                    }), k.post("/api/users/award", {
                        type: "secretgrade"
                    }, !0))
                }
            }
        },
        Xo = function(e) {
            "use strict";
            const t = e.gsm;
            return {
                PlayIngame: function(s, a = 1, n = !1, o = 1, i = !1) {
                    if (!e.c.IsServer()) return vs.playIngame(s, e.hm.H.displaymode, e.hm.H.holderstate.cox, e.hm.H.holderstate.cos * a * (t.setoptions.physical ? 1 : o), n, t.setoptions.physical || i, e.lm.H.soundSkipRate)
                }
            }
        },
        zo = function(e) {
            "use strict";
            e.gsm;
            const t = {
                spikeCount: 0,
                spikeTimer: 0
            };
            return {
                H: t,
                LowerSpikeClock: function() {
                    0 !== t.spikeTimer && (t.spikeTimer--, 0 === t.spikeTimer && (t.spikeCount = 0))
                }
            }
        },
        Go = function(e) {
            "use strict";
            const t = e.gsm;
            return {
                GlobalShout: function(s, a, n) {
                    if (e.c.IsServer()) return;
                    if ("full" !== e.hm.H.displaymode) return;
                    if (!t.setoptions.physical && !n) return;
                    const o = document.createElement("div");
                    o.className = `ns shout ${s}`, o.textContent = a, document.getElementsByClassName("globalshouts")[0].appendChild(o), setTimeout(() => {
                        o.remove()
                    }, 5e3), "ultra" === te.video.graphics && kn && ho.globalShoutStyles[s] && ho.globalShoutStyles[s]()
                }
            }
        },
        jo = function(e) {
            "use strict";
            const t = e.gsm,
                s = {
                    lastLegal: e.T() - 5
                };

            function a(...t) {
                return "tiny" === e.hm.H.displaymode ? eo.generatePlaceholder(...t) : eo.generate(...t)
            }

            function n(...t) {
                return "tiny" === e.hm.H.displaymode ? so.generatePlaceholder(...t) : so.generate(...t)
            }

            function o(s, o, i, r, l, c = !1, d = !1, p = !1) {
                if (!e.c.IsServer())
                    for (let u = 0; u < ho.tetrominoes[o].matrix.data[l].length; u++) {
                        const m = ho.tetrominoes[o].matrix.data[l][u][0] - ho.tetrominoes[o].matrix.dx,
                            g = ho.tetrominoes[o].matrix.data[l][u][1] - ho.tetrominoes[o].matrix.dy;
                        let h;
                        (h = c ? n(t.setoptions.ghostskin, d ? "x" : "g", ho.tetrominoes[o].matrix.data[l][u][2]) : a(t.setoptions.minoskin[t.kickset.colorMap[o]] || t.setoptions.minoskin.other, `${p ? "s_" : ""}${t.kickset.colorMap[o]}`, ho.tetrominoes[o].matrix.data[l][u][2])).position.set((i + m) * ls(Wn.x), (Math.ceil(r) + g - e.B()) * ls(Wn.x)), c && !d && (h.alpha = void 0 === te.video.shadowopacity ? .15 : te.video.shadowopacity, te.video.colorshadow && (h.tint = eo.getColor(t.setoptions.minoskin[t.kickset.colorMap[o]] || t.setoptions.minoskin.other, t.kickset.colorMap[o]))), s.addChild(h)
                    }
            }

            function i(s, n, o, i, r = !1) {
                if (e.c.IsServer()) return;
                let l = ho.tetrominoes[n].preview.data;
                t.kickset.preview_overrides[n] && (l = t.kickset.preview_overrides[n]);
                for (let e = 0; e < l.length; e++) {
                    const c = l[e][0],
                        d = l[e][1],
                        p = a(t.setoptions.minoskin[t.kickset.colorMap[n]] || t.setoptions.minoskin.other, r ? "d" : t.kickset.colorMap[n], l[e][2]);
                    p.position.set(o + c * ls(Wn.x) - ("ultra" === te.video.graphics ? 1 : 0), i + d * ls(Wn.x) - ("ultra" === te.video.graphics ? 1 : 0)), s.addChild(p)
                }
            }
            return {
                H: s,
                DrawStack: function() {
                    if (!e.c.IsServer())
                        for (let s = "tiny" === e.hm.H.displaymode ? e.B() : 0; s < e.T(); s++)
                            for (let n = 0; n < e.W(); n++) {
                                const o = t.board[s][n];
                                if (null !== o) {
                                    const i = a(t.setoptions.minoskin[t.kickset.colorMap[o]] || t.setoptions.minoskin.other, t.kickset.colorMap[o], t.boardedges[s][n]);
                                    i.position.set(n * ls(Wn.x), (s - e.B()) * ls(Wn.x)), e.hm.H.stackobj.addChild(i)
                                }
                            }
                },
                DrawStackMud: function() {
                    e.c.IsServer() || e.hm.H.stackmud.forEach(s => {
                        if (null !== s && !(s[0] < ("tiny" === e.hm.H.displaymode ? e.B() : 0)) && null !== s[2]) {
                            const n = a(t.setoptions.minoskin[t.kickset.colorMap[s[2]]] || t.setoptions.minoskin.other, t.kickset.colorMap[s[2]], s[3]);
                            if (n.position.set(s[1] * ls(Wn.x), (s[0] - e.B()) * ls(Wn.x)), e.hm.H.stackobj.addChild(n), "full" === e.hm.H.displaymode && !["minimal", "low"].includes(te.video.graphics)) {
                                const e = eo.generateFlash(t.setoptions.minoskin[t.kickset.colorMap[s[2]]] || t.setoptions.minoskin.other);
                                n.addChild(e)
                            }
                        }
                    })
                },
                DrawFalling: function() {
                    if (e.c.IsServer()) return;
                    if (t.falling.sleep || t.falling.deep_sleep) return;
                    let a = t.falling.y;
                    for (;;) {
                        if (!e.bm.IsLegalAtPos(t.falling.type, t.falling.x, a + 1, t.falling.r)) {
                            !1 !== t.setoptions.display_shadow && o(e.hm.H.fallingobj, t.falling.type, t.falling.x, a, t.falling.r, !0);
                            break
                        }
                        a++
                    }
                    s.lastLegal = a, o(e.hm.H.fallingobj, t.falling.type, t.falling.x, t.falling.y, t.falling.r, !1, !1, !0), "full" === e.hm.H.displaymode && !1 !== t.setoptions.display_next && e.pm.H.panicking && o(e.hm.H.fallingobj, t.bag[0], Math.floor(e.W() / 2) - 1 + t.kickset.additional_offsets[t.bag[0]][t.kickset.spawn_rotation[t.bag[0]]][0], e.B() - 2.04 + t.kickset.additional_offsets[t.bag[0]][t.kickset.spawn_rotation[t.bag[0]]][1], t.kickset.spawn_rotation[t.bag[0]], !0, !0)
                },
                DrawFallingOpacity: function() {
                    if (e.c.IsServer()) return;
                    const s = e.hm.H.fallingobj.alpha;
                    t.falling.sleep || t.falling.deep_sleep ? e.hm.H.fallingobj.alpha = 1 : (e.hm.H.fallingobj.alpha = 1 - t.falling.locking / (t.setoptions.locktime || 30) / 2, s !== e.hm.H.fallingobj.alpha && "full" === e.hm.H.displaymode && (Sn = !0))
                },
                DrawNext: function() {
                    if (!e.c.IsServer())
                        for (let s = 0; s < t.setoptions.nextcount; s++) {
                            if (!t.bag[s]) return;
                            if (!e.hm.H.nextobj || !e.hm.H.nextobj[s]) return;
                            Rn(e.hm.H.nextobj[s]);
                            const a = ho.tetrominoes[t.bag[s]];
                            i(e.hm.H.nextobj[s], t.bag[s], a.preview.w * ls(Wn.x) / -2, a.preview.h * ls(Wn.x) / -2, !1)
                        }
                },
                DrawHold: function() {
                    if (e.c.IsServer()) return;
                    if (!e.hm.H.holdobj) return;
                    if (Rn(e.hm.H.holdobj), null === t.hold) return;
                    const s = ho.tetrominoes[t.hold];
                    i(e.hm.H.holdobj, t.hold, s.preview.w * ls(Wn.x) / -2, s.preview.h * ls(Wn.x) / -2, t.holdlocked)
                },
                RenderTetromino: o,
                RenderTetrominoPreview: i
            }
        },
        Wo = function(t) {
            "use strict";
            const s = t.gsm;
            return {
                SetGame: function(a) {
                    if (s.setoptions = a, s.setoptions.version || (s.setoptions.version = Jo), s.setoptions.version < Jo && !t.c.IsServer() && x({
                            msg: "this replay is outdated and may not play properly",
                            color: "#FFD800",
                            icon: "warning",
                            timeout: 7500
                        }), function() {
                            const e = s.setoptions.slot_counter1,
                                t = s.setoptions.slot_counter2,
                                a = s.setoptions.slot_counter3,
                                n = s.setoptions.slot_counter4,
                                o = s.setoptions.slot_counter5;
                            s.setoptions.display_score && (s.setoptions.slot_counter5 = "score");
                            s.setoptions.display_stopwatch && (s.setoptions.slot_counter1 = "stopwatch");
                            s.setoptions.display_timer && (s.setoptions.slot_counter1 = "timer");
                            s.setoptions.display_lines && (s.setoptions.slot_counter2 = "lines");
                            s.setoptions.display_level && (s.setoptions.slot_counter3 = "level");
                            s.setoptions.display_pieces && (s.setoptions.slot_counter3 = "pieces");
                            s.setoptions.display_keys && (s.setoptions.slot_counter4 = "keys");
                            s.setoptions.display_finesse && (s.setoptions.slot_counter5 = "finesse");
                            s.setoptions.display_finesse_l && (s.setoptions.slot_counter4 = "finesse_l");
                            s.setoptions.display_attack && (s.setoptions.slot_counter2 = "attack");
                            s.setoptions.display_vs && (s.setoptions.slot_counter5 = "vs");
                            s.setoptions.display_placement && (s.setoptions.slot_counter5 = "placement");
                            s.setoptions.display_kills && (s.setoptions.slot_counter1 = "kills");
                            e && (s.setoptions.slot_counter1 = e);
                            t && (s.setoptions.slot_counter2 = t);
                            a && (s.setoptions.slot_counter3 = a);
                            n && (s.setoptions.slot_counter4 = n);
                            o && (s.setoptions.slot_counter5 = o);
                            const i = s.setoptions.slot_bar1,
                                r = s.setoptions.slot_bar2;
                            s.setoptions.display_impending && (s.setoptions.slot_bar1 = "impending");
                            s.setoptions.display_progress && (s.setoptions.slot_bar2 = "progress");
                            i && (s.setoptions.slot_bar1 = i);
                            r && (s.setoptions.slot_bar2 = r)
                        }(), s.setoptions.seed_random && (s.setoptions.seed = Math.floor(2147483646 * Math.random() + 1)), s.stats.seed = s.setoptions.seed, s.rng = new tn(s.setoptions.seed || 0), s.g = s.setoptions.g || 0, s.setoptions.garbagespeed = s.setoptions.garbagespeed || 20, s.setoptions.garbagecap = s.setoptions.garbagecap || 8, s.stock = Math.min(10, Math.max(0, s.setoptions.stock || 0)), s.setoptions.kickset = s.setoptions.kickset || "SRS+", s.kickset = ho.kicksets[s.setoptions.kickset] || ho.kicksets["SRS+"], s.setoptions.score && (s.stats.score = s.setoptions.score), s.setoptions.zenlevels && (s.stats.zenlevel = s.setoptions.zenlevel, s.stats.zenprogress = s.setoptions.zenprogress), s.setoptions.boardwidth = parseInt(s.setoptions.boardwidth) ? Math.max(4, Math.min(100, parseInt(s.setoptions.boardwidth))) : 10, s.setoptions.boardheight = parseInt(s.setoptions.boardheight) ? Math.max(1, Math.min(100, parseInt(s.setoptions.boardheight))) : 20, s.setoptions.boardbuffer = isNaN(parseInt(s.setoptions.boardbuffer)) ? 20 : Math.max(0, Math.min(100, parseInt(s.setoptions.boardbuffer))), t.bm.SetupBoard(), s.setoptions.map && t.bm.LoadMap(s.setoptions.map), s.setoptions.handling ? s.handling = {
                            arr: Math.floor(10 * Math.max(0, Math.min(s.setoptions.handling.arr, 5))) / 10,
                            das: Math.floor(10 * Math.max(1, Math.min(s.setoptions.handling.das, 20))) / 10,
                            dcd: Math.floor(10 * Math.max(0, Math.min(s.setoptions.handling.dcd || 0, 20))) / 10,
                            sdf: Math.floor(Math.max(5, Math.min(s.setoptions.handling.sdf, 41))),
                            safelock: s.setoptions.version >= 12 && !1 !== s.setoptions.handling.safelock,
                            cancel: !!s.setoptions.handling.cancel
                        } : s.handling = {
                            arr: Math.floor(10 * Math.max(0, Math.min(te.handling.arr, 5))) / 10,
                            das: Math.floor(10 * Math.max(1, Math.min(te.handling.das, 20))) / 10,
                            dcd: Math.floor(10 * Math.max(0, Math.min(te.handling.dcd || 0, 20))) / 10,
                            sdf: Math.floor(Math.max(5, Math.min(te.handling.sdf, 41))),
                            safelock: !1 !== te.handling.safelock,
                            cancel: !!te.handling.cancel
                        }, s.setoptions.room_handling && (s.handling.arr = Math.floor(10 * Math.max(0, Math.min(s.setoptions.room_handling_arr, 5))) / 10, s.handling.das = Math.floor(10 * Math.max(1, Math.min(s.setoptions.room_handling_das, 20))) / 10, s.handling.sdf = Math.floor(Math.max(5, Math.min(s.setoptions.room_handling_sdf, 41)))), void 0 === s.setoptions.objective && (s.setoptions.objective = {
                            type: "none"
                        }), s.setoptions.levels ? t.lcm.LevelLines(0, !0, s.setoptions.startinglevel || 1) : s.stats.level = s.setoptions.startinglevel || 1, void 0 === s.setoptions.physical && (s.setoptions.physical = !0), s.setoptions.can_retry && "keyboard" === t.iom.source.type() && (t.iom.source.bindHyperRetry(() => {
                            s.hyperRetryAllowed && !s.setoptions.retryisclear && (s.hyperRetryAllowed = !1, t.gom.GameOver("retry", !0), vs.play("detonate2"))
                        }), setTimeout(() => {
                            t.iom.source.bindHyperForfeit(() => {
                                s.hyperForfeitAllowed && (s.hyperForfeitAllowed = !1, t.gom.GameOver("forfeit", !0), vs.play("detonate2"))
                            })
                        }, 1e3)), s.setoptions.nextcount ? s.setoptions.nextcount = Math.min(5, Math.max(1, Math.floor(parseInt(s.setoptions.nextcount)))) : s.setoptions.nextcount = 5, s.setoptions.minoskin || (s.setoptions.minoskin = {
                            z: "tetrio",
                            l: "tetrio",
                            o: "tetrio",
                            s: "tetrio",
                            i: "tetrio",
                            j: "tetrio",
                            t: "tetrio",
                            other: "tetrio"
                        }), s.setoptions.ghostskin || (s.setoptions.ghostskin = "tetrio"), s.setoptions.boardskin || (s.setoptions.boardskin = "generic"), t.bam.PopulateBag(), s.setoptions.no_szo && s.bag.length)
                        for (let e = 0; e < s.bag.length && ["s", "z", "o"].includes(s.bag[0]); e++) s.bag.push(s.bag.shift());
                    t.c.OnClient(() => {
                        Qo.push(t.parent), s.setoptions.usezenconfig && e("zen_panel").classList.remove("hidden"), Object.values(s.setoptions.minoskin).forEach(e => {
                            eo.load(e)
                        }), so.load(s.setoptions.ghostskin)
                    }), t.iom.replay && s.setoptions.latencypreference && t.iom.replay.setLatencyPreference(s.setoptions.latencypreference)
                },
                StartGame: function(e = !1) {
                    e ? t.c.OnClient(() => {
                        PIXI.Ticker.shared.add(t.lm.GameLoop), PIXI.Ticker.shared.add(t.lm.DrawLoop), t.dsm.DisplayCounts(), t.hm.H.holder.visible = !0, Gn.animate(t.hm.H.holder, {
                            0: {
                                "pivot.y": ls(Wn.x * t.H() + 1600)
                            },
                            1: {
                                "pivot.y": ls(Wn.x * t.Hh())
                            }
                        }, .5, BezierEasing(.06, .18, .42, 1.16))
                    }) : (t.c.OnClient(() => {
                        PIXI.Ticker.shared.add(t.lm.GameLoop), PIXI.Ticker.shared.add(t.lm.DrawLoop), t.dsm.DisplayCounts();
                        let e = (s.setoptions.stride ? s.setoptions.mission ? 500 : 0 : s.setoptions.precountdown || 0) + (s.setoptions.prestart || 0),
                            a = s.setoptions.prestart || 0;
                        if (s.setoptions.physical && !s.setoptions.display_replay && document.body.classList.add("ingame_phys"), s.setoptions.usezenconfig && t.znm.UpdateFromZenConfig(!0), s.countdown_started = !0, setTimeout(() => {
                                s.playing && (!s.setoptions.stride && s.setoptions.mission && (s.setoptions.physical || s.setoptions.force_mission) && (t.ssm.GlobalShout(s.setoptions.mission_type || "mission", s.setoptions.mission, !0), s.setoptions.no_mission_sound || t.sxm.PlayIngame(s.setoptions.mission_type || "mission", 1, !1, 1, s.setoptions.force_mission)), t.hm.H.holder.visible = !0, "slow" === s.setoptions.zoominto ? Gn.animate(t.hm.H.holder, {
                                    0: {
                                        "pivot.y": ls(Wn.x * t.H() + 1600)
                                    },
                                    1: {
                                        "pivot.y": ls(Wn.x * t.Hh())
                                    }
                                }, .5, BezierEasing(.06, .18, .42, 1.16)) : "fast" === s.setoptions.zoominto ? Gn.animate(t.hm.H.holder, {
                                    0: {
                                        "scale.x": 0
                                    },
                                    1: {
                                        "scale.x": "inherit"
                                    }
                                }, s.setoptions.stride ? .05 : .25, BezierEasing(.06, .18, .45, .98)) : "cinematic" === s.setoptions.zoominto ? Gn.animate(t.hm.H.holder, {
                                    0: {
                                        alpha: .5,
                                        "scale.x": 0,
                                        "scale.y": 0,
                                        "pivot.x": ls(Wn.x * t.Wh() + (0 === t.hm.H.holderstate.ox ? 0 : t.hm.H.holderstate.ox > 0 ? 300 : -300))
                                    },
                                    1: {
                                        alpha: 1,
                                        "scale.x": "inherit",
                                        "scale.y": "inherit",
                                        "pivot.x": ls(Wn.x * t.Wh())
                                    }
                                }, 6, BezierEasing(.47, .66, .54, .98)) : "fade" === s.setoptions.zoominto && Gn.animate(t.hm.H.holder, {
                                    0: {
                                        alpha: 0
                                    },
                                    1: {
                                        alpha: 1
                                    }
                                }, .5, BezierEasing(0, 0, 1, 1)))
                            }, a), s.setoptions.countdown) {
                            let n = s.setoptions.stride ? 1 : s.setoptions.countdown_count || 3,
                                o = s.setoptions.stride ? 1e3 : s.setoptions.countdown_interval || 1e3,
                                i = s.setoptions.stride ? s.setoptions.mission ? 500 : 0 : s.setoptions.precountdown || 0;
                            e += n * o;
                            for (let e = n; e > 0; e--) setTimeout(() => {
                                if (s.playing) {
                                    if (s.setoptions.stride) return t.hm.H.board.fx("countdown_stride").create("ready"), (s.setoptions.physical || s.setoptions.force_mission) && t.sxm.PlayIngame("countdown5", 1, !1, 1, s.setoptions.force_mission), void setTimeout(() => {
                                        t.hm.H.board.fx("countdown_stride").create("set"), (s.setoptions.physical || s.setoptions.force_mission) && t.sxm.PlayIngame("countdown4", 1, !1, 1, s.setoptions.force_mission)
                                    }, 500);
                                    t.hm.H.board.fx("countdown").create(e), (s.setoptions.physical || s.setoptions.force_mission) && t.sxm.PlayIngame(`countdown${Math.min(e, 5)}`, 1, !1, 1, s.setoptions.force_mission)
                                }
                            }, a + (n - e) * o + i)
                        }
                        setTimeout(() => {
                            s.playing && (s.hyperRetryAllowed = !1, s.hyperForfeitAllowed = !1, s.setoptions.countdown && (t.hm.H.board.fx(s.setoptions.stride ? "countdown_stride" : "countdown").create("GO!"), (s.setoptions.physical || s.setoptions.force_mission) && t.sxm.PlayIngame("go", 1, !1, 1, s.setoptions.force_mission)), t.iom.source.readyEventQueue(), s.setoptions.anchorseed && !t.c.IsServer() && s.setoptions.physical && Ft.anchorSeed(s.setoptions.seed), (s.setoptions.onstart || (() => {}))(), s.started = !0, t.dsm.StartStopwatch(), t.fm.Next(), s.setoptions.noreplay || t.iom.replay.pushEvent("start", {}))
                        }, e), t.iom.replay.pushEvent("full", t.siom.Export())
                    }), t.c.OnServer(() => {
                        s.setoptions.noreplay || (t.iom.replay.pushEvent("start", {}), t.iom.replay.pushEvent("full", t.siom.Export())), s.stats.time.zero = !1, t.fm.Next()
                    }))
                }
            }
        },
        qo = function(e) {
            "use strict";
            const t = e.gsm;

            function s() {
                t.setoptions.noscope || setTimeout(() => {
                    t.destroyed || "tiny" === e.hm.H.displaymode || qs.startScope(t.setoptions.username)
                }, 1e3)
            }
            return {
                Export: function(s = {}) {
                    const a = Math.max(1, e.iom.source.getFrame() / 60),
                        n = (t.stats.garbage.attack + t.stats.garbage.cleared) / Math.max(1, t.stats.piecesplaced) * (t.stats.piecesplaced / a) * 100;
                    return {
                        successful: t.successful,
                        gameoverreason: t.gameoverreason,
                        replay: e.iom.replay,
                        source: e.iom.source,
                        options: t.setoptions,
                        stats: t.stats,
                        targets: t.targets,
                        fire: t.fire,
                        game: {
                            board: t.board,
                            bag: t.bag,
                            hold: {
                                piece: t.hold,
                                locked: t.holdlocked
                            },
                            g: t.g,
                            controlling: {
                                ldas: t.ldas,
                                ldasiter: t.ldasiter,
                                lshift: t.lshift,
                                rdas: t.rdas,
                                rdasiter: t.rdasiter,
                                rshift: t.rshift,
                                lastshift: t.lastshift,
                                softdrop: t.softdrop
                            },
                            handling: t.handling,
                            playing: t.playing
                        },
                        killer: t.killer,
                        assumptions: s,
                        aggregatestats: {
                            apm: (t.stats.garbage.attack || 0) / (e.iom.source.getFrame() / 3600 || 1),
                            pps: (t.stats.piecesplaced || 0) / (e.iom.source.getFrame() / 60 || 1),
                            vsscore: n
                        }
                    }
                },
                EjectState: function() {
                    return v({
                        ...t,
                        unsafewaitingframes: [],
                        safetotransmit: null !== t.rng,
                        rng: t.rng ? t.rng.getCurrentSeed() : null,
                        sourceframe: e.iom.source.getFrame(),
                        started: !0,
                        countdown_started: !0
                    })
                },
                InjectState: function(a) {
                    if (t.setoptions.noscope) return;
                    qs && !t.started && t.countdown_started && s(), a = v(a), e.wfm.ExecuteUnsafeWaitingFrames(!0), a.rng = new tn(a.rng), a.sourceframe = void 0, a.safetotransmit = void 0;
                    const n = t.setoptions.physical,
                        o = {};
                    Object.keys(t.setoptions).forEach(e => {
                        t.setoptions[e] instanceof Function && (o[e] = t.setoptions[e])
                    }), Object.keys(a).forEach(e => {
                        t[e] instanceof Function || ("object" != typeof t[e] || t[e] instanceof Array || null === t[e] ? t[e] = a[e] : t[e] = {
                            ...t[e],
                            ...a[e]
                        })
                    }), t.setoptions.physical = n, t.setoptions = {
                        ...t.setoptions,
                        ...o
                    }, e.hm.H.stackdirty = !0, e.hm.H.fallingdirty = !0, e.hm.H.nextdirty = !0, e.hm.H.holddirty = !0, e.hm.H.stockdirty = !0, e.dsm.H.countersfrozen = !1, e.stm.H.stockExploding = !1, e.bm.ClearIsLegalAtPosMemo(), e.geh.ClearSeenIGEs(), e.iom.scoped = !0, e.spm.H.spikeCount = 0, e.spm.H.spikeTimer = 0, e.lm.H.lastdT = 1, e.lm.H.lastdTs = [], e.pbm.H.seenGarbageIDs = new Set, e.c.OnClient(() => {
                        e.pbm.ResetGarbageBar("impending")
                    })
                },
                EjectBoardState: function() {
                    const e = [];
                    let s = !0;
                    return t.board.forEach(t => {
                        s && t.every(e => null === e) || (s = !1, e.push([...t]))
                    }), {
                        b: e,
                        f: t.fire
                    }
                },
                InjectBoardState: function(s) {
                    if (t.setoptions.noscope || e.iom.scoped) return;
                    t.fire = s.f;
                    let a = [],
                        n = [];
                    for (let t = 0; t < e.T(); t++) {
                        let o = [];
                        for (let t = 0; t < e.W(); t++) o.push(255);
                        if (n.push(o), e.T() - t <= s.b.length) {
                            a.push(s.b[t - (e.T() - s.b.length)]);
                            continue
                        }
                        let i = [];
                        for (let t = 0; t < e.W(); t++) i.push(null);
                        a.push(i)
                    }
                    t.board = a, t.boardedges = n, e.hm.H.stackdirty = !0
                },
                RerequestState: s
            }
        },
        Ko = function(e) {
            "use strict";
            const t = e.gsm,
                s = {
                    stockExploding: !1
                };
            return {
                H: s,
                ExplodingStock: function(t) {
                    e.c.IsServer() || e.hm.H.board.el("stock").action("fire", {
                        frame: e.iom.source.getFrame(),
                        dT: t
                    })
                },
                LoseStockOrGameOver: function(a) {
                    t.falling.deep_sleep || (t.stock <= 0 && !t.setoptions.infinitestock ? e.gom.GameOver(a) : (t.falling.sleep = !0, t.falling.deep_sleep = !0, e.wfm.WaitFrames(1, "freeze-counters", {}), e.rbm.AwardSecrets(), e.c.OnClient(() => {
                        if (e.gpm.Vibrate(ee.TOPOUT), s.stockExploding = !0, e.sxm.PlayIngame("losestock"), e.hm.H.holderstate.ds += 100 * e.lm.H.lastdT, "full" === e.hm.H.displaymode && (sn.play("bgsplashdanger", {
                                direction: 0,
                                amt: 50
                            }), sn.play("bgcircle", {
                                color: 16720384,
                                amt: 300,
                                speed: 300
                            })), !1 !== te.video.siren && "full" === e.hm.H.displaymode) {
                            const t = $n(e.hm.H.stackobj, ls(Wn.x * e.Wh()), ls(Wn.x * e.Hh()));
                            sn.play("death_flair", {
                                x: t.x,
                                y: t.y,
                                w: e.W() * e.hm.S(),
                                h: e.H() * e.hm.S()
                            })
                        }
                    }), e.wfm.WaitFrames(90, "revive-from-stock-loss", {})))
                },
                ReviveFromStockLoss: function() {
                    t.setoptions.infinitestock || t.stock--, t.falling.deep_sleep = !1, e.dsm.H.countersfrozen = !1, e.bm.DestroyBoard(), t.setoptions.zenlevels && (t.stats.lines = 0, t.stats.inputs = 0, t.stats.time.frameoffset = e.iom.source.getFrame(), t.stats.piecesplaced = 0, t.stats.garbage.sent = 0, t.stats.garbage.attack = 0, t.stats.garbage.cleared = 0, t.stats.combo = 0, t.stats.currentcombopower = 0, t.stats.btb = 0, t.stats.finesse.combo = 0, t.stats.finesse.faults = 0, t.stats.finesse.perfectpieces = 0, t.setoptions.b2bchaining && e.hm.H.board.el("b2b").delete()), e.fm.Next(), e.c.OnClient(() => {
                        e.gpm.Vibrate(ee.CLEAR), t.setoptions.infinitestock || e.hm.H.board.el("stock").action("drop"), s.stockExploding = !1, e.hm.H.holderstate.ds += 50 * e.lm.H.lastdT, e.sxm.PlayIngame("shatter")
                    })
                }
            }
        },
        Yo = function(e) {
            "use strict";
            const t = e.gsm;

            function s(t) {
                "incoming-attack-hit" === t.type ? e.atm.IncomingAttackHit(t.additionalData.data, t.additionalData.sender, t.additionalData.cid) : "outgoing-attack-hit" === t.type ? e.atm.OutgoingAttackHit() : "are" === t.type ? e.fm.Next() : "freeze-counters" === t.type ? e.dsm.H.countersfrozen = !0 : "revive-from-stock-loss" === t.type && e.stm.ReviveFromStockLoss()
            }
            return {
                WaitFrames: function(s, a, n) {
                    t.waitingframes.push({
                        target: (e.iom.source ? e.iom.source.getFrame() : 0) + s,
                        type: a,
                        additionalData: n
                    })
                },
                ExecuteWaitingFrames: function() {
                    const a = e.iom.source ? e.iom.source.getFrame() : 0;
                    for (let e = t.waitingframes.length - 1; e >= 0; e--) t.waitingframes[e].target === a && (s(t.waitingframes[e]), t.waitingframes.splice(e, 1))
                },
                ExecuteWaitingFrame: s,
                WaitFramesUnsafe: function(s, a) {
                    t.unsafewaitingframes.push({
                        target: (e.iom.source ? e.iom.source.getFrame() : 0) + s,
                        handler: a
                    })
                },
                ExecuteUnsafeWaitingFrames: function(s = !1) {
                    const a = e.iom.source ? e.iom.source.getFrame() : 0;
                    for (let e = t.unsafewaitingframes.length - 1; e >= 0; e--)(t.unsafewaitingframes[e].target === a || s) && (t.unsafewaitingframes[e].handler(), t.unsafewaitingframes.splice(e, 1))
                }
            }
        },
        Vo = function(t) {
            "use strict";
            const s = t.gsm;
            let a = null;

            function n() {
                if (!s.setoptions.usezenconfig) return;
                if ("cheeselayer" !== Be.garbagemode) return;
                const e = s.board.reduce((e, t) => e + (t.some(e => "gb" === e) ? 1 : 0), 0),
                    n = Math.min(t.H(), Math.max(0, Math.floor(Be.cheeselayer_height)));
                if (e < n) {
                    t.gpm.Vibrate(ee.GARBAGERISE), t.sxm.PlayIngame("garbagerise");
                    for (let s = 0; s < n - e; s++)(null === a || 100 * Math.random() <= Be.cheesemessiness) && (a = Math.floor(Math.random() * t.W())), t.hm.H.holderstate.ds += 2 * t.lm.H.lastdT, t.bm.PushGarbageLine(a), t.bm.ClearIsLegalAtPosMemo(), t.bm.PushUpFallingIfNeeded()
                } else if (e > n) {
                    t.gpm.Vibrate(ee.GARBAGERISE), t.sxm.PlayIngame("garbagerise");
                    for (let a = 0; a < e - n; a++) s.board.pop(), s.board.unshift(Array(t.W()).fill(null)), s.boardedges.pop(), s.boardedges.unshift(Array(t.W()).fill(255)), t.hm.H.holderstate.ds += 2 * t.lm.H.lastdT, t.bm.ClearIsLegalAtPosMemo()
                }
            }
            return {
                ScoreToZenProgress: function(e, t) {
                    return s.setoptions.usezenconfig && "off" === Be.leveling ? 0 : e / (1e4 + 1e4 * (Math.log2(t + 1) - 1))
                },
                ZenLevelup: function() {
                    s.falling.sleep = !0, s.falling.deep_sleep = !0, t.wfm.WaitFrames(1, "freeze-counters", {}), s.escAllowed = !1, s.retryAllowed = !1, e("zen_panel").classList.add("noop"), t.hm.H.board.fx("zenlevel").create(io.extra.zenlevel), sn.play("bgcircle", {
                        amt: 300,
                        speed: 300
                    }), ks.stop(3e3), t.sxm.PlayIngame("warp", 1.25);
                    const a = new PIXI.Graphics;
                    a.beginFill(14540253, 1), a.drawRect(0, 0, innerWidth, innerHeight), a.endFill(), a.position.set(0, 0), a.alpha = 0, an.addChild(a);
                    const n = new PIXI.Graphics;
                    n.beginFill(14540253, 1), n.drawRect(innerWidth / -2, -2, innerWidth, 4), n.endFill(), n.position.set(innerWidth / 2, innerHeight / 2), n.alpha = 0, n.scale.x = 0, an.addChild(n), Gn.animate(t.hm.H.holder, {
                        0: {
                            "scale.x": "inherit",
                            "scale.y": "inherit",
                            rotation: 0
                        },
                        1: {
                            "scale.x": 0,
                            "scale.y": 0,
                            rotation: -1
                        }
                    }, 3.1, BezierEasing(.93, 0, .83, -.89)), setTimeout(() => {
                        if ("ultra" === te.video.graphics) {
                            const e = new PIXI.filters.PixelateFilter(1),
                                t = new PIXI.filters.TwistFilter(innerWidth, 0);
                            t.offset = new PIXI.Point(innerWidth / 2, innerHeight / 2);
                            const s = new PIXI.filters.TwistFilter(innerWidth / 3, 0);
                            s.offset = new PIXI.Point(innerWidth / 2, innerHeight / 2), _n.filters = [e, t, s], Gn.animate(t, {
                                0: {
                                    angle: 0
                                },
                                1: {
                                    angle: -3
                                }
                            }, 2.1, BezierEasing(.61, .01, .94, .04)), Gn.animate(s, {
                                0: {
                                    angle: 0
                                },
                                1: {
                                    angle: 10
                                }
                            }, 2.1, BezierEasing(.61, .01, .94, .04)), Gn.animate(e, {
                                0: {
                                    size: 1
                                },
                                1: {
                                    size: 100
                                }
                            }, 2.1, BezierEasing(.61, .01, .94, .04)), setTimeout(() => {
                                hn.scale(3)
                            }, 1950)
                        }
                    }, 1e3), setTimeout(() => {
                        Gn.animate(fn, {
                            0: {
                                alpha: "inherit"
                            },
                            1: {
                                alpha: 0
                            }
                        }, .5, BezierEasing(.5, .5, .5, .5))
                    }, 2600), setTimeout(() => {
                        Gn.animate(a, {
                            0: {
                                alpha: 0
                            },
                            1: {
                                alpha: 1
                            }
                        }, .2, BezierEasing(.5, .5, .5, .5)), Gn.animate(n, {
                            0: {
                                alpha: 0,
                                "scale.x": 0
                            },
                            1: {
                                alpha: 1,
                                "scale.x": 1
                            }
                        }, .2, BezierEasing(.5, .5, .5, .5)), sn.play("zen_wormhole")
                    }, 2900), setTimeout(() => {
                        s.stats.zenlevel++, s.stats.zenprogress = 0, hn.opacity(0), t.dsm.H.countersfrozen = !1, _n.filters = null, s.stats.lines = 0, s.stats.inputs = 0, s.stats.piecesplaced = 0, s.stats.garbage.sent = 0, s.stats.garbage.attack = 0, s.stats.garbage.cleared = 0, s.stats.combo = 0, s.stats.currentcombopower = 0, s.stats.btb = 0, s.stats.finesse.combo = 0, s.stats.finesse.faults = 0, s.stats.finesse.perfectpieces = 0, s.setoptions.b2bchaining && t.hm.H.board.el("b2b").delete();
                        const e = s.board.reduce((e, t) => e + (t.some(e => "gb" === e) ? 1 : 0), 0);
                        for (let a = 0; a < e; a++) s.board.pop(), s.board.unshift(Array(t.W()).fill(null)), s.boardedges.pop(), s.boardedges.unshift(Array(t.W()).fill(255)), t.bm.ClearIsLegalAtPosMemo(), t.hm.H.fallingdirty = !0, t.hm.H.stackdirty = !0;
                        Ft.saveZen({
                            map: t.bm.BoardToMap(),
                            level: s.stats.zenlevel,
                            progress: s.stats.zenprogress,
                            score: s.stats.score
                        }), Gn.animate(a, {
                            0: {
                                alpha: 1
                            },
                            1: {
                                alpha: 0
                            }
                        }, 1, BezierEasing(.5, .5, .5, .5))
                    }, 3100), setTimeout(() => {
                        hn.scale(1), fe(!0), Gn.animate(a, {
                            0: {
                                alpha: 0
                            },
                            .2: {
                                alpha: 1
                            },
                            1: {
                                alpha: .2
                            }
                        }, .4, BezierEasing(.5, .5, .5, .5)), sn.play("zen_wormhole_exit")
                    }, 6400), setTimeout(() => {
                        Gn.animate(a, {
                            0: {
                                alpha: .2
                            },
                            1: {
                                alpha: 1
                            }
                        }, .6, BezierEasing(.5, .5, .5, .5)), Gn.animate(n, {
                            0: {
                                "scale.y": 1
                            },
                            1: {
                                "scale.y": 300
                            }
                        }, .6, BezierEasing(.46, .06, .79, .09))
                    }, 6800), setTimeout(() => {
                        n.destroy(), s.destroyed || (t.hm.H.holder.rotation = 0, Gn.animate(t.hm.H.holder, {
                            0: {
                                "scale.x": 0,
                                "scale.y": 0
                            },
                            1: {
                                "scale.x": 1,
                                "scale.y": 1
                            }
                        }, 3, BezierEasing(.24, .59, .32, .96))), Gn.animate(a, {
                            0: {
                                alpha: 1
                            },
                            1: {
                                alpha: 0
                            }
                        }, 1, BezierEasing(.5, .5, .5, .5)), fn.alpha = Math.min(1, 10 * te.video.background), hn.opacity(.9)
                    }, 7400), setTimeout(() => {
                        a.destroy(), s.destroyed || (s.falling.sleep = !1, s.falling.deep_sleep = !1, s.stats.time.frameoffset = t.iom.source.getFrame(), s.escAllowed = !0, s.retryAllowed = !0, t.fm.Next(), t.hm.CreateHolder(), ks.playSmoothOrRandom("RANDOMcalm")), hn.opacity(1), e("zen_panel").classList.remove("noop")
                    }, 10400)
                },
                UpdateFromZenConfig: function(e = !1) {
                    if (s.setoptions.usezenconfig) {
                        switch (Be.gravitymode) {
                            case "subzero":
                                s.g = 0, s.setoptions.infinitemovement = !0, s.setoptions.locktime = 999999999;
                                break;
                            case "off":
                                s.g = 0, s.setoptions.infinitemovement = !1, s.setoptions.locktime = 30;
                                break;
                            case "relaxed":
                                s.g = .015 + .035 * BezierEasing(.78, .21, .86, .43)(Math.min(1, Math.max(0, s.stats.zenprogress))), s.setoptions.infinitemovement = !1, s.setoptions.locktime = 30;
                                break;
                            case "engaging":
                                s.g = .05 + .2 * BezierEasing(.78, .21, .86, .43)(Math.min(1, Math.max(0, s.stats.zenprogress))), s.setoptions.infinitemovement = !1, s.setoptions.locktime = 30;
                                break;
                            case "spicy":
                                s.g = .25 + 2.25 * BezierEasing(.78, .21, .86, .43)(Math.min(1, Math.max(0, s.stats.zenprogress))), s.setoptions.infinitemovement = !1, s.setoptions.locktime = 30;
                                break;
                            case "static":
                                s.g = Be.gravitystatic, s.setoptions.infinitemovement = !1, s.setoptions.locktime = 30
                        }
                        if (e) {
                            let e = !1;
                            switch (Be.counters) {
                                case "off":
                                    s.setoptions.slot_counter1 = void 0, s.setoptions.slot_counter2 = void 0, s.setoptions.slot_counter3 = void 0, s.setoptions.slot_counter4 = void 0, s.setoptions.slot_counter5 = void 0;
                                    break;
                                case "versus":
                                    e = !0, s.setoptions.slot_counter1 = "attack", s.setoptions.slot_counter2 = "pieces", s.setoptions.slot_counter3 = void 0, s.setoptions.slot_counter4 = void 0, s.setoptions.slot_counter5 = "vs";
                                    break;
                                case "time":
                                    s.setoptions.slot_counter1 = "stopwatch", s.setoptions.slot_counter2 = "lines", s.setoptions.slot_counter3 = "pieces", s.setoptions.slot_counter4 = void 0, s.setoptions.slot_counter5 = "finesse";
                                    break;
                                case "speed":
                                    s.setoptions.slot_counter1 = "pieces", s.setoptions.slot_counter2 = "keys", s.setoptions.slot_counter3 = void 0, s.setoptions.slot_counter4 = void 0, s.setoptions.slot_counter5 = "finesse";
                                    break;
                                case "efficiency":
                                    e = !0, s.setoptions.slot_counter1 = "finesse_l", s.setoptions.slot_counter2 = "keys", s.setoptions.slot_counter3 = void 0, s.setoptions.slot_counter4 = void 0, s.setoptions.slot_counter5 = "vs"
                            }
                            switch (Be.leveling) {
                                case "off":
                                    s.setoptions.slot_bar2 = void 0;
                                    break;
                                case "on":
                                    s.setoptions.slot_bar2 = "progress"
                            }
                            switch (Be.garbagemode) {
                                case "off":
                                    s.setoptions.slot_bar1 = void 0;
                                    break;
                                case "backfire_half":
                                case "backfire_full":
                                case "backfire_double":
                                    s.setoptions.slot_bar1 = "impending", e = !0;
                                    break;
                                case "unclear_half":
                                case "unclear_full":
                                case "unclear_double":
                                    s.setoptions.slot_bar1 = void 0, e = !0;
                                    break;
                                case "cheeselayer":
                                    s.setoptions.slot_bar1 = void 0, n();
                                    break;
                                case "cheesetimer":
                                    s.setoptions.slot_bar1 = void 0
                            }
                            s.setoptions.hasgarbage = e, t.hm.CreateHolder()
                        } else s.falling.sleep || s.falling.deep_sleep || "cheesetimer" !== Be.garbagemode || t.iom.source.getFrame() % (60 * Be.cheesetimer_interval) != 0 || ((null === a || 100 * Math.random() <= Be.cheesemessiness) && (a = Math.floor(Math.random() * t.W())), t.hm.H.holderstate.ds += 2 * t.lm.H.lastdT, t.hm.H.fallingdirty = !0, t.gpm.Vibrate(ee.GARBAGERISE), t.sxm.PlayIngame("garbagerise"), t.bm.PushGarbageLine(a), t.bm.ClearIsLegalAtPosMemo(), t.bm.PushUpFallingIfNeeded())
                    }
                },
                UpdateCheeseLayer: n
            }
        },
        Zo = 15,
        Jo = 11;
    let Qo = [],
        ei = 0;
    const ti = function() {
        "use strict";
        const e = Date.now() + ":" + (++ei).toString(),
            t = {
                IID: e,
                W: () => t.gsm.setoptions.boardwidth || 10,
                H: () => t.gsm.setoptions.boardheight || 20,
                B: () => t.gsm.setoptions.boardbuffer || 20,
                T: () => (t.gsm.setoptions.boardbuffer || 20) + (t.gsm.setoptions.boardheight || 20),
                Wh: () => (t.gsm.setoptions.boardwidth || 10) / 2,
                Hh: () => (t.gsm.setoptions.boardheight || 20) / 2
            };
        t.gsm = new Mo(t), t.c = new wo(t), t.iom = new $o(t), t.bm = new vo(t), t.fm = new xo(t), t.im = new Ro(t), t.geh = new So(t), t.hm = new Ho(t), t.sdm = new jo(t), t.pm = new Fo(t), t.lm = new Po(t), t.otm = new No(t), t.stm = new Ko(t), t.ctm = new Lo(t), t.pbm = new Uo(t), t.ssm = new Go(t), t.dsm = new Eo(t), t.znm = new Vo(t), t.rbm = new Bo(t), t.gom = new Ao(t), t.bam = new yo(t), t.lcm = new Oo(t), t.atm = new bo(t), t.wfm = new Yo(t), t.fim = new To(t), t.spm = new zo(t), t.sxm = new Xo(t), t.gpm = new Co(t), t.fxm = new Io(t), t.mam = new Do(t), t.bhm = new ko(t), t.siom = new qo(t), t.stam = new Wo(t);
        const s = {
            IID: e,
            createGameHolder: function(e, s = !1) {
                t.c.IsServer() || (t.hm.CreateHolder(e, s), is(!1))
            },
            getPos: function() {
                return {
                    pos: On(t.hm.H.stackobj, ls(Wn.x * t.Wh()), ls(Wn.x * t.Hh()), t.hm.H.holderstate.cos),
                    scale: t.hm.S()
                }
            },
            getPosTransformed: function() {
                return {
                    pos: $n(t.hm.H.stackobj, ls(Wn.x * t.Wh()), ls(Wn.x * t.Hh())),
                    scale: t.hm.S()
                }
            },
            flushCanvases: function() {
                t.c.IsServer() || t.hm.CreateHolder()
            },
            bindEventSource: function(e) {
                t.iom.source = e, e.bind(t.im.KeyDown), e.bind(t.im.KeyUp), e.bind(t.geh.HandleIGE), e.bind(t.geh.HandleTargets), t.c.IsServer() || e.bind(t.geh.HandleEnd)
            },
            bindRollingReplay: function(e) {
                t.iom.replay.bindRolling(e)
            },
            setListenID: function(e) {
                t.iom.replay.setListenID(e)
            },
            setGame: function(e) {
                t.stam.SetGame(e)
            },
            startGame: function(e = !1) {
                t.stam.StartGame(e)
            },
            export: function() {
                return t.siom.Export()
            },
            end: function() {
                t.gom.GameOver("drop", !0)
            },
            endNow: function() {
                t.gom.GameOver("dropnow", !0)
            },
            endLose: function(e = !1) {
                e && t.atm.TakeAllDamage(!0), t.gom.GameOver("topout", !0)
            },
            endWin: function() {
                t.gom.GameOver("winner", !0)
            },
            endClear: function() {
                t.gom.GameOver("clear", !0)
            },
            queueEnd: function(e, s = !1, a, n) {
                if (t.gsm.endqueued) return;
                t.gsm.endqueued = !0;
                const o = () => {
                    s && t.atm.TakeAllDamage(!0), void 0 !== a && (t.gsm.fire = a), void 0 !== n && (t.gsm.killer = n), t.gom.GameOver(e, !0)
                };
                if (!t.iom.scoped) return void o();
                let i = !1;
                const r = () => {
                    0 !== t.iom.source.amountToCatchUp() ? (i = !1, t.wfm.WaitFramesUnsafe(1, () => {
                        r()
                    })) : i ? o() : (i = !0, setTimeout(r, 200))
                };
                r()
            },
            destroy: function() {
                t.c.IsServer() || t.gom.Destroy()
            },
            behead: function() {
                t.hm.Behead()
            },
            fadeOutAndBehead: function(e) {
                t.hm.FadeOutAndBehead(e)
            },
            rehead: function(e = !1) {
                t.hm.Rehead(e)
            },
            doFrame: function() {
                t.c.IsServer() && t.lm.DoFrame()
            },
            advanceFrames: function(e, s) {
                t.lm.AdvanceFrames(e, s), s && !t.c.IsServer() && t.pbm.ForceUpdateGarbageBar("impending")
            },
            playbackSpeed: function(e) {
                if (void 0 === e) return t.lm.H.playbackSpeed;
                t.lm.H.playbackSpeed = e
            },
            location: function(e, s, a, n = !1) {
                t.hm.H.holderstate.ox = e, t.hm.H.holderstate.oy = s, t.hm.H.holderstate.os = a, n && (t.hm.H.holderstate.cox = e, t.hm.H.holderstate.coy = s, t.hm.H.holderstate.cos = a, t.hm.H.holderneedsrepull = !0)
            },
            getDisplayMode: function() {
                return t.hm.H.displaymode
            },
            isScoped: function() {
                return t.iom.scoped
            },
            changeDisplayMode: function(e) {
                t.hm.H.displaymode !== e && (t.hm.H.displaymode = e, t.hm.CreateHolder(), t.lm.H.diter = t.lm.H.cheekystep - 1)
            },
            on: function(e, s) {
                t.gsm.setoptions[`on${e}`] = s
            },
            tamper: function(e = ["t", "t", "t", "t", "t", "t", "t", "t", "t", "t", "t", "t", "t", "t", "t", "t", "t", "t"]) {
                t.gsm.bag = e
            },
            setTargeted: function(e) {
                t.pm.H.targeted = !!e
            },
            setTargets: function(e) {
                t.iom.source.pushTargets(e)
            },
            attack: function(e, s) {
                t.gsm.setoptions.hasgarbage = !0, t.atm.IncomingAttack(e, s)
            },
            highest: function() {
                return t.bm.HighestLine()
            },
            garbagestats: function() {
                return {
                    garbagereceived: t.gsm.garbagereceived,
                    lastattacker: t.gsm.lastattacker
                }
            },
            displayOffDef: function(e, s, a, n) {
                e && t.hm.H.board.fx("popup_offence").create(e, {
                    x: a,
                    y: n
                }), s && t.hm.H.board.fx("popup_defense").create(s, {
                    x: a,
                    y: n
                })
            },
            updatePlacement: function(e) {
                t.mam.SetPlacement(e)
            },
            fire: function(e) {
                t.fim.AddFire(e)
            },
            pullZenConfig: function() {
                t.znm.UpdateFromZenConfig(!0)
            },
            levelZen: function() {
                t.znm.ZenLevelup()
            },
            awaitFrame: function(e, s) {
                t.iom.source.getFrame() >= e ? s() : t.wfm.WaitFramesUnsafe(Math.max(1, e - t.iom.source.getFrame()), s)
            },
            ejectState: function() {
                return t.siom.EjectState()
            },
            injectState: function(e) {
                t.siom.InjectState(e), t.iom.source.seek(e.sourceframe), t.iom.replay && t.iom.replay.seek(e.sourceframe)
            },
            ejectBoardState: function() {
                return t.siom.EjectBoardState()
            },
            injectBoardState: function(e) {
                t.siom.InjectBoardState(e)
            },
            rerequestState: function() {
                t.siom.RerequestState()
            },
            getBoard: function() {
                return t.hm.H.board
            }
        };
        return t.parent = s, s
    }
})();